
mpu6050_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a934  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800aabc  0800aabc  0000babc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aad8  0800aad8  0000c07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aad8  0800aad8  0000bad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aae0  0800aae0  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aae0  0800aae0  0000bae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aae4  0800aae4  0000bae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800aae8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000a4c  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ac8  20000ac8  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155ef  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a55  00000000  00000000  0002169b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  000250f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d67  00000000  00000000  00026290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236cb  00000000  00000000  00026ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019064  00000000  00000000  0004a6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbd33  00000000  00000000  00063726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f459  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d40  00000000  00000000  0012f49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  001341dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800aaa4 	.word	0x0800aaa4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800aaa4 	.word	0x0800aaa4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f000 ffce 	bl	8001c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f846 	bl	8000d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f000 f942 	bl	8000f88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d04:	f000 f8ac 	bl	8000e60 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d08:	f000 f8d8 	bl	8000ebc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d0c:	f000 f906 	bl	8000f1c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d10:	f009 fa72 	bl	800a1f8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  deviceAddress=MPU6050_ScanDeviceID(&hi2c1);
 8000d14:	4815      	ldr	r0, [pc, #84]	@ (8000d6c <main+0x78>)
 8000d16:	f000 fa3b 	bl	8001190 <MPU6050_ScanDeviceID>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <main+0x7c>)
 8000d20:	701a      	strb	r2, [r3, #0]
  MPU6050_Init(&hi2c1, MPU6050_ACCEL_RANGE_8G, MPU6050_GYRO_RANGE_1000);
 8000d22:	2202      	movs	r2, #2
 8000d24:	2102      	movs	r1, #2
 8000d26:	4811      	ldr	r0, [pc, #68]	@ (8000d6c <main+0x78>)
 8000d28:	f000 fa96 	bl	8001258 <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d2c:	f009 fa8a 	bl	800a244 <MX_USB_HOST_Process>
    MPU6050_getAccelValue(&hi2c1, accelData);
 8000d30:	4910      	ldr	r1, [pc, #64]	@ (8000d74 <main+0x80>)
 8000d32:	480e      	ldr	r0, [pc, #56]	@ (8000d6c <main+0x78>)
 8000d34:	f000 fb1c 	bl	8001370 <MPU6050_getAccelValue>
    MPU6050_getGyroValue(&hi2c1, gyroData);
 8000d38:	490f      	ldr	r1, [pc, #60]	@ (8000d78 <main+0x84>)
 8000d3a:	480c      	ldr	r0, [pc, #48]	@ (8000d6c <main+0x78>)
 8000d3c:	f000 fb49 	bl	80013d2 <MPU6050_getGyroValue>
    temperature=MPU6050_getTempValue(&hi2c1, &tempData);
 8000d40:	490e      	ldr	r1, [pc, #56]	@ (8000d7c <main+0x88>)
 8000d42:	480a      	ldr	r0, [pc, #40]	@ (8000d6c <main+0x78>)
 8000d44:	f000 fb78 	bl	8001438 <MPU6050_getTempValue>
 8000d48:	eef0 7a40 	vmov.f32	s15, s0
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <main+0x8c>)
 8000d4e:	edc3 7a00 	vstr	s15, [r3]

    MPU6050_getAccelIng(accelData, MPU6050_ACCEL_RANGE_8G, accelDataInG);
 8000d52:	4a0c      	ldr	r2, [pc, #48]	@ (8000d84 <main+0x90>)
 8000d54:	2102      	movs	r1, #2
 8000d56:	4807      	ldr	r0, [pc, #28]	@ (8000d74 <main+0x80>)
 8000d58:	f000 fbb8 	bl	80014cc <MPU6050_getAccelIng>
    MPU6050_getGyroIns(gyroData, MPU6050_GYRO_RANGE_1000, gyroDataIns);
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <main+0x94>)
 8000d5e:	2102      	movs	r1, #2
 8000d60:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <main+0x84>)
 8000d62:	f000 fc91 	bl	8001688 <MPU6050_getGyroIns>
    MX_USB_HOST_Process();
 8000d66:	bf00      	nop
 8000d68:	e7e0      	b.n	8000d2c <main+0x38>
 8000d6a:	bf00      	nop
 8000d6c:	20000098 	.word	0x20000098
 8000d70:	2000018c 	.word	0x2000018c
 8000d74:	20000190 	.word	0x20000190
 8000d78:	20000198 	.word	0x20000198
 8000d7c:	2000019e 	.word	0x2000019e
 8000d80:	200001a0 	.word	0x200001a0
 8000d84:	200001a4 	.word	0x200001a4
 8000d88:	200001b0 	.word	0x200001b0

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b094      	sub	sp, #80	@ 0x50
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	2230      	movs	r2, #48	@ 0x30
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f009 fdf4 	bl	800a988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	4a27      	ldr	r2, [pc, #156]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc0:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <SystemClock_Config+0xd0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a21      	ldr	r2, [pc, #132]	@ (8000e5c <SystemClock_Config+0xd0>)
 8000dd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e5c <SystemClock_Config+0xd0>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de8:	2301      	movs	r3, #1
 8000dea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e00:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0e:	f107 0320 	add.w	r3, r7, #32
 8000e12:	4618      	mov	r0, r3
 8000e14:	f005 f9b4 	bl	8006180 <HAL_RCC_OscConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e1e:	f000 f9b1 	bl	8001184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e22:	230f      	movs	r3, #15
 8000e24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e26:	2302      	movs	r3, #2
 8000e28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e2e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	2105      	movs	r1, #5
 8000e40:	4618      	mov	r0, r3
 8000e42:	f005 fc15 	bl	8006670 <HAL_RCC_ClockConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e4c:	f000 f99a 	bl	8001184 <Error_Handler>
  }
}
 8000e50:	bf00      	nop
 8000e52:	3750      	adds	r7, #80	@ 0x50
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40007000 	.word	0x40007000

08000e60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e66:	4a13      	ldr	r2, [pc, #76]	@ (8000eb4 <MX_I2C1_Init+0x54>)
 8000e68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e6c:	4a12      	ldr	r2, [pc, #72]	@ (8000eb8 <MX_I2C1_Init+0x58>)
 8000e6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e8a:	4b09      	ldr	r3, [pc, #36]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e90:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e96:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e9e:	f003 fb8d 	bl	80045bc <HAL_I2C_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ea8:	f000 f96c 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000098 	.word	0x20000098
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	000186a0 	.word	0x000186a0

08000ebc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <MX_I2S3_Init+0x54>)
 8000ec2:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <MX_I2S3_Init+0x58>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ec6:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <MX_I2S3_Init+0x54>)
 8000ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ecc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <MX_I2S3_Init+0x54>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <MX_I2S3_Init+0x54>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <MX_I2S3_Init+0x54>)
 8000edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ee0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <MX_I2S3_Init+0x54>)
 8000ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8000f18 <MX_I2S3_Init+0x5c>)
 8000ee6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <MX_I2S3_Init+0x54>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000eee:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <MX_I2S3_Init+0x54>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <MX_I2S3_Init+0x54>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <MX_I2S3_Init+0x54>)
 8000efc:	f004 fca0 	bl	8005840 <HAL_I2S_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f06:	f000 f93d 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000ec 	.word	0x200000ec
 8000f14:	40003c00 	.word	0x40003c00
 8000f18:	00017700 	.word	0x00017700

08000f1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f20:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f22:	4a18      	ldr	r2, [pc, #96]	@ (8000f84 <MX_SPI1_Init+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f26:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f60:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f68:	220a      	movs	r2, #10
 8000f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	@ (8000f80 <MX_SPI1_Init+0x64>)
 8000f6e:	f005 fecd 	bl	8006d0c <HAL_SPI_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f78:	f000 f904 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000134 	.word	0x20000134
 8000f84:	40013000 	.word	0x40013000

08000f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	@ 0x30
 8000f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
 8000fa2:	4b72      	ldr	r3, [pc, #456]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a71      	ldr	r2, [pc, #452]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8000fa8:	f043 0310 	orr.w	r3, r3, #16
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b6f      	ldr	r3, [pc, #444]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	61bb      	str	r3, [r7, #24]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	4b6b      	ldr	r3, [pc, #428]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a6a      	ldr	r2, [pc, #424]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b68      	ldr	r3, [pc, #416]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b64      	ldr	r3, [pc, #400]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a63      	ldr	r2, [pc, #396]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8000fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b61      	ldr	r3, [pc, #388]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a5c      	ldr	r2, [pc, #368]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b5a      	ldr	r3, [pc, #360]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b56      	ldr	r3, [pc, #344]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a55      	ldr	r2, [pc, #340]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b53      	ldr	r3, [pc, #332]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b4f      	ldr	r3, [pc, #316]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a4e      	ldr	r2, [pc, #312]	@ (800116c <MX_GPIO_Init+0x1e4>)
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b4c      	ldr	r3, [pc, #304]	@ (800116c <MX_GPIO_Init+0x1e4>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2108      	movs	r1, #8
 800104a:	4849      	ldr	r0, [pc, #292]	@ (8001170 <MX_GPIO_Init+0x1e8>)
 800104c:	f001 f968 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	2101      	movs	r1, #1
 8001054:	4847      	ldr	r0, [pc, #284]	@ (8001174 <MX_GPIO_Init+0x1ec>)
 8001056:	f001 f963 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800105a:	2200      	movs	r2, #0
 800105c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001060:	4845      	ldr	r0, [pc, #276]	@ (8001178 <MX_GPIO_Init+0x1f0>)
 8001062:	f001 f95d 	bl	8002320 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001066:	2308      	movs	r3, #8
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	483c      	ldr	r0, [pc, #240]	@ (8001170 <MX_GPIO_Init+0x1e8>)
 800107e:	f000 ffb3 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001082:	2301      	movs	r3, #1
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4836      	ldr	r0, [pc, #216]	@ (8001174 <MX_GPIO_Init+0x1ec>)
 800109a:	f000 ffa5 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800109e:	2308      	movs	r3, #8
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ae:	2305      	movs	r3, #5
 80010b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	482e      	ldr	r0, [pc, #184]	@ (8001174 <MX_GPIO_Init+0x1ec>)
 80010ba:	f000 ff95 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010be:	2301      	movs	r3, #1
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010c2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	482a      	ldr	r0, [pc, #168]	@ (800117c <MX_GPIO_Init+0x1f4>)
 80010d4:	f000 ff88 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010d8:	2304      	movs	r3, #4
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	4825      	ldr	r0, [pc, #148]	@ (8001180 <MX_GPIO_Init+0x1f8>)
 80010ec:	f000 ff7c 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80010f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001102:	2305      	movs	r3, #5
 8001104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	481c      	ldr	r0, [pc, #112]	@ (8001180 <MX_GPIO_Init+0x1f8>)
 800110e:	f000 ff6b 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001112:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001116:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	4813      	ldr	r0, [pc, #76]	@ (8001178 <MX_GPIO_Init+0x1f0>)
 800112c:	f000 ff5c 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001130:	2320      	movs	r3, #32
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	480d      	ldr	r0, [pc, #52]	@ (8001178 <MX_GPIO_Init+0x1f0>)
 8001144:	f000 ff50 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001148:	2302      	movs	r3, #2
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800114c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <MX_GPIO_Init+0x1e8>)
 800115e:	f000 ff43 	bl	8001fe8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001162:	bf00      	nop
 8001164:	3730      	adds	r7, #48	@ 0x30
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40021000 	.word	0x40021000
 8001174:	40020800 	.word	0x40020800
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40020000 	.word	0x40020000
 8001180:	40020400 	.word	0x40020400

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <Error_Handler+0x8>

08001190 <MPU6050_ScanDeviceID>:

#include "mpu6050.h"



int MPU6050_ScanDeviceID(I2C_HandleTypeDef *hi2cx){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

	for(uint8_t address=0; address<255; address++){
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e00f      	b.n	80011be <MPU6050_ScanDeviceID+0x2e>
		if(HAL_I2C_IsDeviceReady(hi2cx, address, 1, TIMEOUT)==HAL_OK){
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	b299      	uxth	r1, r3
 80011a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a6:	2201      	movs	r2, #1
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f003 fe7b 	bl	8004ea4 <HAL_I2C_IsDeviceReady>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <MPU6050_ScanDeviceID+0x28>
			return address;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	e007      	b.n	80011c8 <MPU6050_ScanDeviceID+0x38>
	for(uint8_t address=0; address<255; address++){
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	3301      	adds	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	2bff      	cmp	r3, #255	@ 0xff
 80011c2:	d1ec      	bne.n	800119e <MPU6050_ScanDeviceID+0xe>
		}
	}
	return -1;
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <MPU6050_ReadRegisterData>:


static MPU6050ReadStatus MPU6050_ReadRegisterData(I2C_HandleTypeDef *hi2cx, uint16_t registerAddress, uint16_t sizeofData, uint8_t *dataBuffer){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af04      	add	r7, sp, #16
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	817b      	strh	r3, [r7, #10]
 80011de:	4613      	mov	r3, r2
 80011e0:	813b      	strh	r3, [r7, #8]
	if(HAL_I2C_Mem_Read(hi2cx, MPU6050_DEVICE_ADDRESS, registerAddress, 1, dataBuffer, sizeofData, TIMEOUT)==HAL_OK){
 80011e2:	897a      	ldrh	r2, [r7, #10]
 80011e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	893b      	ldrh	r3, [r7, #8]
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	21d0      	movs	r1, #208	@ 0xd0
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f003 fc22 	bl	8004a40 <HAL_I2C_Mem_Read>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <MPU6050_ReadRegisterData+0x36>
		return READ_SUCCESS;
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <MPU6050_ReadRegisterData+0x38>
	}
	return READ_FAIL;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <MPU6050_WriteRegisterData>:

static MPU6050WriteStatus MPU6050_WriteRegisterData(I2C_HandleTypeDef *hi2cx, uint16_t registerAddress, uint16_t value){
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af02      	add	r7, sp, #8
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
 800121c:	4613      	mov	r3, r2
 800121e:	803b      	strh	r3, [r7, #0]
	uint8_t data[2]={0};
 8001220:	2300      	movs	r3, #0
 8001222:	81bb      	strh	r3, [r7, #12]
	data[0]=registerAddress;
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	733b      	strb	r3, [r7, #12]
	data[1]=value;
 800122a:	883b      	ldrh	r3, [r7, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	737b      	strb	r3, [r7, #13]

	if(HAL_I2C_Master_Transmit(hi2cx, MPU6050_DEVICE_ADDRESS, data, sizeof(data), TIMEOUT)==HAL_OK){
 8001230:	f107 020c 	add.w	r2, r7, #12
 8001234:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2302      	movs	r3, #2
 800123c:	21d0      	movs	r1, #208	@ 0xd0
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f003 fb00 	bl	8004844 <HAL_I2C_Master_Transmit>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <MPU6050_WriteRegisterData+0x3e>
		return WRITE_SUCCESS;
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <MPU6050_WriteRegisterData+0x40>
	}
	return WRITE_FAIL;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <MPU6050_Init>:

MPU6050InitStatus MPU6050_Init(I2C_HandleTypeDef *hi2cx, uint8_t AFS_SEL, uint8_t FS_SEL){
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	70fb      	strb	r3, [r7, #3]
 8001264:	4613      	mov	r3, r2
 8001266:	70bb      	strb	r3, [r7, #2]
	uint8_t dataBuffer=0;
 8001268:	2300      	movs	r3, #0
 800126a:	75bb      	strb	r3, [r7, #22]
	MPU6050_ReadRegisterData(hi2cx, MPU6050_REG_WHO_AM_I, 1, &dataBuffer);
 800126c:	f107 0316 	add.w	r3, r7, #22
 8001270:	2201      	movs	r2, #1
 8001272:	2175      	movs	r1, #117	@ 0x75
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ffab 	bl	80011d0 <MPU6050_ReadRegisterData>
	if(dataBuffer != 0x68)
 800127a:	7dbb      	ldrb	r3, [r7, #22]
 800127c:	2b68      	cmp	r3, #104	@ 0x68
 800127e:	d001      	beq.n	8001284 <MPU6050_Init+0x2c>
	{
		return INIT_FAIL;
 8001280:	2300      	movs	r3, #0
 8001282:	e071      	b.n	8001368 <MPU6050_Init+0x110>
	}


	uint8_t tempReg = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	75fb      	strb	r3, [r7, #23]

	PowerManagementRegister_t powerManagement={0};
 8001288:	2300      	movs	r3, #0
 800128a:	753b      	strb	r3, [r7, #20]
	powerManagement.ClkSel = 0;
 800128c:	7d3b      	ldrb	r3, [r7, #20]
 800128e:	f36f 0302 	bfc	r3, #0, #3
 8001292:	753b      	strb	r3, [r7, #20]
	powerManagement.Temp_Dis = 0;
 8001294:	7d3b      	ldrb	r3, [r7, #20]
 8001296:	f36f 03c3 	bfc	r3, #3, #1
 800129a:	753b      	strb	r3, [r7, #20]
	powerManagement.Reserved = 0;
 800129c:	7d3b      	ldrb	r3, [r7, #20]
 800129e:	f36f 1304 	bfc	r3, #4, #1
 80012a2:	753b      	strb	r3, [r7, #20]
	powerManagement.Cycle = 0;
 80012a4:	7d3b      	ldrb	r3, [r7, #20]
 80012a6:	f36f 1345 	bfc	r3, #5, #1
 80012aa:	753b      	strb	r3, [r7, #20]
	powerManagement.Sleep = 0;
 80012ac:	7d3b      	ldrb	r3, [r7, #20]
 80012ae:	f36f 1386 	bfc	r3, #6, #1
 80012b2:	753b      	strb	r3, [r7, #20]
	powerManagement.Device_Reset = 0;
 80012b4:	7d3b      	ldrb	r3, [r7, #20]
 80012b6:	f36f 13c7 	bfc	r3, #7, #1
 80012ba:	753b      	strb	r3, [r7, #20]
	tempReg=*((uint8_t*)&powerManagement);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	75fb      	strb	r3, [r7, #23]
	MPU6050_WriteRegisterData(hi2cx, MPU6050_REG_PWR_MGMT_1, tempReg);
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	216b      	movs	r1, #107	@ 0x6b
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff9f 	bl	8001210 <MPU6050_WriteRegisterData>
	///////////////////////////////////////////////////////////////////////////////////////
	AccelConfigRegister_t accelConfig = {0};
 80012d2:	2300      	movs	r3, #0
 80012d4:	743b      	strb	r3, [r7, #16]
	accelConfig.Reserved = 0;
 80012d6:	7c3b      	ldrb	r3, [r7, #16]
 80012d8:	f36f 0302 	bfc	r3, #0, #3
 80012dc:	743b      	strb	r3, [r7, #16]
	accelConfig.AFS_Sel =AFS_SEL;
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	7c3b      	ldrb	r3, [r7, #16]
 80012e8:	f362 03c4 	bfi	r3, r2, #3, #2
 80012ec:	743b      	strb	r3, [r7, #16]
	accelConfig.ZA_ST = 0;
 80012ee:	7c3b      	ldrb	r3, [r7, #16]
 80012f0:	f36f 1345 	bfc	r3, #5, #1
 80012f4:	743b      	strb	r3, [r7, #16]
	accelConfig.YA_ST = 0;
 80012f6:	7c3b      	ldrb	r3, [r7, #16]
 80012f8:	f36f 1386 	bfc	r3, #6, #1
 80012fc:	743b      	strb	r3, [r7, #16]
	accelConfig.XA_ST = 0;
 80012fe:	7c3b      	ldrb	r3, [r7, #16]
 8001300:	f36f 13c7 	bfc	r3, #7, #1
 8001304:	743b      	strb	r3, [r7, #16]
	tempReg=*((uint8_t*)&accelConfig);
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	75fb      	strb	r3, [r7, #23]
	MPU6050_WriteRegisterData(hi2cx, MPU6050_REG_ACCEL_CONFIG, tempReg);
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	b29b      	uxth	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	211c      	movs	r1, #28
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ff7a 	bl	8001210 <MPU6050_WriteRegisterData>
	////////////////////////////////////////////////////////////////////////////////////////
	GyroConfigRegister_t gyroConfig = {0};
 800131c:	2300      	movs	r3, #0
 800131e:	733b      	strb	r3, [r7, #12]
	gyroConfig.Reserved = 0;
 8001320:	7b3b      	ldrb	r3, [r7, #12]
 8001322:	f36f 0302 	bfc	r3, #0, #3
 8001326:	733b      	strb	r3, [r7, #12]
	gyroConfig.FS_Sel = FS_SEL;
 8001328:	78bb      	ldrb	r3, [r7, #2]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	b2da      	uxtb	r2, r3
 8001330:	7b3b      	ldrb	r3, [r7, #12]
 8001332:	f362 03c4 	bfi	r3, r2, #3, #2
 8001336:	733b      	strb	r3, [r7, #12]
	gyroConfig.ZG_ST = 0;
 8001338:	7b3b      	ldrb	r3, [r7, #12]
 800133a:	f36f 1345 	bfc	r3, #5, #1
 800133e:	733b      	strb	r3, [r7, #12]
	gyroConfig.YG_ST = 0;
 8001340:	7b3b      	ldrb	r3, [r7, #12]
 8001342:	f36f 1386 	bfc	r3, #6, #1
 8001346:	733b      	strb	r3, [r7, #12]
	gyroConfig.XG_ST = 0;
 8001348:	7b3b      	ldrb	r3, [r7, #12]
 800134a:	f36f 13c7 	bfc	r3, #7, #1
 800134e:	733b      	strb	r3, [r7, #12]
	tempReg=*((uint8_t*)&gyroConfig);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	75fb      	strb	r3, [r7, #23]
	MPU6050_WriteRegisterData(hi2cx, MPU6050_REG_GYRO_CONFIG, tempReg);
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	b29b      	uxth	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	211b      	movs	r1, #27
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff55 	bl	8001210 <MPU6050_WriteRegisterData>
	////////////////////////////////////////////////////////////////////////////////////////

	return INIT_SUCCESS;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <MPU6050_getAccelValue>:


void MPU6050_getAccelValue(I2C_HandleTypeDef *hi2cx, int16_t *accelData){
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	uint8_t data[6]={0};
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	2300      	movs	r3, #0
 8001380:	81bb      	strh	r3, [r7, #12]
	MPU6050_ReadRegisterData(hi2cx, MPU6050_REG_ACCEL_XOUT_H, 6, data);
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	2206      	movs	r2, #6
 8001388:	213b      	movs	r1, #59	@ 0x3b
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff20 	bl	80011d0 <MPU6050_ReadRegisterData>
	accelData[0]=(int16_t)(data[0]<<8 | data[1]);
 8001390:	7a3b      	ldrb	r3, [r7, #8]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	b21a      	sxth	r2, r3
 8001396:	7a7b      	ldrb	r3, [r7, #9]
 8001398:	b21b      	sxth	r3, r3
 800139a:	4313      	orrs	r3, r2
 800139c:	b21a      	sxth	r2, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	801a      	strh	r2, [r3, #0]
	accelData[1]=(int16_t)(data[2]<<8 | data[3]);
 80013a2:	7abb      	ldrb	r3, [r7, #10]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	b219      	sxth	r1, r3
 80013a8:	7afb      	ldrb	r3, [r7, #11]
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	3302      	adds	r3, #2
 80013b0:	430a      	orrs	r2, r1
 80013b2:	b212      	sxth	r2, r2
 80013b4:	801a      	strh	r2, [r3, #0]
	accelData[2]=(int16_t)(data[4]<<8 | data[5]);
 80013b6:	7b3b      	ldrb	r3, [r7, #12]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	b219      	sxth	r1, r3
 80013bc:	7b7b      	ldrb	r3, [r7, #13]
 80013be:	b21a      	sxth	r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	3304      	adds	r3, #4
 80013c4:	430a      	orrs	r2, r1
 80013c6:	b212      	sxth	r2, r2
 80013c8:	801a      	strh	r2, [r3, #0]
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <MPU6050_getGyroValue>:



void MPU6050_getGyroValue(I2C_HandleTypeDef *hi2cx, int16_t *gyroData){
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
	uint8_t data[6]={0};
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	2300      	movs	r3, #0
 80013e2:	81bb      	strh	r3, [r7, #12]
	MPU6050_ReadRegisterData(hi2cx, MPU6050_REG_GYRO_XOUT_H, 6, data);
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2206      	movs	r2, #6
 80013ea:	2143      	movs	r1, #67	@ 0x43
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff feef 	bl	80011d0 <MPU6050_ReadRegisterData>
	gyroData[0]=(int16_t)(data[0]<<8 | data[1]);
 80013f2:	7a3b      	ldrb	r3, [r7, #8]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	7a7b      	ldrb	r3, [r7, #9]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21a      	sxth	r2, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	801a      	strh	r2, [r3, #0]
	gyroData[1]=(int16_t)(data[2]<<8 | data[3]);
 8001404:	7abb      	ldrb	r3, [r7, #10]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b219      	sxth	r1, r3
 800140a:	7afb      	ldrb	r3, [r7, #11]
 800140c:	b21a      	sxth	r2, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	3302      	adds	r3, #2
 8001412:	430a      	orrs	r2, r1
 8001414:	b212      	sxth	r2, r2
 8001416:	801a      	strh	r2, [r3, #0]
	gyroData[2]=(int16_t)(data[4]<<8 | data[5]);
 8001418:	7b3b      	ldrb	r3, [r7, #12]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b219      	sxth	r1, r3
 800141e:	7b7b      	ldrb	r3, [r7, #13]
 8001420:	b21a      	sxth	r2, r3
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	3304      	adds	r3, #4
 8001426:	430a      	orrs	r2, r1
 8001428:	b212      	sxth	r2, r2
 800142a:	801a      	strh	r2, [r3, #0]
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	0000      	movs	r0, r0
	...

08001438 <MPU6050_getTempValue>:

float MPU6050_getTempValue(I2C_HandleTypeDef *hi2cx, int16_t *tempData){
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
	uint8_t data[2]={0};
 8001442:	2300      	movs	r3, #0
 8001444:	813b      	strh	r3, [r7, #8]
	float temperature=0;
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
	MPU6050_ReadRegisterData(hi2cx, MPU6050_REG_TEMP_OUT_H, 2, data);
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	2202      	movs	r2, #2
 8001452:	2141      	movs	r1, #65	@ 0x41
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff febb 	bl	80011d0 <MPU6050_ReadRegisterData>
	*tempData=(int16_t)(data[0]<<8 | data[1]);
 800145a:	7a3b      	ldrb	r3, [r7, #8]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	7a7b      	ldrb	r3, [r7, #9]
 8001462:	b21b      	sxth	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b21a      	sxth	r2, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	801a      	strh	r2, [r3, #0]
	temperature=(float)*tempData/340.0 + 36.53;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147a:	ee17 0a90 	vmov	r0, s15
 800147e:	f7ff f807 	bl	8000490 <__aeabi_f2d>
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <MPU6050_getTempValue+0x90>)
 8001488:	f7ff f984 	bl	8000794 <__aeabi_ddiv>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	a30a      	add	r3, pc, #40	@ (adr r3, 80014c0 <MPU6050_getTempValue+0x88>)
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	f7fe fe9b 	bl	80001d4 <__adddf3>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	f7ff fa5d 	bl	8000964 <__aeabi_d2f>
 80014aa:	4603      	mov	r3, r0
 80014ac:	60fb      	str	r3, [r7, #12]
	return temperature;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	ee07 3a90 	vmov	s15, r3
}
 80014b4:	eeb0 0a67 	vmov.f32	s0, s15
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	0a3d70a4 	.word	0x0a3d70a4
 80014c4:	404243d7 	.word	0x404243d7
 80014c8:	40754000 	.word	0x40754000

080014cc <MPU6050_getAccelIng>:


void MPU6050_getAccelIng(int16_t *accelData, uint8_t AFS_SEL, float *accelDataIng)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	460b      	mov	r3, r1
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	72fb      	strb	r3, [r7, #11]
	if(AFS_SEL == 0x00){
 80014da:	7afb      	ldrb	r3, [r7, #11]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d12e      	bne.n	800153e <MPU6050_getAccelIng+0x72>
		accelDataIng[0] = (float) accelData[0] / 16384.0;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ee:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8001674 <MPU6050_getAccelIng+0x1a8>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	edc3 7a00 	vstr	s15, [r3]
		accelDataIng[1] = (float) accelData[1] / 16384.0;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3302      	adds	r3, #2
 8001500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001504:	ee07 3a90 	vmov	s15, r3
 8001508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3304      	adds	r3, #4
 8001510:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001674 <MPU6050_getAccelIng+0x1a8>
 8001514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001518:	edc3 7a00 	vstr	s15, [r3]
		accelDataIng[2] = (float) accelData[2] / 16384.0;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3304      	adds	r3, #4
 8001520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3308      	adds	r3, #8
 8001530:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8001674 <MPU6050_getAccelIng+0x1a8>
 8001534:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001538:	edc3 7a00 	vstr	s15, [r3]
	else if(AFS_SEL == 0x03){
		accelDataIng[0] = (float) accelData[0] / 2048.0;
		accelDataIng[1] = (float) accelData[1] / 2048.0;
		accelDataIng[2] = (float) accelData[2] / 2048.0;
	}
}
 800153c:	e094      	b.n	8001668 <MPU6050_getAccelIng+0x19c>
	else if(AFS_SEL == 0x01){
 800153e:	7afb      	ldrb	r3, [r7, #11]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d12e      	bne.n	80015a2 <MPU6050_getAccelIng+0xd6>
		accelDataIng[0] = (float) accelData[0] / 8192.0;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001552:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001678 <MPU6050_getAccelIng+0x1ac>
 8001556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	edc3 7a00 	vstr	s15, [r3]
		accelDataIng[1] = (float) accelData[1] / 8192.0;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3302      	adds	r3, #2
 8001564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3304      	adds	r3, #4
 8001574:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8001678 <MPU6050_getAccelIng+0x1ac>
 8001578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800157c:	edc3 7a00 	vstr	s15, [r3]
		accelDataIng[2] = (float) accelData[2] / 8192.0;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3304      	adds	r3, #4
 8001584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3308      	adds	r3, #8
 8001594:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001678 <MPU6050_getAccelIng+0x1ac>
 8001598:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159c:	edc3 7a00 	vstr	s15, [r3]
}
 80015a0:	e062      	b.n	8001668 <MPU6050_getAccelIng+0x19c>
	else if(AFS_SEL == 0x02){
 80015a2:	7afb      	ldrb	r3, [r7, #11]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d12e      	bne.n	8001606 <MPU6050_getAccelIng+0x13a>
		accelDataIng[0] = (float) accelData[0] / 4096.0;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b6:	eddf 6a31 	vldr	s13, [pc, #196]	@ 800167c <MPU6050_getAccelIng+0x1b0>
 80015ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a00 	vstr	s15, [r3]
		accelDataIng[1] = (float) accelData[1] / 4096.0;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3302      	adds	r3, #2
 80015c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3304      	adds	r3, #4
 80015d8:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800167c <MPU6050_getAccelIng+0x1b0>
 80015dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015e0:	edc3 7a00 	vstr	s15, [r3]
		accelDataIng[2] = (float) accelData[2] / 4096.0;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3304      	adds	r3, #4
 80015e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3308      	adds	r3, #8
 80015f8:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800167c <MPU6050_getAccelIng+0x1b0>
 80015fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001600:	edc3 7a00 	vstr	s15, [r3]
}
 8001604:	e030      	b.n	8001668 <MPU6050_getAccelIng+0x19c>
	else if(AFS_SEL == 0x03){
 8001606:	7afb      	ldrb	r3, [r7, #11]
 8001608:	2b03      	cmp	r3, #3
 800160a:	d12d      	bne.n	8001668 <MPU6050_getAccelIng+0x19c>
		accelDataIng[0] = (float) accelData[0] / 2048.0;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800161a:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001680 <MPU6050_getAccelIng+0x1b4>
 800161e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	edc3 7a00 	vstr	s15, [r3]
		accelDataIng[1] = (float) accelData[1] / 2048.0;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3302      	adds	r3, #2
 800162c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3304      	adds	r3, #4
 800163c:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001680 <MPU6050_getAccelIng+0x1b4>
 8001640:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001644:	edc3 7a00 	vstr	s15, [r3]
		accelDataIng[2] = (float) accelData[2] / 2048.0;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3304      	adds	r3, #4
 800164c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3308      	adds	r3, #8
 800165c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001680 <MPU6050_getAccelIng+0x1b4>
 8001660:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001664:	edc3 7a00 	vstr	s15, [r3]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	46800000 	.word	0x46800000
 8001678:	46000000 	.word	0x46000000
 800167c:	45800000 	.word	0x45800000
 8001680:	45000000 	.word	0x45000000
 8001684:	00000000 	.word	0x00000000

08001688 <MPU6050_getGyroIns>:


void MPU6050_getGyroIns(int16_t *gyroData, uint8_t FS_SEL, float *gyroDataIns)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	460b      	mov	r3, r1
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	72fb      	strb	r3, [r7, #11]
	if(FS_SEL == 0x00){
 8001696:	7afb      	ldrb	r3, [r7, #11]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d12e      	bne.n	80016fa <MPU6050_getGyroIns+0x72>
		gyroDataIns[0] = (float) gyroData[0] / 131.0;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016aa:	eddf 6a87 	vldr	s13, [pc, #540]	@ 80018c8 <MPU6050_getGyroIns+0x240>
 80016ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	edc3 7a00 	vstr	s15, [r3]
		gyroDataIns[1] = (float) gyroData[1] / 131.0;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3302      	adds	r3, #2
 80016bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3304      	adds	r3, #4
 80016cc:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80018c8 <MPU6050_getGyroIns+0x240>
 80016d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d4:	edc3 7a00 	vstr	s15, [r3]
		gyroDataIns[2] = (float) gyroData[2] / 131.0;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3304      	adds	r3, #4
 80016dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3308      	adds	r3, #8
 80016ec:	eddf 6a76 	vldr	s13, [pc, #472]	@ 80018c8 <MPU6050_getGyroIns+0x240>
 80016f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f4:	edc3 7a00 	vstr	s15, [r3]
	else if(FS_SEL == 0x03){
		gyroDataIns[0] = (float) gyroData[0] / 16.4;
		gyroDataIns[1] = (float) gyroData[1] / 16.4;
		gyroDataIns[2] = (float) gyroData[2] / 16.4;
	}
}
 80016f8:	e0d8      	b.n	80018ac <MPU6050_getGyroIns+0x224>
	else if(FS_SEL == 0x01){
 80016fa:	7afb      	ldrb	r3, [r7, #11]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d12e      	bne.n	800175e <MPU6050_getGyroIns+0xd6>
		gyroDataIns[0] = (float) gyroData[0] / 65.5;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80018cc <MPU6050_getGyroIns+0x244>
 8001712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	edc3 7a00 	vstr	s15, [r3]
		gyroDataIns[1] = (float) gyroData[1] / 65.5;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	3302      	adds	r3, #2
 8001720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3304      	adds	r3, #4
 8001730:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80018cc <MPU6050_getGyroIns+0x244>
 8001734:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001738:	edc3 7a00 	vstr	s15, [r3]
		gyroDataIns[2] = (float) gyroData[2] / 65.5;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3304      	adds	r3, #4
 8001740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3308      	adds	r3, #8
 8001750:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80018cc <MPU6050_getGyroIns+0x244>
 8001754:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001758:	edc3 7a00 	vstr	s15, [r3]
}
 800175c:	e0a6      	b.n	80018ac <MPU6050_getGyroIns+0x224>
	else if(FS_SEL == 0x02){
 800175e:	7afb      	ldrb	r3, [r7, #11]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d150      	bne.n	8001806 <MPU6050_getGyroIns+0x17e>
		gyroDataIns[0] = (float) gyroData[0] / 32.8;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001772:	ee17 0a90 	vmov	r0, s15
 8001776:	f7fe fe8b 	bl	8000490 <__aeabi_f2d>
 800177a:	a34f      	add	r3, pc, #316	@ (adr r3, 80018b8 <MPU6050_getGyroIns+0x230>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7ff f808 	bl	8000794 <__aeabi_ddiv>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff f8ea 	bl	8000964 <__aeabi_d2f>
 8001790:	4602      	mov	r2, r0
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	601a      	str	r2, [r3, #0]
		gyroDataIns[1] = (float) gyroData[1] / 32.8;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3302      	adds	r3, #2
 800179a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a6:	ee17 0a90 	vmov	r0, s15
 80017aa:	f7fe fe71 	bl	8000490 <__aeabi_f2d>
 80017ae:	a342      	add	r3, pc, #264	@ (adr r3, 80018b8 <MPU6050_getGyroIns+0x230>)
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	f7fe ffee 	bl	8000794 <__aeabi_ddiv>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	1d1c      	adds	r4, r3, #4
 80017c4:	f7ff f8ce 	bl	8000964 <__aeabi_d2f>
 80017c8:	4603      	mov	r3, r0
 80017ca:	6023      	str	r3, [r4, #0]
		gyroDataIns[2] = (float) gyroData[2] / 32.8;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3304      	adds	r3, #4
 80017d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017dc:	ee17 0a90 	vmov	r0, s15
 80017e0:	f7fe fe56 	bl	8000490 <__aeabi_f2d>
 80017e4:	a334      	add	r3, pc, #208	@ (adr r3, 80018b8 <MPU6050_getGyroIns+0x230>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7fe ffd3 	bl	8000794 <__aeabi_ddiv>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f103 0408 	add.w	r4, r3, #8
 80017fc:	f7ff f8b2 	bl	8000964 <__aeabi_d2f>
 8001800:	4603      	mov	r3, r0
 8001802:	6023      	str	r3, [r4, #0]
}
 8001804:	e052      	b.n	80018ac <MPU6050_getGyroIns+0x224>
	else if(FS_SEL == 0x03){
 8001806:	7afb      	ldrb	r3, [r7, #11]
 8001808:	2b03      	cmp	r3, #3
 800180a:	d14f      	bne.n	80018ac <MPU6050_getGyroIns+0x224>
		gyroDataIns[0] = (float) gyroData[0] / 16.4;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800181a:	ee17 0a90 	vmov	r0, s15
 800181e:	f7fe fe37 	bl	8000490 <__aeabi_f2d>
 8001822:	a327      	add	r3, pc, #156	@ (adr r3, 80018c0 <MPU6050_getGyroIns+0x238>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7fe ffb4 	bl	8000794 <__aeabi_ddiv>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f896 	bl	8000964 <__aeabi_d2f>
 8001838:	4602      	mov	r2, r0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
		gyroDataIns[1] = (float) gyroData[1] / 16.4;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3302      	adds	r3, #2
 8001842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184e:	ee17 0a90 	vmov	r0, s15
 8001852:	f7fe fe1d 	bl	8000490 <__aeabi_f2d>
 8001856:	a31a      	add	r3, pc, #104	@ (adr r3, 80018c0 <MPU6050_getGyroIns+0x238>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe ff9a 	bl	8000794 <__aeabi_ddiv>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	1d1c      	adds	r4, r3, #4
 800186c:	f7ff f87a 	bl	8000964 <__aeabi_d2f>
 8001870:	4603      	mov	r3, r0
 8001872:	6023      	str	r3, [r4, #0]
		gyroDataIns[2] = (float) gyroData[2] / 16.4;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3304      	adds	r3, #4
 8001878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001884:	ee17 0a90 	vmov	r0, s15
 8001888:	f7fe fe02 	bl	8000490 <__aeabi_f2d>
 800188c:	a30c      	add	r3, pc, #48	@ (adr r3, 80018c0 <MPU6050_getGyroIns+0x238>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	f7fe ff7f 	bl	8000794 <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f103 0408 	add.w	r4, r3, #8
 80018a4:	f7ff f85e 	bl	8000964 <__aeabi_d2f>
 80018a8:	4603      	mov	r3, r0
 80018aa:	6023      	str	r3, [r4, #0]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}
 80018b4:	f3af 8000 	nop.w
 80018b8:	66666666 	.word	0x66666666
 80018bc:	40406666 	.word	0x40406666
 80018c0:	66666666 	.word	0x66666666
 80018c4:	40306666 	.word	0x40306666
 80018c8:	43030000 	.word	0x43030000
 80018cc:	42830000 	.word	0x42830000

080018d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	4a0f      	ldr	r2, [pc, #60]	@ (800191c <HAL_MspInit+0x4c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e6:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	4a08      	ldr	r2, [pc, #32]	@ (800191c <HAL_MspInit+0x4c>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	@ 0x40
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_MspInit+0x4c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800190e:	2007      	movs	r0, #7
 8001910:	f000 fb28 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	@ 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a19      	ldr	r2, [pc, #100]	@ (80019a4 <HAL_I2C_MspInit+0x84>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d12c      	bne.n	800199c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <HAL_I2C_MspInit+0x88>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	4a17      	ldr	r2, [pc, #92]	@ (80019a8 <HAL_I2C_MspInit+0x88>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6313      	str	r3, [r2, #48]	@ 0x30
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <HAL_I2C_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800195e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001964:	2312      	movs	r3, #18
 8001966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001968:	2301      	movs	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001970:	2304      	movs	r3, #4
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	480c      	ldr	r0, [pc, #48]	@ (80019ac <HAL_I2C_MspInit+0x8c>)
 800197c:	f000 fb34 	bl	8001fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <HAL_I2C_MspInit+0x88>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	4a07      	ldr	r2, [pc, #28]	@ (80019a8 <HAL_I2C_MspInit+0x88>)
 800198a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800198e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001990:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <HAL_I2C_MspInit+0x88>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	@ 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40005400 	.word	0x40005400
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020400 	.word	0x40020400

080019b0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08e      	sub	sp, #56	@ 0x38
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a31      	ldr	r2, [pc, #196]	@ (8001aa0 <HAL_I2S_MspInit+0xf0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d15a      	bne.n	8001a96 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80019e0:	2301      	movs	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80019e4:	23c0      	movs	r3, #192	@ 0xc0
 80019e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4618      	mov	r0, r3
 80019f2:	f005 f849 	bl	8006a88 <HAL_RCCEx_PeriphCLKConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80019fc:	f7ff fbc2 	bl	8001184 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <HAL_I2S_MspInit+0xf4>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	4a26      	ldr	r2, [pc, #152]	@ (8001aa4 <HAL_I2S_MspInit+0xf4>)
 8001a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a10:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_I2S_MspInit+0xf4>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <HAL_I2S_MspInit+0xf4>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a24:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa4 <HAL_I2S_MspInit+0xf4>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <HAL_I2S_MspInit+0xf4>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <HAL_I2S_MspInit+0xf4>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a40:	4a18      	ldr	r2, [pc, #96]	@ (8001aa4 <HAL_I2S_MspInit+0xf4>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a48:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <HAL_I2S_MspInit+0xf4>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001a54:	2310      	movs	r3, #16
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a64:	2306      	movs	r3, #6
 8001a66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480e      	ldr	r0, [pc, #56]	@ (8001aa8 <HAL_I2S_MspInit+0xf8>)
 8001a70:	f000 faba 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a74:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a86:	2306      	movs	r3, #6
 8001a88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4806      	ldr	r0, [pc, #24]	@ (8001aac <HAL_I2S_MspInit+0xfc>)
 8001a92:	f000 faa9 	bl	8001fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3738      	adds	r7, #56	@ 0x38
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40003c00 	.word	0x40003c00
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020800 	.word	0x40020800

08001ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a19      	ldr	r2, [pc, #100]	@ (8001b34 <HAL_SPI_MspInit+0x84>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d12b      	bne.n	8001b2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <HAL_SPI_MspInit+0x88>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	4a17      	ldr	r2, [pc, #92]	@ (8001b38 <HAL_SPI_MspInit+0x88>)
 8001adc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_SPI_MspInit+0x88>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <HAL_SPI_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a10      	ldr	r2, [pc, #64]	@ (8001b38 <HAL_SPI_MspInit+0x88>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_SPI_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001b0a:	23e0      	movs	r3, #224	@ 0xe0
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <HAL_SPI_MspInit+0x8c>)
 8001b26:	f000 fa5f 	bl	8001fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	@ 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40013000 	.word	0x40013000
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020000 	.word	0x40020000

08001b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <NMI_Handler+0x4>

08001b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <HardFault_Handler+0x4>

08001b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <MemManage_Handler+0x4>

08001b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <BusFault_Handler+0x4>

08001b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <UsageFault_Handler+0x4>

08001b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b96:	f000 f8d1 	bl	8001d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <OTG_FS_IRQHandler+0x10>)
 8001ba6:	f000 feb5 	bl	8002914 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200005a0 	.word	0x200005a0

08001bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bbc:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be4:	f008 fee8 	bl	800a9b8 <__errno>
 8001be8:	4603      	mov	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <_sbrk+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20020000 	.word	0x20020000
 8001c14:	00000400 	.word	0x00000400
 8001c18:	200001bc 	.word	0x200001bc
 8001c1c:	20000ac8 	.word	0x20000ac8

08001c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <SystemInit+0x20>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c2a:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <SystemInit+0x20>)
 8001c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c48:	f7ff ffea 	bl	8001c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c4c:	480c      	ldr	r0, [pc, #48]	@ (8001c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c4e:	490d      	ldr	r1, [pc, #52]	@ (8001c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c50:	4a0d      	ldr	r2, [pc, #52]	@ (8001c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c54:	e002      	b.n	8001c5c <LoopCopyDataInit>

08001c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5a:	3304      	adds	r3, #4

08001c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c60:	d3f9      	bcc.n	8001c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c62:	4a0a      	ldr	r2, [pc, #40]	@ (8001c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c64:	4c0a      	ldr	r4, [pc, #40]	@ (8001c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c68:	e001      	b.n	8001c6e <LoopFillZerobss>

08001c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c6c:	3204      	adds	r2, #4

08001c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c70:	d3fb      	bcc.n	8001c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c72:	f008 fea7 	bl	800a9c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c76:	f7ff f83d 	bl	8000cf4 <main>
  bx  lr    
 8001c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c84:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001c88:	0800aae8 	.word	0x0800aae8
  ldr r2, =_sbss
 8001c8c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001c90:	20000ac8 	.word	0x20000ac8

08001c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c94:	e7fe      	b.n	8001c94 <ADC_IRQHandler>
	...

08001c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd8 <HAL_Init+0x40>)
 8001ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <HAL_Init+0x40>)
 8001cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a07      	ldr	r2, [pc, #28]	@ (8001cd8 <HAL_Init+0x40>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f000 f94f 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f000 f808 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ccc:	f7ff fe00 	bl	80018d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023c00 	.word	0x40023c00

08001cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce4:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_InitTick+0x54>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_InitTick+0x58>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f967 	bl	8001fce <HAL_SYSTICK_Config>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00e      	b.n	8001d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b0f      	cmp	r3, #15
 8001d0e:	d80a      	bhi.n	8001d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d10:	2200      	movs	r2, #0
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f000 f92f 	bl	8001f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d1c:	4a06      	ldr	r2, [pc, #24]	@ (8001d38 <HAL_InitTick+0x5c>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000000 	.word	0x20000000
 8001d34:	20000008 	.word	0x20000008
 8001d38:	20000004 	.word	0x20000004

08001d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_IncTick+0x20>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_IncTick+0x24>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <HAL_IncTick+0x24>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	200001c0 	.word	0x200001c0

08001d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b03      	ldr	r3, [pc, #12]	@ (8001d78 <HAL_GetTick+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	200001c0 	.word	0x200001c0

08001d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d84:	f7ff ffee 	bl	8001d64 <HAL_GetTick>
 8001d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d005      	beq.n	8001da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d96:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <HAL_Delay+0x44>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001da2:	bf00      	nop
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d8f7      	bhi.n	8001da4 <HAL_Delay+0x28>
  {
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000008 	.word	0x20000008

08001dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de0:	4013      	ands	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df6:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60d3      	str	r3, [r2, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e10:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <__NVIC_GetPriorityGrouping+0x18>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	f003 0307 	and.w	r3, r3, #7
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db0b      	blt.n	8001e52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	4907      	ldr	r1, [pc, #28]	@ (8001e60 <__NVIC_EnableIRQ+0x38>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2001      	movs	r0, #1
 8001e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100

08001e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db0a      	blt.n	8001e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	490c      	ldr	r1, [pc, #48]	@ (8001eb0 <__NVIC_SetPriority+0x4c>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	0112      	lsls	r2, r2, #4
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e8c:	e00a      	b.n	8001ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4908      	ldr	r1, [pc, #32]	@ (8001eb4 <__NVIC_SetPriority+0x50>)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3b04      	subs	r3, #4
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	761a      	strb	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	@ 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f1c3 0307 	rsb	r3, r3, #7
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	bf28      	it	cs
 8001ed6:	2304      	movcs	r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d902      	bls.n	8001ee8 <NVIC_EncodePriority+0x30>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3b03      	subs	r3, #3
 8001ee6:	e000      	b.n	8001eea <NVIC_EncodePriority+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	401a      	ands	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	4313      	orrs	r3, r2
         );
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	@ 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00f      	b.n	8001f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <SysTick_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f7ff ff8e 	bl	8001e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <SysTick_Config+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <SysTick_Config+0x40>)
 8001f50:	2207      	movs	r2, #7
 8001f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff29 	bl	8001dc4 <__NVIC_SetPriorityGrouping>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff3e 	bl	8001e0c <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff8e 	bl	8001eb8 <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5d 	bl	8001e64 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff31 	bl	8001e28 <__NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffa2 	bl	8001f20 <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	@ 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	e16b      	b.n	80022dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	429a      	cmp	r2, r3
 800201e:	f040 815a 	bne.w	80022d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d005      	beq.n	800203a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002036:	2b02      	cmp	r3, #2
 8002038:	d130      	bne.n	800209c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002070:	2201      	movs	r2, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 0201 	and.w	r2, r3, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d017      	beq.n	80020d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d123      	bne.n	800212c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	08da      	lsrs	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3208      	adds	r2, #8
 80020ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	69b9      	ldr	r1, [r7, #24]
 8002128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0203 	and.w	r2, r3, #3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80b4 	beq.w	80022d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b60      	ldr	r3, [pc, #384]	@ (80022f4 <HAL_GPIO_Init+0x30c>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	4a5f      	ldr	r2, [pc, #380]	@ (80022f4 <HAL_GPIO_Init+0x30c>)
 8002178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800217c:	6453      	str	r3, [r2, #68]	@ 0x44
 800217e:	4b5d      	ldr	r3, [pc, #372]	@ (80022f4 <HAL_GPIO_Init+0x30c>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218a:	4a5b      	ldr	r2, [pc, #364]	@ (80022f8 <HAL_GPIO_Init+0x310>)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	3302      	adds	r3, #2
 8002192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a52      	ldr	r2, [pc, #328]	@ (80022fc <HAL_GPIO_Init+0x314>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d02b      	beq.n	800220e <HAL_GPIO_Init+0x226>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a51      	ldr	r2, [pc, #324]	@ (8002300 <HAL_GPIO_Init+0x318>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d025      	beq.n	800220a <HAL_GPIO_Init+0x222>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a50      	ldr	r2, [pc, #320]	@ (8002304 <HAL_GPIO_Init+0x31c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01f      	beq.n	8002206 <HAL_GPIO_Init+0x21e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002308 <HAL_GPIO_Init+0x320>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d019      	beq.n	8002202 <HAL_GPIO_Init+0x21a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4e      	ldr	r2, [pc, #312]	@ (800230c <HAL_GPIO_Init+0x324>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <HAL_GPIO_Init+0x216>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002310 <HAL_GPIO_Init+0x328>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00d      	beq.n	80021fa <HAL_GPIO_Init+0x212>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002314 <HAL_GPIO_Init+0x32c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <HAL_GPIO_Init+0x20e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002318 <HAL_GPIO_Init+0x330>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_GPIO_Init+0x20a>
 80021ee:	2307      	movs	r3, #7
 80021f0:	e00e      	b.n	8002210 <HAL_GPIO_Init+0x228>
 80021f2:	2308      	movs	r3, #8
 80021f4:	e00c      	b.n	8002210 <HAL_GPIO_Init+0x228>
 80021f6:	2306      	movs	r3, #6
 80021f8:	e00a      	b.n	8002210 <HAL_GPIO_Init+0x228>
 80021fa:	2305      	movs	r3, #5
 80021fc:	e008      	b.n	8002210 <HAL_GPIO_Init+0x228>
 80021fe:	2304      	movs	r3, #4
 8002200:	e006      	b.n	8002210 <HAL_GPIO_Init+0x228>
 8002202:	2303      	movs	r3, #3
 8002204:	e004      	b.n	8002210 <HAL_GPIO_Init+0x228>
 8002206:	2302      	movs	r3, #2
 8002208:	e002      	b.n	8002210 <HAL_GPIO_Init+0x228>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_GPIO_Init+0x228>
 800220e:	2300      	movs	r3, #0
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	f002 0203 	and.w	r2, r2, #3
 8002216:	0092      	lsls	r2, r2, #2
 8002218:	4093      	lsls	r3, r2
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002220:	4935      	ldr	r1, [pc, #212]	@ (80022f8 <HAL_GPIO_Init+0x310>)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	3302      	adds	r3, #2
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800222e:	4b3b      	ldr	r3, [pc, #236]	@ (800231c <HAL_GPIO_Init+0x334>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002252:	4a32      	ldr	r2, [pc, #200]	@ (800231c <HAL_GPIO_Init+0x334>)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002258:	4b30      	ldr	r3, [pc, #192]	@ (800231c <HAL_GPIO_Init+0x334>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800227c:	4a27      	ldr	r2, [pc, #156]	@ (800231c <HAL_GPIO_Init+0x334>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002282:	4b26      	ldr	r3, [pc, #152]	@ (800231c <HAL_GPIO_Init+0x334>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022a6:	4a1d      	ldr	r2, [pc, #116]	@ (800231c <HAL_GPIO_Init+0x334>)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	@ (800231c <HAL_GPIO_Init+0x334>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022d0:	4a12      	ldr	r2, [pc, #72]	@ (800231c <HAL_GPIO_Init+0x334>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3301      	adds	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	2b0f      	cmp	r3, #15
 80022e0:	f67f ae90 	bls.w	8002004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3724      	adds	r7, #36	@ 0x24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40013800 	.word	0x40013800
 80022fc:	40020000 	.word	0x40020000
 8002300:	40020400 	.word	0x40020400
 8002304:	40020800 	.word	0x40020800
 8002308:	40020c00 	.word	0x40020c00
 800230c:	40021000 	.word	0x40021000
 8002310:	40021400 	.word	0x40021400
 8002314:	40021800 	.word	0x40021800
 8002318:	40021c00 	.word	0x40021c00
 800231c:	40013c00 	.word	0x40013c00

08002320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
 800232c:	4613      	mov	r3, r2
 800232e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002330:	787b      	ldrb	r3, [r7, #1]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800233c:	e003      	b.n	8002346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800233e:	887b      	ldrh	r3, [r7, #2]
 8002340:	041a      	lsls	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	619a      	str	r2, [r3, #24]
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af02      	add	r7, sp, #8
 8002358:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e059      	b.n	8002418 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f007 ff98 	bl	800a2b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2203      	movs	r2, #3
 8002388:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002392:	d102      	bne.n	800239a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f004 fdb2 	bl	8006f08 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7c1a      	ldrb	r2, [r3, #16]
 80023ac:	f88d 2000 	strb.w	r2, [sp]
 80023b0:	3304      	adds	r3, #4
 80023b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b4:	f004 fd33 	bl	8006e1e <USB_CoreInit>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2202      	movs	r2, #2
 80023c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e026      	b.n	8002418 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2101      	movs	r1, #1
 80023d0:	4618      	mov	r0, r3
 80023d2:	f004 fdaa 	bl	8006f2a <USB_SetCurrentMode>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e017      	b.n	8002418 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7c1a      	ldrb	r2, [r3, #16]
 80023f0:	f88d 2000 	strb.w	r2, [sp]
 80023f4:	3304      	adds	r3, #4
 80023f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f8:	f004 ff4c 	bl	8007294 <USB_HostInit>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2202      	movs	r2, #2
 8002406:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e004      	b.n	8002418 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b08b      	sub	sp, #44	@ 0x2c
 8002424:	af04      	add	r7, sp, #16
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	4608      	mov	r0, r1
 800242a:	4611      	mov	r1, r2
 800242c:	461a      	mov	r2, r3
 800242e:	4603      	mov	r3, r0
 8002430:	70fb      	strb	r3, [r7, #3]
 8002432:	460b      	mov	r3, r1
 8002434:	70bb      	strb	r3, [r7, #2]
 8002436:	4613      	mov	r3, r2
 8002438:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800243a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800243c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_HCD_HC_Init+0x2c>
 8002448:	2302      	movs	r3, #2
 800244a:	e09d      	b.n	8002588 <HAL_HCD_HC_Init+0x168>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	3319      	adds	r3, #25
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	3314      	adds	r3, #20
 8002478:	787a      	ldrb	r2, [r7, #1]
 800247a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	3315      	adds	r3, #21
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	3326      	adds	r3, #38	@ 0x26
 80024a0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80024a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	78bb      	ldrb	r3, [r7, #2]
 80024aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024ae:	b2d8      	uxtb	r0, r3
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	3316      	adds	r3, #22
 80024be:	4602      	mov	r2, r0
 80024c0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	4619      	mov	r1, r3
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fbc8 	bl	8002c5c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80024cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	da0a      	bge.n	80024ea <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	3317      	adds	r3, #23
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e009      	b.n	80024fe <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3317      	adds	r3, #23
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f005 f82a 	bl	800755c <USB_GetHostSpeed>
 8002508:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800250a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800250e:	2b01      	cmp	r3, #1
 8002510:	d10b      	bne.n	800252a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002512:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002516:	2b01      	cmp	r3, #1
 8002518:	d107      	bne.n	800252a <HAL_HCD_HC_Init+0x10a>
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d104      	bne.n	800252a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2bbc      	cmp	r3, #188	@ 0xbc
 8002524:	d901      	bls.n	800252a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002526:	23bc      	movs	r3, #188	@ 0xbc
 8002528:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	3318      	adds	r3, #24
 800253a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800253e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	b298      	uxth	r0, r3
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	3328      	adds	r3, #40	@ 0x28
 8002554:	4602      	mov	r2, r0
 8002556:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	b29b      	uxth	r3, r3
 8002560:	787c      	ldrb	r4, [r7, #1]
 8002562:	78ba      	ldrb	r2, [r7, #2]
 8002564:	78f9      	ldrb	r1, [r7, #3]
 8002566:	9302      	str	r3, [sp, #8]
 8002568:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	4623      	mov	r3, r4
 8002576:	f005 f819 	bl	80075ac <USB_HC_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002586:	7bfb      	ldrb	r3, [r7, #15]
}
 8002588:	4618      	mov	r0, r3
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	bd90      	pop	{r4, r7, pc}

08002590 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_HCD_HC_Halt+0x1e>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e00f      	b.n	80025ce <HAL_HCD_HC_Halt+0x3e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f005 fbab 	bl	8007d1a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	4608      	mov	r0, r1
 80025e2:	4611      	mov	r1, r2
 80025e4:	461a      	mov	r2, r3
 80025e6:	4603      	mov	r3, r0
 80025e8:	70fb      	strb	r3, [r7, #3]
 80025ea:	460b      	mov	r3, r1
 80025ec:	70bb      	strb	r3, [r7, #2]
 80025ee:	4613      	mov	r3, r2
 80025f0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	3317      	adds	r3, #23
 8002602:	78ba      	ldrb	r2, [r7, #2]
 8002604:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002606:	78fa      	ldrb	r2, [r7, #3]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	3326      	adds	r3, #38	@ 0x26
 8002616:	787a      	ldrb	r2, [r7, #1]
 8002618:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800261a:	7c3b      	ldrb	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d114      	bne.n	800264a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	332a      	adds	r3, #42	@ 0x2a
 8002630:	2203      	movs	r2, #3
 8002632:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3319      	adds	r3, #25
 8002644:	7f3a      	ldrb	r2, [r7, #28]
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e009      	b.n	800265e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	332a      	adds	r3, #42	@ 0x2a
 800265a:	2202      	movs	r2, #2
 800265c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800265e:	787b      	ldrb	r3, [r7, #1]
 8002660:	2b03      	cmp	r3, #3
 8002662:	f200 8102 	bhi.w	800286a <HAL_HCD_HC_SubmitRequest+0x292>
 8002666:	a201      	add	r2, pc, #4	@ (adr r2, 800266c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266c:	0800267d 	.word	0x0800267d
 8002670:	08002855 	.word	0x08002855
 8002674:	08002741 	.word	0x08002741
 8002678:	080027cb 	.word	0x080027cb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800267c:	7c3b      	ldrb	r3, [r7, #16]
 800267e:	2b01      	cmp	r3, #1
 8002680:	f040 80f5 	bne.w	800286e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002684:	78bb      	ldrb	r3, [r7, #2]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d12d      	bne.n	80026e6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800268a:	8b3b      	ldrh	r3, [r7, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	333d      	adds	r3, #61	@ 0x3d
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	333d      	adds	r3, #61	@ 0x3d
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10a      	bne.n	80026d0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	332a      	adds	r3, #42	@ 0x2a
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80026ce:	e0ce      	b.n	800286e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	332a      	adds	r3, #42	@ 0x2a
 80026e0:	2202      	movs	r2, #2
 80026e2:	701a      	strb	r2, [r3, #0]
      break;
 80026e4:	e0c3      	b.n	800286e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	331a      	adds	r3, #26
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	f040 80b8 	bne.w	800286e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80026fe:	78fa      	ldrb	r2, [r7, #3]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	333c      	adds	r3, #60	@ 0x3c
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	332a      	adds	r3, #42	@ 0x2a
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
      break;
 8002728:	e0a1      	b.n	800286e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	332a      	adds	r3, #42	@ 0x2a
 800273a:	2202      	movs	r2, #2
 800273c:	701a      	strb	r2, [r3, #0]
      break;
 800273e:	e096      	b.n	800286e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002740:	78bb      	ldrb	r3, [r7, #2]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d120      	bne.n	8002788 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	333d      	adds	r3, #61	@ 0x3d
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10a      	bne.n	8002772 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	332a      	adds	r3, #42	@ 0x2a
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002770:	e07e      	b.n	8002870 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	332a      	adds	r3, #42	@ 0x2a
 8002782:	2202      	movs	r2, #2
 8002784:	701a      	strb	r2, [r3, #0]
      break;
 8002786:	e073      	b.n	8002870 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	333c      	adds	r3, #60	@ 0x3c
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10a      	bne.n	80027b4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	332a      	adds	r3, #42	@ 0x2a
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
      break;
 80027b2:	e05d      	b.n	8002870 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	332a      	adds	r3, #42	@ 0x2a
 80027c4:	2202      	movs	r2, #2
 80027c6:	701a      	strb	r2, [r3, #0]
      break;
 80027c8:	e052      	b.n	8002870 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80027ca:	78bb      	ldrb	r3, [r7, #2]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d120      	bne.n	8002812 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	333d      	adds	r3, #61	@ 0x3d
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	332a      	adds	r3, #42	@ 0x2a
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027fa:	e039      	b.n	8002870 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	332a      	adds	r3, #42	@ 0x2a
 800280c:	2202      	movs	r2, #2
 800280e:	701a      	strb	r2, [r3, #0]
      break;
 8002810:	e02e      	b.n	8002870 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	333c      	adds	r3, #60	@ 0x3c
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	332a      	adds	r3, #42	@ 0x2a
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
      break;
 800283c:	e018      	b.n	8002870 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	332a      	adds	r3, #42	@ 0x2a
 800284e:	2202      	movs	r2, #2
 8002850:	701a      	strb	r2, [r3, #0]
      break;
 8002852:	e00d      	b.n	8002870 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	332a      	adds	r3, #42	@ 0x2a
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
      break;
 8002868:	e002      	b.n	8002870 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800286a:	bf00      	nop
 800286c:	e000      	b.n	8002870 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800286e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	332c      	adds	r3, #44	@ 0x2c
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	8b39      	ldrh	r1, [r7, #24]
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4403      	add	r3, r0
 8002894:	3334      	adds	r3, #52	@ 0x34
 8002896:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	334c      	adds	r3, #76	@ 0x4c
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	3338      	adds	r3, #56	@ 0x38
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	3315      	adds	r3, #21
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	334d      	adds	r3, #77	@ 0x4d
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	78fa      	ldrb	r2, [r7, #3]
 80028ee:	4613      	mov	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	3310      	adds	r3, #16
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	4413      	add	r3, r2
 80028fc:	1d19      	adds	r1, r3, #4
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	799b      	ldrb	r3, [r3, #6]
 8002902:	461a      	mov	r2, r3
 8002904:	f004 ff7e 	bl	8007804 <USB_HC_StartXfer>
 8002908:	4603      	mov	r3, r0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop

08002914 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f004 fc73 	bl	8007216 <USB_GetMode>
 8002930:	4603      	mov	r3, r0
 8002932:	2b01      	cmp	r3, #1
 8002934:	f040 80fb 	bne.w	8002b2e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f004 fc36 	bl	80071ae <USB_ReadInterrupts>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80f1 	beq.w	8002b2c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f004 fc2d 	bl	80071ae <USB_ReadInterrupts>
 8002954:	4603      	mov	r3, r0
 8002956:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800295a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800295e:	d104      	bne.n	800296a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002968:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f004 fc1d 	bl	80071ae <USB_ReadInterrupts>
 8002974:	4603      	mov	r3, r0
 8002976:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800297a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800297e:	d104      	bne.n	800298a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002988:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f004 fc0d 	bl	80071ae <USB_ReadInterrupts>
 8002994:	4603      	mov	r3, r0
 8002996:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800299a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800299e:	d104      	bne.n	80029aa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80029a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f004 fbfd 	bl	80071ae <USB_ReadInterrupts>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d103      	bne.n	80029c6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2202      	movs	r2, #2
 80029c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f004 fbef 	bl	80071ae <USB_ReadInterrupts>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029da:	d120      	bne.n	8002a1e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80029e4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d113      	bne.n	8002a1e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80029f6:	2110      	movs	r1, #16
 80029f8:	6938      	ldr	r0, [r7, #16]
 80029fa:	f004 fae2 	bl	8006fc2 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80029fe:	6938      	ldr	r0, [r7, #16]
 8002a00:	f004 fb11 	bl	8007026 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	7a5b      	ldrb	r3, [r3, #9]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d105      	bne.n	8002a18 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2101      	movs	r1, #1
 8002a12:	4618      	mov	r0, r3
 8002a14:	f004 fd02 	bl	800741c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f007 fcc9 	bl	800a3b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 fbc3 	bl	80071ae <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a32:	d102      	bne.n	8002a3a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f001 fd4d 	bl	80044d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f004 fbb5 	bl	80071ae <USB_ReadInterrupts>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d106      	bne.n	8002a5c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f007 fc92 	bl	800a378 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2208      	movs	r2, #8
 8002a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 fba4 	bl	80071ae <USB_ReadInterrupts>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a70:	d139      	bne.n	8002ae6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f005 f93e 	bl	8007cf8 <USB_HC_ReadInterrupt>
 8002a7c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	e025      	b.n	8002ad0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d018      	beq.n	8002aca <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aae:	d106      	bne.n	8002abe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f905 	bl	8002cc6 <HCD_HC_IN_IRQHandler>
 8002abc:	e005      	b.n	8002aca <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 ff67 	bl	8003998 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3301      	adds	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	795b      	ldrb	r3, [r3, #5]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d3d3      	bcc.n	8002a84 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f004 fb5f 	bl	80071ae <USB_ReadInterrupts>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d101      	bne.n	8002afe <HAL_HCD_IRQHandler+0x1ea>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_HCD_IRQHandler+0x1ec>
 8002afe:	2300      	movs	r3, #0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d014      	beq.n	8002b2e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0210 	bic.w	r2, r2, #16
 8002b12:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f001 fbfe 	bl	8004316 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0210 	orr.w	r2, r2, #16
 8002b28:	619a      	str	r2, [r3, #24]
 8002b2a:	e000      	b.n	8002b2e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002b2c:	bf00      	nop
    }
  }
}
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_HCD_Start+0x16>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e013      	b.n	8002b72 <HAL_HCD_Start+0x3e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2101      	movs	r1, #1
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f004 fcc6 	bl	80074ea <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 f9bf 	bl	8006ee6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_HCD_Stop+0x16>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e00d      	b.n	8002bac <HAL_HCD_Stop+0x32>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f005 fa19 	bl	8007fd4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f004 fc68 	bl	8007496 <USB_ResetPort>
 8002bc6:	4603      	mov	r3, r0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	334c      	adds	r3, #76	@ 0x4c
 8002bec:	781b      	ldrb	r3, [r3, #0]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	3338      	adds	r3, #56	@ 0x38
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f004 fcaa 	bl	800758a <USB_GetCurrentFrame>
 8002c36:	4603      	mov	r3, r0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f004 fc85 	bl	800755c <USB_GetHostSpeed>
 8002c52:	4603      	mov	r3, r0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	331a      	adds	r3, #26
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	331b      	adds	r3, #27
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3325      	adds	r3, #37	@ 0x25
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3324      	adds	r3, #36	@ 0x24
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f004 fa75 	bl	80071d4 <USB_ReadChInterrupts>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d11a      	bne.n	8002d2a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d00:	461a      	mov	r2, r3
 8002d02:	2304      	movs	r3, #4
 8002d04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	334d      	adds	r3, #77	@ 0x4d
 8002d16:	2207      	movs	r2, #7
 8002d18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f004 fff9 	bl	8007d1a <USB_HC_Halt>
 8002d28:	e09e      	b.n	8002e68 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f004 fa4e 	bl	80071d4 <USB_ReadChInterrupts>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d42:	d11b      	bne.n	8002d7c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d50:	461a      	mov	r2, r3
 8002d52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	334d      	adds	r3, #77	@ 0x4d
 8002d68:	2208      	movs	r2, #8
 8002d6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f004 ffd0 	bl	8007d1a <USB_HC_Halt>
 8002d7a:	e075      	b.n	8002e68 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f004 fa25 	bl	80071d4 <USB_ReadChInterrupts>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d11a      	bne.n	8002dca <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da0:	461a      	mov	r2, r3
 8002da2:	2308      	movs	r3, #8
 8002da4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	334d      	adds	r3, #77	@ 0x4d
 8002db6:	2206      	movs	r2, #6
 8002db8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f004 ffa9 	bl	8007d1a <USB_HC_Halt>
 8002dc8:	e04e      	b.n	8002e68 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f004 f9fe 	bl	80071d4 <USB_ReadChInterrupts>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002de2:	d11b      	bne.n	8002e1c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df0:	461a      	mov	r2, r3
 8002df2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002df6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	334d      	adds	r3, #77	@ 0x4d
 8002e08:	2209      	movs	r2, #9
 8002e0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f004 ff80 	bl	8007d1a <USB_HC_Halt>
 8002e1a:	e025      	b.n	8002e68 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f004 f9d5 	bl	80071d4 <USB_ReadChInterrupts>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e30:	2b80      	cmp	r3, #128	@ 0x80
 8002e32:	d119      	bne.n	8002e68 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e40:	461a      	mov	r2, r3
 8002e42:	2380      	movs	r3, #128	@ 0x80
 8002e44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	334d      	adds	r3, #77	@ 0x4d
 8002e56:	2207      	movs	r2, #7
 8002e58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 ff59 	bl	8007d1a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f004 f9af 	bl	80071d4 <USB_ReadChInterrupts>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e80:	d112      	bne.n	8002ea8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 ff45 	bl	8007d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ea2:	6093      	str	r3, [r2, #8]
 8002ea4:	f000 bd75 	b.w	8003992 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f004 f98f 	bl	80071d4 <USB_ReadChInterrupts>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	f040 8128 	bne.w	8003112 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	331b      	adds	r3, #27
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d119      	bne.n	8002f1e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	331b      	adds	r3, #27
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	0151      	lsls	r1, r2, #5
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	440a      	add	r2, r1
 8002f14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f1c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	799b      	ldrb	r3, [r3, #6]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01b      	beq.n	8002f5e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3330      	adds	r3, #48	@ 0x30
 8002f36:	6819      	ldr	r1, [r3, #0]
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	1ac9      	subs	r1, r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4403      	add	r3, r0
 8002f5a:	3338      	adds	r3, #56	@ 0x38
 8002f5c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	334d      	adds	r3, #77	@ 0x4d
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	3344      	adds	r3, #68	@ 0x44
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f92:	461a      	mov	r2, r3
 8002f94:	2301      	movs	r3, #1
 8002f96:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3326      	adds	r3, #38	@ 0x26
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3326      	adds	r3, #38	@ 0x26
 8002fbe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d110      	bne.n	8002fe6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f004 fea4 	bl	8007d1a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	6093      	str	r3, [r2, #8]
 8002fe4:	e03d      	b.n	8003062 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3326      	adds	r3, #38	@ 0x26
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d00a      	beq.n	8003012 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3326      	adds	r3, #38	@ 0x26
 800300c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800300e:	2b01      	cmp	r3, #1
 8003010:	d127      	bne.n	8003062 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	0151      	lsls	r1, r2, #5
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	440a      	add	r2, r1
 8003028:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800302c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003030:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	334c      	adds	r3, #76	@ 0x4c
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	334c      	adds	r3, #76	@ 0x4c
 8003056:	781a      	ldrb	r2, [r3, #0]
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	4619      	mov	r1, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f007 f9b5 	bl	800a3cc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	799b      	ldrb	r3, [r3, #6]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d13b      	bne.n	80030e2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	3338      	adds	r3, #56	@ 0x38
 800307a:	6819      	ldr	r1, [r3, #0]
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4403      	add	r3, r0
 800308a:	3328      	adds	r3, #40	@ 0x28
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	440b      	add	r3, r1
 8003090:	1e59      	subs	r1, r3, #1
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4403      	add	r3, r0
 80030a0:	3328      	adds	r3, #40	@ 0x28
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8470 	beq.w	8003992 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	333c      	adds	r3, #60	@ 0x3c
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	f083 0301 	eor.w	r3, r3, #1
 80030ca:	b2d8      	uxtb	r0, r3
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	333c      	adds	r3, #60	@ 0x3c
 80030da:	4602      	mov	r2, r0
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	f000 bc58 	b.w	8003992 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	333c      	adds	r3, #60	@ 0x3c
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	f083 0301 	eor.w	r3, r3, #1
 80030fa:	b2d8      	uxtb	r0, r3
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	333c      	adds	r3, #60	@ 0x3c
 800310a:	4602      	mov	r2, r0
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	f000 bc40 	b.w	8003992 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f004 f85a 	bl	80071d4 <USB_ReadChInterrupts>
 8003120:	4603      	mov	r3, r0
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b20      	cmp	r3, #32
 8003128:	d131      	bne.n	800318e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4413      	add	r3, r2
 8003132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003136:	461a      	mov	r2, r3
 8003138:	2320      	movs	r3, #32
 800313a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	331a      	adds	r3, #26
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b01      	cmp	r3, #1
 8003150:	f040 841f 	bne.w	8003992 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	331b      	adds	r3, #27
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	334d      	adds	r3, #77	@ 0x4d
 8003178:	2203      	movs	r2, #3
 800317a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f004 fdc8 	bl	8007d1a <USB_HC_Halt>
 800318a:	f000 bc02 	b.w	8003992 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f004 f81c 	bl	80071d4 <USB_ReadChInterrupts>
 800319c:	4603      	mov	r3, r0
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	f040 8305 	bne.w	80037b2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b4:	461a      	mov	r2, r3
 80031b6:	2302      	movs	r3, #2
 80031b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	334d      	adds	r3, #77	@ 0x4d
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d114      	bne.n	80031fa <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	334d      	adds	r3, #77	@ 0x4d
 80031e0:	2202      	movs	r2, #2
 80031e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	334c      	adds	r3, #76	@ 0x4c
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	e2cc      	b.n	8003794 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	334d      	adds	r3, #77	@ 0x4d
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b06      	cmp	r3, #6
 800320e:	d114      	bne.n	800323a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	334d      	adds	r3, #77	@ 0x4d
 8003220:	2202      	movs	r2, #2
 8003222:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	334c      	adds	r3, #76	@ 0x4c
 8003234:	2205      	movs	r2, #5
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e2ac      	b.n	8003794 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800323a:	78fa      	ldrb	r2, [r7, #3]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	334d      	adds	r3, #77	@ 0x4d
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b07      	cmp	r3, #7
 800324e:	d00b      	beq.n	8003268 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	334d      	adds	r3, #77	@ 0x4d
 8003260:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003262:	2b09      	cmp	r3, #9
 8003264:	f040 80a6 	bne.w	80033b4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	334d      	adds	r3, #77	@ 0x4d
 8003278:	2202      	movs	r2, #2
 800327a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	3344      	adds	r3, #68	@ 0x44
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	1c59      	adds	r1, r3, #1
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4403      	add	r3, r0
 800329c:	3344      	adds	r3, #68	@ 0x44
 800329e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	3344      	adds	r3, #68	@ 0x44
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d943      	bls.n	800333e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	3344      	adds	r3, #68	@ 0x44
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	331a      	adds	r3, #26
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d123      	bne.n	8003328 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	331b      	adds	r3, #27
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	331c      	adds	r3, #28
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4413      	add	r3, r2
 8003310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	0151      	lsls	r1, r2, #5
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	440a      	add	r2, r1
 800331e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003326:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	334c      	adds	r3, #76	@ 0x4c
 8003338:	2204      	movs	r2, #4
 800333a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800333c:	e229      	b.n	8003792 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	334c      	adds	r3, #76	@ 0x4c
 800334e:	2202      	movs	r2, #2
 8003350:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	3326      	adds	r3, #38	@ 0x26
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00b      	beq.n	8003380 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	3326      	adds	r3, #38	@ 0x26
 8003378:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800337a:	2b02      	cmp	r3, #2
 800337c:	f040 8209 	bne.w	8003792 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003396:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800339e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ac:	461a      	mov	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033b2:	e1ee      	b.n	8003792 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	334d      	adds	r3, #77	@ 0x4d
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b05      	cmp	r3, #5
 80033c8:	f040 80c8 	bne.w	800355c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	334d      	adds	r3, #77	@ 0x4d
 80033dc:	2202      	movs	r2, #2
 80033de:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	331b      	adds	r3, #27
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	f040 81ce 	bne.w	8003794 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	3326      	adds	r3, #38	@ 0x26
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b03      	cmp	r3, #3
 800340c:	d16b      	bne.n	80034e6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	3348      	adds	r3, #72	@ 0x48
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	1c59      	adds	r1, r3, #1
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4403      	add	r3, r0
 800342e:	3348      	adds	r3, #72	@ 0x48
 8003430:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	3348      	adds	r3, #72	@ 0x48
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d943      	bls.n	80034d0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	3348      	adds	r3, #72	@ 0x48
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	331b      	adds	r3, #27
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	3344      	adds	r3, #68	@ 0x44
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d809      	bhi.n	800349a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	331c      	adds	r3, #28
 8003496:	2201      	movs	r2, #1
 8003498:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	0151      	lsls	r1, r2, #5
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	440a      	add	r2, r1
 80034b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	334c      	adds	r3, #76	@ 0x4c
 80034ca:	2204      	movs	r2, #4
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e014      	b.n	80034fa <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	334c      	adds	r3, #76	@ 0x4c
 80034e0:	2202      	movs	r2, #2
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	e009      	b.n	80034fa <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	334c      	adds	r3, #76	@ 0x4c
 80034f6:	2202      	movs	r2, #2
 80034f8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	3326      	adds	r3, #38	@ 0x26
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	3326      	adds	r3, #38	@ 0x26
 8003520:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003522:	2b02      	cmp	r3, #2
 8003524:	f040 8136 	bne.w	8003794 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800353e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003546:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003554:	461a      	mov	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e11b      	b.n	8003794 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	334d      	adds	r3, #77	@ 0x4d
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b03      	cmp	r3, #3
 8003570:	f040 8081 	bne.w	8003676 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	334d      	adds	r3, #77	@ 0x4d
 8003584:	2202      	movs	r2, #2
 8003586:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	331b      	adds	r3, #27
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b01      	cmp	r3, #1
 800359c:	f040 80fa 	bne.w	8003794 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	334c      	adds	r3, #76	@ 0x4c
 80035b0:	2202      	movs	r2, #2
 80035b2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	0151      	lsls	r1, r2, #5
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	440a      	add	r2, r1
 80035ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	0151      	lsls	r1, r2, #5
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	440a      	add	r2, r1
 80035ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035f2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	0151      	lsls	r1, r2, #5
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	440a      	add	r2, r1
 800360a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800360e:	f023 0320 	bic.w	r3, r3, #32
 8003612:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	3326      	adds	r3, #38	@ 0x26
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	3326      	adds	r3, #38	@ 0x26
 800363a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800363c:	2b02      	cmp	r3, #2
 800363e:	f040 80a9 	bne.w	8003794 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4413      	add	r3, r2
 800364a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003658:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003660:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4413      	add	r3, r2
 800366a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800366e:	461a      	mov	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e08e      	b.n	8003794 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	334d      	adds	r3, #77	@ 0x4d
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d143      	bne.n	8003714 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	334d      	adds	r3, #77	@ 0x4d
 800369c:	2202      	movs	r2, #2
 800369e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	334c      	adds	r3, #76	@ 0x4c
 80036b0:	2202      	movs	r2, #2
 80036b2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	3326      	adds	r3, #38	@ 0x26
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	3326      	adds	r3, #38	@ 0x26
 80036da:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d159      	bne.n	8003794 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036f6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036fe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800370c:	461a      	mov	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e03f      	b.n	8003794 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	334d      	adds	r3, #77	@ 0x4d
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b08      	cmp	r3, #8
 8003728:	d126      	bne.n	8003778 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800372a:	78fa      	ldrb	r2, [r7, #3]
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	334d      	adds	r3, #77	@ 0x4d
 800373a:	2202      	movs	r2, #2
 800373c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	3344      	adds	r3, #68	@ 0x44
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	1c59      	adds	r1, r3, #1
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4403      	add	r3, r0
 800375e:	3344      	adds	r3, #68	@ 0x44
 8003760:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	334c      	adds	r3, #76	@ 0x4c
 8003772:	2204      	movs	r2, #4
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e00d      	b.n	8003794 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	334d      	adds	r3, #77	@ 0x4d
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b02      	cmp	r3, #2
 800378c:	f000 8100 	beq.w	8003990 <HCD_HC_IN_IRQHandler+0xcca>
 8003790:	e000      	b.n	8003794 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003792:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	334c      	adds	r3, #76	@ 0x4c
 80037a4:	781a      	ldrb	r2, [r3, #0]
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	4619      	mov	r1, r3
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f006 fe0e 	bl	800a3cc <HAL_HCD_HC_NotifyURBChange_Callback>
 80037b0:	e0ef      	b.n	8003992 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f003 fd0a 	bl	80071d4 <USB_ReadChInterrupts>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c6:	2b40      	cmp	r3, #64	@ 0x40
 80037c8:	d12f      	bne.n	800382a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d6:	461a      	mov	r2, r3
 80037d8:	2340      	movs	r3, #64	@ 0x40
 80037da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	334d      	adds	r3, #77	@ 0x4d
 80037ec:	2205      	movs	r2, #5
 80037ee:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	331a      	adds	r3, #26
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3344      	adds	r3, #68	@ 0x44
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f004 fa79 	bl	8007d1a <USB_HC_Halt>
 8003828:	e0b3      	b.n	8003992 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f003 fcce 	bl	80071d4 <USB_ReadChInterrupts>
 8003838:	4603      	mov	r3, r0
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b10      	cmp	r3, #16
 8003840:	f040 80a7 	bne.w	8003992 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003844:	78fa      	ldrb	r2, [r7, #3]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	3326      	adds	r3, #38	@ 0x26
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b03      	cmp	r3, #3
 8003858:	d11b      	bne.n	8003892 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	3344      	adds	r3, #68	@ 0x44
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	334d      	adds	r3, #77	@ 0x4d
 800387e:	2204      	movs	r2, #4
 8003880:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f004 fa45 	bl	8007d1a <USB_HC_Halt>
 8003890:	e03f      	b.n	8003912 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003892:	78fa      	ldrb	r2, [r7, #3]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	3326      	adds	r3, #38	@ 0x26
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	3326      	adds	r3, #38	@ 0x26
 80038b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d129      	bne.n	8003912 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	3344      	adds	r3, #68	@ 0x44
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	799b      	ldrb	r3, [r3, #6]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HCD_HC_IN_IRQHandler+0xc2a>
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	331b      	adds	r3, #27
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d110      	bne.n	8003912 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	334d      	adds	r3, #77	@ 0x4d
 8003900:	2204      	movs	r2, #4
 8003902:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f004 fa04 	bl	8007d1a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	331b      	adds	r3, #27
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d129      	bne.n	800397c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	331b      	adds	r3, #27
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4413      	add	r3, r2
 8003944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	0151      	lsls	r1, r2, #5
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	440a      	add	r2, r1
 8003952:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800395a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4413      	add	r3, r2
 8003964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	0151      	lsls	r1, r2, #5
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	440a      	add	r2, r1
 8003972:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003976:	f043 0320 	orr.w	r3, r3, #32
 800397a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003988:	461a      	mov	r2, r3
 800398a:	2310      	movs	r3, #16
 800398c:	6093      	str	r3, [r2, #8]
 800398e:	e000      	b.n	8003992 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003990:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	4611      	mov	r1, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f003 fc0c 	bl	80071d4 <USB_ReadChInterrupts>
 80039bc:	4603      	mov	r3, r0
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d11b      	bne.n	80039fe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d2:	461a      	mov	r2, r3
 80039d4:	2304      	movs	r3, #4
 80039d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	334d      	adds	r3, #77	@ 0x4d
 80039e8:	2207      	movs	r2, #7
 80039ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	4611      	mov	r1, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f004 f990 	bl	8007d1a <USB_HC_Halt>
 80039fa:	f000 bc89 	b.w	8004310 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f003 fbe4 	bl	80071d4 <USB_ReadChInterrupts>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	f040 8082 	bne.w	8003b1c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a24:	461a      	mov	r2, r3
 8003a26:	2320      	movs	r3, #32
 8003a28:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	3319      	adds	r3, #25
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d124      	bne.n	8003a8a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3319      	adds	r3, #25
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	334c      	adds	r3, #76	@ 0x4c
 8003a64:	2202      	movs	r2, #2
 8003a66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	334d      	adds	r3, #77	@ 0x4d
 8003a78:	2203      	movs	r2, #3
 8003a7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f004 f948 	bl	8007d1a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	331a      	adds	r3, #26
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	f040 8437 	bne.w	8004310 <HCD_HC_OUT_IRQHandler+0x978>
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	331b      	adds	r3, #27
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f040 842b 	bne.w	8004310 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3326      	adds	r3, #38	@ 0x26
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d009      	beq.n	8003ae4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	331b      	adds	r3, #27
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	334d      	adds	r3, #77	@ 0x4d
 8003af4:	2203      	movs	r2, #3
 8003af6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f004 f90a 	bl	8007d1a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b06:	78fa      	ldrb	r2, [r7, #3]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	3344      	adds	r3, #68	@ 0x44
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e3f9      	b.n	8004310 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f003 fb55 	bl	80071d4 <USB_ReadChInterrupts>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b34:	d111      	bne.n	8003b5a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b42:	461a      	mov	r2, r3
 8003b44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f004 f8e1 	bl	8007d1a <USB_HC_Halt>
 8003b58:	e3da      	b.n	8004310 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f003 fb36 	bl	80071d4 <USB_ReadChInterrupts>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d168      	bne.n	8003c44 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	3344      	adds	r3, #68	@ 0x44
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f003 fb20 	bl	80071d4 <USB_ReadChInterrupts>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9a:	2b40      	cmp	r3, #64	@ 0x40
 8003b9c:	d112      	bne.n	8003bc4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	3319      	adds	r3, #25
 8003bae:	2201      	movs	r2, #1
 8003bb0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2340      	movs	r3, #64	@ 0x40
 8003bc2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	331b      	adds	r3, #27
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d019      	beq.n	8003c0e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	331b      	adds	r3, #27
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	0151      	lsls	r1, r2, #5
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	440a      	add	r2, r1
 8003c04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c0c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	334d      	adds	r3, #77	@ 0x4d
 8003c30:	2201      	movs	r2, #1
 8003c32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f004 f86c 	bl	8007d1a <USB_HC_Halt>
 8003c42:	e365      	b.n	8004310 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f003 fac1 	bl	80071d4 <USB_ReadChInterrupts>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c58:	2b40      	cmp	r3, #64	@ 0x40
 8003c5a:	d139      	bne.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	334d      	adds	r3, #77	@ 0x4d
 8003c6c:	2205      	movs	r2, #5
 8003c6e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003c70:	78fa      	ldrb	r2, [r7, #3]
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	4613      	mov	r3, r2
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	331a      	adds	r3, #26
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	3319      	adds	r3, #25
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	3344      	adds	r3, #68	@ 0x44
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f004 f82f 	bl	8007d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2340      	movs	r3, #64	@ 0x40
 8003ccc:	6093      	str	r3, [r2, #8]
 8003cce:	e31f      	b.n	8004310 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f003 fa7b 	bl	80071d4 <USB_ReadChInterrupts>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d11a      	bne.n	8003d1e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	334d      	adds	r3, #77	@ 0x4d
 8003d0a:	2206      	movs	r2, #6
 8003d0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	4611      	mov	r1, r2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f003 ffff 	bl	8007d1a <USB_HC_Halt>
 8003d1c:	e2f8      	b.n	8004310 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f003 fa54 	bl	80071d4 <USB_ReadChInterrupts>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b10      	cmp	r3, #16
 8003d34:	d144      	bne.n	8003dc0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d36:	78fa      	ldrb	r2, [r7, #3]
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	1a9b      	subs	r3, r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	3344      	adds	r3, #68	@ 0x44
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	334d      	adds	r3, #77	@ 0x4d
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003d5e:	78fa      	ldrb	r2, [r7, #3]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	3319      	adds	r3, #25
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d114      	bne.n	8003d9e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003d74:	78fa      	ldrb	r2, [r7, #3]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	3318      	adds	r3, #24
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	3319      	adds	r3, #25
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f003 ffb7 	bl	8007d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003db8:	461a      	mov	r2, r3
 8003dba:	2310      	movs	r3, #16
 8003dbc:	6093      	str	r3, [r2, #8]
 8003dbe:	e2a7      	b.n	8004310 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	78fa      	ldrb	r2, [r7, #3]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f003 fa03 	bl	80071d4 <USB_ReadChInterrupts>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd4:	2b80      	cmp	r3, #128	@ 0x80
 8003dd6:	f040 8083 	bne.w	8003ee0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	799b      	ldrb	r3, [r3, #6]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d111      	bne.n	8003e06 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	334d      	adds	r3, #77	@ 0x4d
 8003df2:	2207      	movs	r2, #7
 8003df4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f003 ff8b 	bl	8007d1a <USB_HC_Halt>
 8003e04:	e062      	b.n	8003ecc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	3344      	adds	r3, #68	@ 0x44
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	1c59      	adds	r1, r3, #1
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4403      	add	r3, r0
 8003e26:	3344      	adds	r3, #68	@ 0x44
 8003e28:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	3344      	adds	r3, #68	@ 0x44
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d922      	bls.n	8003e86 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3344      	adds	r3, #68	@ 0x44
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	334c      	adds	r3, #76	@ 0x4c
 8003e64:	2204      	movs	r2, #4
 8003e66:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	334c      	adds	r3, #76	@ 0x4c
 8003e78:	781a      	ldrb	r2, [r3, #0]
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f006 faa4 	bl	800a3cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e84:	e022      	b.n	8003ecc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	334c      	adds	r3, #76	@ 0x4c
 8003e96:	2202      	movs	r2, #2
 8003e98:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003eb0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003eb8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2380      	movs	r3, #128	@ 0x80
 8003edc:	6093      	str	r3, [r2, #8]
 8003ede:	e217      	b.n	8004310 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f003 f973 	bl	80071d4 <USB_ReadChInterrupts>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef8:	d11b      	bne.n	8003f32 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	334d      	adds	r3, #77	@ 0x4d
 8003f0a:	2209      	movs	r2, #9
 8003f0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	4611      	mov	r1, r2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f003 feff 	bl	8007d1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f28:	461a      	mov	r2, r3
 8003f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f2e:	6093      	str	r3, [r2, #8]
 8003f30:	e1ee      	b.n	8004310 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	4611      	mov	r1, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f003 f94a 	bl	80071d4 <USB_ReadChInterrupts>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	f040 81df 	bne.w	800430a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f58:	461a      	mov	r2, r3
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	334d      	adds	r3, #77	@ 0x4d
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	f040 8093 	bne.w	800409c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	334d      	adds	r3, #77	@ 0x4d
 8003f86:	2202      	movs	r2, #2
 8003f88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	334c      	adds	r3, #76	@ 0x4c
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	3326      	adds	r3, #38	@ 0x26
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d00b      	beq.n	8003fcc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3326      	adds	r3, #38	@ 0x26
 8003fc4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	f040 8190 	bne.w	80042ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	799b      	ldrb	r3, [r3, #6]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d115      	bne.n	8004000 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	333d      	adds	r3, #61	@ 0x3d
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	f083 0301 	eor.w	r3, r3, #1
 8003fec:	b2d8      	uxtb	r0, r3
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	333d      	adds	r3, #61	@ 0x3d
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	799b      	ldrb	r3, [r3, #6]
 8004004:	2b01      	cmp	r3, #1
 8004006:	f040 8171 	bne.w	80042ec <HCD_HC_OUT_IRQHandler+0x954>
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	3334      	adds	r3, #52	@ 0x34
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 8165 	beq.w	80042ec <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	3334      	adds	r3, #52	@ 0x34
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4403      	add	r3, r0
 8004042:	3328      	adds	r3, #40	@ 0x28
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	440b      	add	r3, r1
 8004048:	1e59      	subs	r1, r3, #1
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4403      	add	r3, r0
 8004058:	3328      	adds	r3, #40	@ 0x28
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004060:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 813f 	beq.w	80042ec <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800406e:	78fa      	ldrb	r2, [r7, #3]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	333d      	adds	r3, #61	@ 0x3d
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	f083 0301 	eor.w	r3, r3, #1
 8004086:	b2d8      	uxtb	r0, r3
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	333d      	adds	r3, #61	@ 0x3d
 8004096:	4602      	mov	r2, r0
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	e127      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	334d      	adds	r3, #77	@ 0x4d
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d120      	bne.n	80040f4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	334d      	adds	r3, #77	@ 0x4d
 80040c2:	2202      	movs	r2, #2
 80040c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	331b      	adds	r3, #27
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	f040 8107 	bne.w	80042ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	334c      	adds	r3, #76	@ 0x4c
 80040ee:	2202      	movs	r2, #2
 80040f0:	701a      	strb	r2, [r3, #0]
 80040f2:	e0fb      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	334d      	adds	r3, #77	@ 0x4d
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b04      	cmp	r3, #4
 8004108:	d13a      	bne.n	8004180 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800410a:	78fa      	ldrb	r2, [r7, #3]
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	334d      	adds	r3, #77	@ 0x4d
 800411a:	2202      	movs	r2, #2
 800411c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	334c      	adds	r3, #76	@ 0x4c
 800412e:	2202      	movs	r2, #2
 8004130:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	331b      	adds	r3, #27
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	f040 80d1 	bne.w	80042ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	331b      	adds	r3, #27
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4413      	add	r3, r2
 8004166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	78fa      	ldrb	r2, [r7, #3]
 800416e:	0151      	lsls	r1, r2, #5
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	440a      	add	r2, r1
 8004174:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800417c:	6053      	str	r3, [r2, #4]
 800417e:	e0b5      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	334d      	adds	r3, #77	@ 0x4d
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b05      	cmp	r3, #5
 8004194:	d114      	bne.n	80041c0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	334d      	adds	r3, #77	@ 0x4d
 80041a6:	2202      	movs	r2, #2
 80041a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	334c      	adds	r3, #76	@ 0x4c
 80041ba:	2202      	movs	r2, #2
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	e095      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	334d      	adds	r3, #77	@ 0x4d
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b06      	cmp	r3, #6
 80041d4:	d114      	bne.n	8004200 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	334d      	adds	r3, #77	@ 0x4d
 80041e6:	2202      	movs	r2, #2
 80041e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	334c      	adds	r3, #76	@ 0x4c
 80041fa:	2205      	movs	r2, #5
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e075      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	334d      	adds	r3, #77	@ 0x4d
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b07      	cmp	r3, #7
 8004214:	d00a      	beq.n	800422c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004216:	78fa      	ldrb	r2, [r7, #3]
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	334d      	adds	r3, #77	@ 0x4d
 8004226:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004228:	2b09      	cmp	r3, #9
 800422a:	d170      	bne.n	800430e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	334d      	adds	r3, #77	@ 0x4d
 800423c:	2202      	movs	r2, #2
 800423e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	3344      	adds	r3, #68	@ 0x44
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	1c59      	adds	r1, r3, #1
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4403      	add	r3, r0
 8004260:	3344      	adds	r3, #68	@ 0x44
 8004262:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	3344      	adds	r3, #68	@ 0x44
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d914      	bls.n	80042a4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	3344      	adds	r3, #68	@ 0x44
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	334c      	adds	r3, #76	@ 0x4c
 800429e:	2204      	movs	r2, #4
 80042a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042a2:	e022      	b.n	80042ea <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	334c      	adds	r3, #76	@ 0x4c
 80042b4:	2202      	movs	r2, #2
 80042b6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042ce:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042d6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042e4:	461a      	mov	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042ea:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	334c      	adds	r3, #76	@ 0x4c
 80042fc:	781a      	ldrb	r2, [r3, #0]
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	4619      	mov	r1, r3
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f006 f862 	bl	800a3cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004308:	e002      	b.n	8004310 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800430a:	bf00      	nop
 800430c:	e000      	b.n	8004310 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800430e:	bf00      	nop
  }
}
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b08a      	sub	sp, #40	@ 0x28
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	0c5b      	lsrs	r3, r3, #17
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800434a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d004      	beq.n	800435c <HCD_RXQLVL_IRQHandler+0x46>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b05      	cmp	r3, #5
 8004356:	f000 80b6 	beq.w	80044c6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800435a:	e0b7      	b.n	80044cc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 80b3 	beq.w	80044ca <HCD_RXQLVL_IRQHandler+0x1b4>
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4613      	mov	r3, r2
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	332c      	adds	r3, #44	@ 0x2c
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80a7 	beq.w	80044ca <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4613      	mov	r3, r2
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	3338      	adds	r3, #56	@ 0x38
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	18d1      	adds	r1, r2, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4613      	mov	r3, r2
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4403      	add	r3, r0
 80043a0:	3334      	adds	r3, #52	@ 0x34
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4299      	cmp	r1, r3
 80043a6:	f200 8083 	bhi.w	80044b0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	332c      	adds	r3, #44	@ 0x2c
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	b292      	uxth	r2, r2
 80043c4:	4619      	mov	r1, r3
 80043c6:	f002 fe9a 	bl	80070fe <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4613      	mov	r3, r2
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	332c      	adds	r3, #44	@ 0x2c
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	18d1      	adds	r1, r2, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4613      	mov	r3, r2
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4403      	add	r3, r0
 80043ee:	332c      	adds	r3, #44	@ 0x2c
 80043f0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3338      	adds	r3, #56	@ 0x38
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	18d1      	adds	r1, r2, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4403      	add	r3, r0
 8004416:	3338      	adds	r3, #56	@ 0x38
 8004418:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	4413      	add	r3, r2
 8004422:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	0cdb      	lsrs	r3, r3, #19
 800442a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800442e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4613      	mov	r3, r2
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	3328      	adds	r3, #40	@ 0x28
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	4293      	cmp	r3, r2
 8004448:	d13f      	bne.n	80044ca <HCD_RXQLVL_IRQHandler+0x1b4>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d03c      	beq.n	80044ca <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	4413      	add	r3, r2
 8004458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004466:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800446e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	4413      	add	r3, r2
 8004478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800447c:	461a      	mov	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4613      	mov	r3, r2
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	333c      	adds	r3, #60	@ 0x3c
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	f083 0301 	eor.w	r3, r3, #1
 8004498:	b2d8      	uxtb	r0, r3
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4613      	mov	r3, r2
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	333c      	adds	r3, #60	@ 0x3c
 80044aa:	4602      	mov	r2, r0
 80044ac:	701a      	strb	r2, [r3, #0]
      break;
 80044ae:	e00c      	b.n	80044ca <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	334c      	adds	r3, #76	@ 0x4c
 80044c0:	2204      	movs	r2, #4
 80044c2:	701a      	strb	r2, [r3, #0]
      break;
 80044c4:	e001      	b.n	80044ca <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80044c6:	bf00      	nop
 80044c8:	e000      	b.n	80044cc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80044ca:	bf00      	nop
  }
}
 80044cc:	bf00      	nop
 80044ce:	3728      	adds	r7, #40	@ 0x28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004500:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b02      	cmp	r3, #2
 800450a:	d10b      	bne.n	8004524 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b01      	cmp	r3, #1
 8004514:	d102      	bne.n	800451c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f005 ff3c 	bl	800a394 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b08      	cmp	r3, #8
 800452c:	d132      	bne.n	8004594 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f043 0308 	orr.w	r3, r3, #8
 8004534:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b04      	cmp	r3, #4
 800453e:	d126      	bne.n	800458e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	7a5b      	ldrb	r3, [r3, #9]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d113      	bne.n	8004570 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800454e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004552:	d106      	bne.n	8004562 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2102      	movs	r1, #2
 800455a:	4618      	mov	r0, r3
 800455c:	f002 ff5e 	bl	800741c <USB_InitFSLSPClkSel>
 8004560:	e011      	b.n	8004586 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2101      	movs	r1, #1
 8004568:	4618      	mov	r0, r3
 800456a:	f002 ff57 	bl	800741c <USB_InitFSLSPClkSel>
 800456e:	e00a      	b.n	8004586 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	79db      	ldrb	r3, [r3, #7]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d106      	bne.n	8004586 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800457e:	461a      	mov	r2, r3
 8004580:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004584:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f005 ff2e 	bl	800a3e8 <HAL_HCD_PortEnabled_Callback>
 800458c:	e002      	b.n	8004594 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f005 ff38 	bl	800a404 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b20      	cmp	r3, #32
 800459c:	d103      	bne.n	80045a6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f043 0320 	orr.w	r3, r3, #32
 80045a4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045ac:	461a      	mov	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6013      	str	r3, [r2, #0]
}
 80045b2:	bf00      	nop
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e12b      	b.n	8004826 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fd f99c 	bl	8001920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2224      	movs	r2, #36	@ 0x24
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800460e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800461e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004620:	f002 fa1e 	bl	8006a60 <HAL_RCC_GetPCLK1Freq>
 8004624:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4a81      	ldr	r2, [pc, #516]	@ (8004830 <HAL_I2C_Init+0x274>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d807      	bhi.n	8004640 <HAL_I2C_Init+0x84>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4a80      	ldr	r2, [pc, #512]	@ (8004834 <HAL_I2C_Init+0x278>)
 8004634:	4293      	cmp	r3, r2
 8004636:	bf94      	ite	ls
 8004638:	2301      	movls	r3, #1
 800463a:	2300      	movhi	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e006      	b.n	800464e <HAL_I2C_Init+0x92>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4a7d      	ldr	r2, [pc, #500]	@ (8004838 <HAL_I2C_Init+0x27c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	bf94      	ite	ls
 8004648:	2301      	movls	r3, #1
 800464a:	2300      	movhi	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e0e7      	b.n	8004826 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4a78      	ldr	r2, [pc, #480]	@ (800483c <HAL_I2C_Init+0x280>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	0c9b      	lsrs	r3, r3, #18
 8004660:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4a6a      	ldr	r2, [pc, #424]	@ (8004830 <HAL_I2C_Init+0x274>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d802      	bhi.n	8004690 <HAL_I2C_Init+0xd4>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	3301      	adds	r3, #1
 800468e:	e009      	b.n	80046a4 <HAL_I2C_Init+0xe8>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	4a69      	ldr	r2, [pc, #420]	@ (8004840 <HAL_I2C_Init+0x284>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	099b      	lsrs	r3, r3, #6
 80046a2:	3301      	adds	r3, #1
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	430b      	orrs	r3, r1
 80046aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	495c      	ldr	r1, [pc, #368]	@ (8004830 <HAL_I2C_Init+0x274>)
 80046c0:	428b      	cmp	r3, r1
 80046c2:	d819      	bhi.n	80046f8 <HAL_I2C_Init+0x13c>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	1e59      	subs	r1, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80046d2:	1c59      	adds	r1, r3, #1
 80046d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046d8:	400b      	ands	r3, r1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <HAL_I2C_Init+0x138>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1e59      	subs	r1, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80046ec:	3301      	adds	r3, #1
 80046ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f2:	e051      	b.n	8004798 <HAL_I2C_Init+0x1dc>
 80046f4:	2304      	movs	r3, #4
 80046f6:	e04f      	b.n	8004798 <HAL_I2C_Init+0x1dc>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d111      	bne.n	8004724 <HAL_I2C_Init+0x168>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	1e58      	subs	r0, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6859      	ldr	r1, [r3, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	440b      	add	r3, r1
 800470e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004712:	3301      	adds	r3, #1
 8004714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e012      	b.n	800474a <HAL_I2C_Init+0x18e>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	1e58      	subs	r0, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6859      	ldr	r1, [r3, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	0099      	lsls	r1, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	fbb0 f3f3 	udiv	r3, r0, r3
 800473a:	3301      	adds	r3, #1
 800473c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf0c      	ite	eq
 8004744:	2301      	moveq	r3, #1
 8004746:	2300      	movne	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_I2C_Init+0x196>
 800474e:	2301      	movs	r3, #1
 8004750:	e022      	b.n	8004798 <HAL_I2C_Init+0x1dc>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10e      	bne.n	8004778 <HAL_I2C_Init+0x1bc>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1e58      	subs	r0, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6859      	ldr	r1, [r3, #4]
 8004762:	460b      	mov	r3, r1
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	440b      	add	r3, r1
 8004768:	fbb0 f3f3 	udiv	r3, r0, r3
 800476c:	3301      	adds	r3, #1
 800476e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004776:	e00f      	b.n	8004798 <HAL_I2C_Init+0x1dc>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1e58      	subs	r0, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6859      	ldr	r1, [r3, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	0099      	lsls	r1, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	fbb0 f3f3 	udiv	r3, r0, r3
 800478e:	3301      	adds	r3, #1
 8004790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004794:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	6809      	ldr	r1, [r1, #0]
 800479c:	4313      	orrs	r3, r2
 800479e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69da      	ldr	r2, [r3, #28]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6911      	ldr	r1, [r2, #16]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	68d2      	ldr	r2, [r2, #12]
 80047d2:	4311      	orrs	r1, r2
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	430b      	orrs	r3, r1
 80047da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	000186a0 	.word	0x000186a0
 8004834:	001e847f 	.word	0x001e847f
 8004838:	003d08ff 	.word	0x003d08ff
 800483c:	431bde83 	.word	0x431bde83
 8004840:	10624dd3 	.word	0x10624dd3

08004844 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af02      	add	r7, sp, #8
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	461a      	mov	r2, r3
 8004850:	460b      	mov	r3, r1
 8004852:	817b      	strh	r3, [r7, #10]
 8004854:	4613      	mov	r3, r2
 8004856:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004858:	f7fd fa84 	bl	8001d64 <HAL_GetTick>
 800485c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b20      	cmp	r3, #32
 8004868:	f040 80e0 	bne.w	8004a2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	2319      	movs	r3, #25
 8004872:	2201      	movs	r2, #1
 8004874:	4970      	ldr	r1, [pc, #448]	@ (8004a38 <HAL_I2C_Master_Transmit+0x1f4>)
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 fdac 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
 8004884:	e0d3      	b.n	8004a2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_I2C_Master_Transmit+0x50>
 8004890:	2302      	movs	r3, #2
 8004892:	e0cc      	b.n	8004a2e <HAL_I2C_Master_Transmit+0x1ea>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d007      	beq.n	80048ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2221      	movs	r2, #33	@ 0x21
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2210      	movs	r2, #16
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	893a      	ldrh	r2, [r7, #8]
 80048ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4a50      	ldr	r2, [pc, #320]	@ (8004a3c <HAL_I2C_Master_Transmit+0x1f8>)
 80048fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048fc:	8979      	ldrh	r1, [r7, #10]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	6a3a      	ldr	r2, [r7, #32]
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fbfc 	bl	8005100 <I2C_MasterRequestWrite>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e08d      	b.n	8004a2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004912:	2300      	movs	r3, #0
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004928:	e066      	b.n	80049f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	6a39      	ldr	r1, [r7, #32]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fe6a 	bl	8005608 <I2C_WaitOnTXEFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00d      	beq.n	8004956 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	2b04      	cmp	r3, #4
 8004940:	d107      	bne.n	8004952 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004950:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e06b      	b.n	8004a2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495a:	781a      	ldrb	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b04      	cmp	r3, #4
 8004992:	d11b      	bne.n	80049cc <HAL_I2C_Master_Transmit+0x188>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004998:	2b00      	cmp	r3, #0
 800499a:	d017      	beq.n	80049cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	781a      	ldrb	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	6a39      	ldr	r1, [r7, #32]
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 fe61 	bl	8005698 <I2C_WaitOnBTFFlagUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00d      	beq.n	80049f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d107      	bne.n	80049f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e01a      	b.n	8004a2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d194      	bne.n	800492a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e000      	b.n	8004a2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a2c:	2302      	movs	r3, #2
  }
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	00100002 	.word	0x00100002
 8004a3c:	ffff0000 	.word	0xffff0000

08004a40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08c      	sub	sp, #48	@ 0x30
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	4608      	mov	r0, r1
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4603      	mov	r3, r0
 8004a50:	817b      	strh	r3, [r7, #10]
 8004a52:	460b      	mov	r3, r1
 8004a54:	813b      	strh	r3, [r7, #8]
 8004a56:	4613      	mov	r3, r2
 8004a58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a5a:	f7fd f983 	bl	8001d64 <HAL_GetTick>
 8004a5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	f040 8214 	bne.w	8004e96 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	2319      	movs	r3, #25
 8004a74:	2201      	movs	r2, #1
 8004a76:	497b      	ldr	r1, [pc, #492]	@ (8004c64 <HAL_I2C_Mem_Read+0x224>)
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fcab 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a84:	2302      	movs	r3, #2
 8004a86:	e207      	b.n	8004e98 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_I2C_Mem_Read+0x56>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e200      	b.n	8004e98 <HAL_I2C_Mem_Read+0x458>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d007      	beq.n	8004abc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2222      	movs	r2, #34	@ 0x22
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2240      	movs	r2, #64	@ 0x40
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ae6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4a5b      	ldr	r2, [pc, #364]	@ (8004c68 <HAL_I2C_Mem_Read+0x228>)
 8004afc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004afe:	88f8      	ldrh	r0, [r7, #6]
 8004b00:	893a      	ldrh	r2, [r7, #8]
 8004b02:	8979      	ldrh	r1, [r7, #10]
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fb78 	bl	8005204 <I2C_RequestMemoryRead>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e1bc      	b.n	8004e98 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d113      	bne.n	8004b4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b26:	2300      	movs	r3, #0
 8004b28:	623b      	str	r3, [r7, #32]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	623b      	str	r3, [r7, #32]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	623b      	str	r3, [r7, #32]
 8004b3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	e190      	b.n	8004e70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d11b      	bne.n	8004b8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	e170      	b.n	8004e70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d11b      	bne.n	8004bce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ba4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	61bb      	str	r3, [r7, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	e150      	b.n	8004e70 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004be4:	e144      	b.n	8004e70 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	f200 80f1 	bhi.w	8004dd2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d123      	bne.n	8004c40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bfa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fd93 	bl	8005728 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e145      	b.n	8004e98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c3e:	e117      	b.n	8004e70 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d14e      	bne.n	8004ce6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4e:	2200      	movs	r2, #0
 8004c50:	4906      	ldr	r1, [pc, #24]	@ (8004c6c <HAL_I2C_Mem_Read+0x22c>)
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 fbbe 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d008      	beq.n	8004c70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e11a      	b.n	8004e98 <HAL_I2C_Mem_Read+0x458>
 8004c62:	bf00      	nop
 8004c64:	00100002 	.word	0x00100002
 8004c68:	ffff0000 	.word	0xffff0000
 8004c6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ce4:	e0c4      	b.n	8004e70 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cec:	2200      	movs	r2, #0
 8004cee:	496c      	ldr	r1, [pc, #432]	@ (8004ea0 <HAL_I2C_Mem_Read+0x460>)
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fb6f 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0cb      	b.n	8004e98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d48:	2200      	movs	r2, #0
 8004d4a:	4955      	ldr	r1, [pc, #340]	@ (8004ea0 <HAL_I2C_Mem_Read+0x460>)
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fb41 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e09d      	b.n	8004e98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dd0:	e04e      	b.n	8004e70 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 fca6 	bl	8005728 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e058      	b.n	8004e98 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d124      	bne.n	8004e70 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d107      	bne.n	8004e3e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e3c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f47f aeb6 	bne.w	8004be6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	e000      	b.n	8004e98 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004e96:	2302      	movs	r3, #2
  }
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3728      	adds	r7, #40	@ 0x28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	00010004 	.word	0x00010004

08004ea4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	@ 0x28
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004eb4:	f7fc ff56 	bl	8001d64 <HAL_GetTick>
 8004eb8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	f040 8111 	bne.w	80050ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	2319      	movs	r3, #25
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	4988      	ldr	r1, [pc, #544]	@ (80050f8 <HAL_I2C_IsDeviceReady+0x254>)
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 fa7c 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e104      	b.n	80050f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_I2C_IsDeviceReady+0x50>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e0fd      	b.n	80050f0 <HAL_I2C_IsDeviceReady+0x24c>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d007      	beq.n	8004f1a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0201 	orr.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2224      	movs	r2, #36	@ 0x24
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4a70      	ldr	r2, [pc, #448]	@ (80050fc <HAL_I2C_IsDeviceReady+0x258>)
 8004f3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f4c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fa3a 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00d      	beq.n	8004f82 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f74:	d103      	bne.n	8004f7e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f7c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e0b6      	b.n	80050f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f82:	897b      	ldrh	r3, [r7, #10]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f90:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004f92:	f7fc fee7 	bl	8001d64 <HAL_GetTick>
 8004f96:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fbc:	bf0c      	ite	eq
 8004fbe:	2301      	moveq	r3, #1
 8004fc0:	2300      	movne	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fc6:	e025      	b.n	8005014 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004fc8:	f7fc fecc 	bl	8001d64 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d302      	bcc.n	8004fde <HAL_I2C_IsDeviceReady+0x13a>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d103      	bne.n	8004fe6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	22a0      	movs	r2, #160	@ 0xa0
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	bf0c      	ite	eq
 8004ff4:	2301      	moveq	r3, #1
 8004ff6:	2300      	movne	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500a:	bf0c      	ite	eq
 800500c:	2301      	moveq	r3, #1
 800500e:	2300      	movne	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2ba0      	cmp	r3, #160	@ 0xa0
 800501e:	d005      	beq.n	800502c <HAL_I2C_IsDeviceReady+0x188>
 8005020:	7dfb      	ldrb	r3, [r7, #23]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d102      	bne.n	800502c <HAL_I2C_IsDeviceReady+0x188>
 8005026:	7dbb      	ldrb	r3, [r7, #22]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0cd      	beq.n	8004fc8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b02      	cmp	r3, #2
 8005040:	d129      	bne.n	8005096 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005050:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	2319      	movs	r3, #25
 800506e:	2201      	movs	r2, #1
 8005070:	4921      	ldr	r1, [pc, #132]	@ (80050f8 <HAL_I2C_IsDeviceReady+0x254>)
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f9ae 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e036      	b.n	80050f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	e02c      	b.n	80050f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2319      	movs	r3, #25
 80050b6:	2201      	movs	r2, #1
 80050b8:	490f      	ldr	r1, [pc, #60]	@ (80050f8 <HAL_I2C_IsDeviceReady+0x254>)
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f98a 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e012      	b.n	80050f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	3301      	adds	r3, #1
 80050ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	f4ff af32 	bcc.w	8004f3e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80050ee:	2302      	movs	r3, #2
  }
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3720      	adds	r7, #32
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	00100002 	.word	0x00100002
 80050fc:	ffff0000 	.word	0xffff0000

08005100 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af02      	add	r7, sp, #8
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	607a      	str	r2, [r7, #4]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	460b      	mov	r3, r1
 800510e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005114:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b08      	cmp	r3, #8
 800511a:	d006      	beq.n	800512a <I2C_MasterRequestWrite+0x2a>
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d003      	beq.n	800512a <I2C_MasterRequestWrite+0x2a>
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005128:	d108      	bne.n	800513c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	e00b      	b.n	8005154 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005140:	2b12      	cmp	r3, #18
 8005142:	d107      	bne.n	8005154 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005152:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f937 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00d      	beq.n	8005188 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800517a:	d103      	bne.n	8005184 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005182:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e035      	b.n	80051f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005190:	d108      	bne.n	80051a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005192:	897b      	ldrh	r3, [r7, #10]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051a0:	611a      	str	r2, [r3, #16]
 80051a2:	e01b      	b.n	80051dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051a4:	897b      	ldrh	r3, [r7, #10]
 80051a6:	11db      	asrs	r3, r3, #7
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f003 0306 	and.w	r3, r3, #6
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f063 030f 	orn	r3, r3, #15
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	490e      	ldr	r1, [pc, #56]	@ (80051fc <I2C_MasterRequestWrite+0xfc>)
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f980 	bl	80054c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e010      	b.n	80051f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051d2:	897b      	ldrh	r3, [r7, #10]
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	4907      	ldr	r1, [pc, #28]	@ (8005200 <I2C_MasterRequestWrite+0x100>)
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f970 	bl	80054c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	00010008 	.word	0x00010008
 8005200:	00010002 	.word	0x00010002

08005204 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	4608      	mov	r0, r1
 800520e:	4611      	mov	r1, r2
 8005210:	461a      	mov	r2, r3
 8005212:	4603      	mov	r3, r0
 8005214:	817b      	strh	r3, [r7, #10]
 8005216:	460b      	mov	r3, r1
 8005218:	813b      	strh	r3, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800522c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800523c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	2200      	movs	r2, #0
 8005246:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f8c2 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00d      	beq.n	8005272 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005264:	d103      	bne.n	800526e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800526c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e0aa      	b.n	80053c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005272:	897b      	ldrh	r3, [r7, #10]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005280:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	6a3a      	ldr	r2, [r7, #32]
 8005286:	4952      	ldr	r1, [pc, #328]	@ (80053d0 <I2C_RequestMemoryRead+0x1cc>)
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f91d 	bl	80054c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e097      	b.n	80053c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b0:	6a39      	ldr	r1, [r7, #32]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 f9a8 	bl	8005608 <I2C_WaitOnTXEFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00d      	beq.n	80052da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d107      	bne.n	80052d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e076      	b.n	80053c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d105      	bne.n	80052ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052e0:	893b      	ldrh	r3, [r7, #8]
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	611a      	str	r2, [r3, #16]
 80052ea:	e021      	b.n	8005330 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052ec:	893b      	ldrh	r3, [r7, #8]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052fc:	6a39      	ldr	r1, [r7, #32]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f982 	bl	8005608 <I2C_WaitOnTXEFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	2b04      	cmp	r3, #4
 8005310:	d107      	bne.n	8005322 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005320:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e050      	b.n	80053c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005326:	893b      	ldrh	r3, [r7, #8]
 8005328:	b2da      	uxtb	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005332:	6a39      	ldr	r1, [r7, #32]
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f967 	bl	8005608 <I2C_WaitOnTXEFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00d      	beq.n	800535c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005344:	2b04      	cmp	r3, #4
 8005346:	d107      	bne.n	8005358 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005356:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e035      	b.n	80053c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800536a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	2200      	movs	r2, #0
 8005374:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f82b 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00d      	beq.n	80053a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800538e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005392:	d103      	bne.n	800539c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800539a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e013      	b.n	80053c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053a0:	897b      	ldrh	r3, [r7, #10]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b2:	6a3a      	ldr	r2, [r7, #32]
 80053b4:	4906      	ldr	r1, [pc, #24]	@ (80053d0 <I2C_RequestMemoryRead+0x1cc>)
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f886 	bl	80054c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	00010002 	.word	0x00010002

080053d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	4613      	mov	r3, r2
 80053e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053e4:	e048      	b.n	8005478 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d044      	beq.n	8005478 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ee:	f7fc fcb9 	bl	8001d64 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d139      	bne.n	8005478 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	0c1b      	lsrs	r3, r3, #16
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b01      	cmp	r3, #1
 800540c:	d10d      	bne.n	800542a <I2C_WaitOnFlagUntilTimeout+0x56>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	43da      	mvns	r2, r3
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4013      	ands	r3, r2
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	bf0c      	ite	eq
 8005420:	2301      	moveq	r3, #1
 8005422:	2300      	movne	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	e00c      	b.n	8005444 <I2C_WaitOnFlagUntilTimeout+0x70>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	43da      	mvns	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4013      	ands	r3, r2
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	bf0c      	ite	eq
 800543c:	2301      	moveq	r3, #1
 800543e:	2300      	movne	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	429a      	cmp	r2, r3
 8005448:	d116      	bne.n	8005478 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005464:	f043 0220 	orr.w	r2, r3, #32
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e023      	b.n	80054c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	0c1b      	lsrs	r3, r3, #16
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b01      	cmp	r3, #1
 8005480:	d10d      	bne.n	800549e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	43da      	mvns	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4013      	ands	r3, r2
 800548e:	b29b      	uxth	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	e00c      	b.n	80054b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	43da      	mvns	r2, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4013      	ands	r3, r2
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	bf0c      	ite	eq
 80054b0:	2301      	moveq	r3, #1
 80054b2:	2300      	movne	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	461a      	mov	r2, r3
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d093      	beq.n	80053e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054d6:	e071      	b.n	80055bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054e6:	d123      	bne.n	8005530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005500:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551c:	f043 0204 	orr.w	r2, r3, #4
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e067      	b.n	8005600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d041      	beq.n	80055bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005538:	f7fc fc14 	bl	8001d64 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d302      	bcc.n	800554e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d136      	bne.n	80055bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	0c1b      	lsrs	r3, r3, #16
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b01      	cmp	r3, #1
 8005556:	d10c      	bne.n	8005572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	43da      	mvns	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4013      	ands	r3, r2
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	bf14      	ite	ne
 800556a:	2301      	movne	r3, #1
 800556c:	2300      	moveq	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	e00b      	b.n	800558a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	43da      	mvns	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4013      	ands	r3, r2
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	bf14      	ite	ne
 8005584:	2301      	movne	r3, #1
 8005586:	2300      	moveq	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d016      	beq.n	80055bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a8:	f043 0220 	orr.w	r2, r3, #32
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e021      	b.n	8005600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	0c1b      	lsrs	r3, r3, #16
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d10c      	bne.n	80055e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	43da      	mvns	r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	4013      	ands	r3, r2
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bf14      	ite	ne
 80055d8:	2301      	movne	r3, #1
 80055da:	2300      	moveq	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	e00b      	b.n	80055f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	43da      	mvns	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4013      	ands	r3, r2
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bf14      	ite	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	2300      	moveq	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f47f af6d 	bne.w	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005614:	e034      	b.n	8005680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 f8e3 	bl	80057e2 <I2C_IsAcknowledgeFailed>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e034      	b.n	8005690 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562c:	d028      	beq.n	8005680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562e:	f7fc fb99 	bl	8001d64 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	429a      	cmp	r2, r3
 800563c:	d302      	bcc.n	8005644 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d11d      	bne.n	8005680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564e:	2b80      	cmp	r3, #128	@ 0x80
 8005650:	d016      	beq.n	8005680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566c:	f043 0220 	orr.w	r2, r3, #32
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e007      	b.n	8005690 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800568a:	2b80      	cmp	r3, #128	@ 0x80
 800568c:	d1c3      	bne.n	8005616 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056a4:	e034      	b.n	8005710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 f89b 	bl	80057e2 <I2C_IsAcknowledgeFailed>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e034      	b.n	8005720 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056bc:	d028      	beq.n	8005710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056be:	f7fc fb51 	bl	8001d64 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d302      	bcc.n	80056d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d11d      	bne.n	8005710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d016      	beq.n	8005710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fc:	f043 0220 	orr.w	r2, r3, #32
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e007      	b.n	8005720 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b04      	cmp	r3, #4
 800571c:	d1c3      	bne.n	80056a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005734:	e049      	b.n	80057ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	2b10      	cmp	r3, #16
 8005742:	d119      	bne.n	8005778 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0210 	mvn.w	r2, #16
 800574c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e030      	b.n	80057da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005778:	f7fc faf4 	bl	8001d64 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	429a      	cmp	r2, r3
 8005786:	d302      	bcc.n	800578e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d11d      	bne.n	80057ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005798:	2b40      	cmp	r3, #64	@ 0x40
 800579a:	d016      	beq.n	80057ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	f043 0220 	orr.w	r2, r3, #32
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e007      	b.n	80057da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d4:	2b40      	cmp	r3, #64	@ 0x40
 80057d6:	d1ae      	bne.n	8005736 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f8:	d11b      	bne.n	8005832 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005802:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581e:	f043 0204 	orr.w	r2, r3, #4
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e128      	b.n	8005aa4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d109      	bne.n	8005872 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a90      	ldr	r2, [pc, #576]	@ (8005aac <HAL_I2S_Init+0x26c>)
 800586a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7fc f89f 	bl	80019b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2202      	movs	r2, #2
 8005876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6812      	ldr	r2, [r2, #0]
 8005884:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005888:	f023 030f 	bic.w	r3, r3, #15
 800588c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2202      	movs	r2, #2
 8005894:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d060      	beq.n	8005960 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80058a6:	2310      	movs	r3, #16
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	e001      	b.n	80058b0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80058ac:	2320      	movs	r3, #32
 80058ae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d802      	bhi.n	80058be <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80058be:	2001      	movs	r0, #1
 80058c0:	f001 f9c4 	bl	8006c4c <HAL_RCCEx_GetPeriphCLKFreq>
 80058c4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058ce:	d125      	bne.n	800591c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d010      	beq.n	80058fa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	fbb2 f2f3 	udiv	r2, r2, r3
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	461a      	mov	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	3305      	adds	r3, #5
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	e01f      	b.n	800593a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	fbb2 f2f3 	udiv	r2, r2, r3
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	461a      	mov	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	fbb2 f3f3 	udiv	r3, r2, r3
 8005916:	3305      	adds	r3, #5
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	e00e      	b.n	800593a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	fbb2 f2f3 	udiv	r2, r2, r3
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	461a      	mov	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	fbb2 f3f3 	udiv	r3, r2, r3
 8005936:	3305      	adds	r3, #5
 8005938:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	4a5c      	ldr	r2, [pc, #368]	@ (8005ab0 <HAL_I2S_Init+0x270>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	08db      	lsrs	r3, r3, #3
 8005944:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	e003      	b.n	8005968 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005960:	2302      	movs	r3, #2
 8005962:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d902      	bls.n	8005974 <HAL_I2S_Init+0x134>
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	2bff      	cmp	r3, #255	@ 0xff
 8005972:	d907      	bls.n	8005984 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005978:	f043 0210 	orr.w	r2, r3, #16
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e08f      	b.n	8005aa4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	ea42 0103 	orr.w	r1, r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	430a      	orrs	r2, r1
 8005996:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80059a2:	f023 030f 	bic.w	r3, r3, #15
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6851      	ldr	r1, [r2, #4]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6892      	ldr	r2, [r2, #8]
 80059ae:	4311      	orrs	r1, r2
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	68d2      	ldr	r2, [r2, #12]
 80059b4:	4311      	orrs	r1, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6992      	ldr	r2, [r2, #24]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059c6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d161      	bne.n	8005a94 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a38      	ldr	r2, [pc, #224]	@ (8005ab4 <HAL_I2S_Init+0x274>)
 80059d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a37      	ldr	r2, [pc, #220]	@ (8005ab8 <HAL_I2S_Init+0x278>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d101      	bne.n	80059e4 <HAL_I2S_Init+0x1a4>
 80059e0:	4b36      	ldr	r3, [pc, #216]	@ (8005abc <HAL_I2S_Init+0x27c>)
 80059e2:	e001      	b.n	80059e8 <HAL_I2S_Init+0x1a8>
 80059e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	4932      	ldr	r1, [pc, #200]	@ (8005ab8 <HAL_I2S_Init+0x278>)
 80059f0:	428a      	cmp	r2, r1
 80059f2:	d101      	bne.n	80059f8 <HAL_I2S_Init+0x1b8>
 80059f4:	4a31      	ldr	r2, [pc, #196]	@ (8005abc <HAL_I2S_Init+0x27c>)
 80059f6:	e001      	b.n	80059fc <HAL_I2S_Init+0x1bc>
 80059f8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80059fc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005a00:	f023 030f 	bic.w	r3, r3, #15
 8005a04:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8005ab8 <HAL_I2S_Init+0x278>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d101      	bne.n	8005a14 <HAL_I2S_Init+0x1d4>
 8005a10:	4b2a      	ldr	r3, [pc, #168]	@ (8005abc <HAL_I2S_Init+0x27c>)
 8005a12:	e001      	b.n	8005a18 <HAL_I2S_Init+0x1d8>
 8005a14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a18:	2202      	movs	r2, #2
 8005a1a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a25      	ldr	r2, [pc, #148]	@ (8005ab8 <HAL_I2S_Init+0x278>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d101      	bne.n	8005a2a <HAL_I2S_Init+0x1ea>
 8005a26:	4b25      	ldr	r3, [pc, #148]	@ (8005abc <HAL_I2S_Init+0x27c>)
 8005a28:	e001      	b.n	8005a2e <HAL_I2S_Init+0x1ee>
 8005a2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a3a:	d003      	beq.n	8005a44 <HAL_I2S_Init+0x204>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d103      	bne.n	8005a4c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005a44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	e001      	b.n	8005a50 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a64:	4313      	orrs	r3, r2
 8005a66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	897b      	ldrh	r3, [r7, #10]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005a7c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a0d      	ldr	r2, [pc, #52]	@ (8005ab8 <HAL_I2S_Init+0x278>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d101      	bne.n	8005a8c <HAL_I2S_Init+0x24c>
 8005a88:	4b0c      	ldr	r3, [pc, #48]	@ (8005abc <HAL_I2S_Init+0x27c>)
 8005a8a:	e001      	b.n	8005a90 <HAL_I2S_Init+0x250>
 8005a8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a90:	897a      	ldrh	r2, [r7, #10]
 8005a92:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3720      	adds	r7, #32
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	08005bb7 	.word	0x08005bb7
 8005ab0:	cccccccd 	.word	0xcccccccd
 8005ab4:	08005ccd 	.word	0x08005ccd
 8005ab8:	40003800 	.word	0x40003800
 8005abc:	40003400 	.word	0x40003400

08005ac0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b08:	881a      	ldrh	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b14:	1c9a      	adds	r2, r3, #2
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10e      	bne.n	8005b50 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b40:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff ffb8 	bl	8005ac0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6a:	b292      	uxth	r2, r2
 8005b6c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b72:	1c9a      	adds	r2, r3, #2
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10e      	bne.n	8005bae <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b9e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff ff93 	bl	8005ad4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b086      	sub	sp, #24
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d13a      	bne.n	8005c48 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d109      	bne.n	8005bf0 <I2S_IRQHandler+0x3a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be6:	2b40      	cmp	r3, #64	@ 0x40
 8005be8:	d102      	bne.n	8005bf0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff ffb4 	bl	8005b58 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf6:	2b40      	cmp	r3, #64	@ 0x40
 8005bf8:	d126      	bne.n	8005c48 <I2S_IRQHandler+0x92>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d11f      	bne.n	8005c48 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c16:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c18:	2300      	movs	r3, #0
 8005c1a:	613b      	str	r3, [r7, #16]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	613b      	str	r3, [r7, #16]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c3a:	f043 0202 	orr.w	r2, r3, #2
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff ff50 	bl	8005ae8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d136      	bne.n	8005cc2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d109      	bne.n	8005c72 <I2S_IRQHandler+0xbc>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c68:	2b80      	cmp	r3, #128	@ 0x80
 8005c6a:	d102      	bne.n	8005c72 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff ff45 	bl	8005afc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d122      	bne.n	8005cc2 <I2S_IRQHandler+0x10c>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	d11b      	bne.n	8005cc2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c98:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb4:	f043 0204 	orr.w	r2, r3, #4
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff ff13 	bl	8005ae8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cc2:	bf00      	nop
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a92      	ldr	r2, [pc, #584]	@ (8005f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d101      	bne.n	8005cea <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005ce6:	4b92      	ldr	r3, [pc, #584]	@ (8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ce8:	e001      	b.n	8005cee <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005cea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a8b      	ldr	r2, [pc, #556]	@ (8005f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d101      	bne.n	8005d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005d04:	4b8a      	ldr	r3, [pc, #552]	@ (8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d06:	e001      	b.n	8005d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005d08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d18:	d004      	beq.n	8005d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f040 8099 	bne.w	8005e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d107      	bne.n	8005d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f925 	bl	8005f88 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d107      	bne.n	8005d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f9c8 	bl	80060e8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d5e:	2b40      	cmp	r3, #64	@ 0x40
 8005d60:	d13a      	bne.n	8005dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d035      	beq.n	8005dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a6e      	ldr	r2, [pc, #440]	@ (8005f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d101      	bne.n	8005d7a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005d76:	4b6e      	ldr	r3, [pc, #440]	@ (8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d78:	e001      	b.n	8005d7e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005d7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4969      	ldr	r1, [pc, #420]	@ (8005f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d86:	428b      	cmp	r3, r1
 8005d88:	d101      	bne.n	8005d8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005d8a:	4b69      	ldr	r3, [pc, #420]	@ (8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d8c:	e001      	b.n	8005d92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005d8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d92:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d96:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005da6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dca:	f043 0202 	orr.w	r2, r3, #2
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff fe88 	bl	8005ae8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	f040 80c3 	bne.w	8005f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 80bd 	beq.w	8005f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005dfe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a49      	ldr	r2, [pc, #292]	@ (8005f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d101      	bne.n	8005e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005e0a:	4b49      	ldr	r3, [pc, #292]	@ (8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e0c:	e001      	b.n	8005e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005e0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4944      	ldr	r1, [pc, #272]	@ (8005f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e1a:	428b      	cmp	r3, r1
 8005e1c:	d101      	bne.n	8005e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005e1e:	4b44      	ldr	r3, [pc, #272]	@ (8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e20:	e001      	b.n	8005e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005e22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e2a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60bb      	str	r3, [r7, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	60bb      	str	r3, [r7, #8]
 8005e38:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e46:	f043 0204 	orr.w	r2, r3, #4
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff fe4a 	bl	8005ae8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e54:	e089      	b.n	8005f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d107      	bne.n	8005e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f8be 	bl	8005fec <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d107      	bne.n	8005e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f8fd 	bl	8006084 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e90:	2b40      	cmp	r3, #64	@ 0x40
 8005e92:	d12f      	bne.n	8005ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d02a      	beq.n	8005ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005eac:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8005f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d101      	bne.n	8005ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005eba:	e001      	b.n	8005ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005ebc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4919      	ldr	r1, [pc, #100]	@ (8005f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ec8:	428b      	cmp	r3, r1
 8005eca:	d101      	bne.n	8005ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005ecc:	4b18      	ldr	r3, [pc, #96]	@ (8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ece:	e001      	b.n	8005ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005ed0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ed4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ed8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee6:	f043 0202 	orr.w	r2, r3, #2
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff fdfa 	bl	8005ae8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d136      	bne.n	8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d031      	beq.n	8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a07      	ldr	r2, [pc, #28]	@ (8005f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d101      	bne.n	8005f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005f12:	4b07      	ldr	r3, [pc, #28]	@ (8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f14:	e001      	b.n	8005f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005f16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4902      	ldr	r1, [pc, #8]	@ (8005f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f22:	428b      	cmp	r3, r1
 8005f24:	d106      	bne.n	8005f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005f26:	4b02      	ldr	r3, [pc, #8]	@ (8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f28:	e006      	b.n	8005f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005f2a:	bf00      	nop
 8005f2c:	40003800 	.word	0x40003800
 8005f30:	40003400 	.word	0x40003400
 8005f34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f3c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f4c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5a:	f043 0204 	orr.w	r2, r3, #4
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff fdc0 	bl	8005ae8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f68:	e000      	b.n	8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f6a:	bf00      	nop
}
 8005f6c:	bf00      	nop
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f94:	1c99      	adds	r1, r3, #2
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6251      	str	r1, [r2, #36]	@ 0x24
 8005f9a:	881a      	ldrh	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d113      	bne.n	8005fe2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fc8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff ffc9 	bl	8005f74 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fe2:	bf00      	nop
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff8:	1c99      	adds	r1, r3, #2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6251      	str	r1, [r2, #36]	@ 0x24
 8005ffe:	8819      	ldrh	r1, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1d      	ldr	r2, [pc, #116]	@ (800607c <I2SEx_TxISR_I2SExt+0x90>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d101      	bne.n	800600e <I2SEx_TxISR_I2SExt+0x22>
 800600a:	4b1d      	ldr	r3, [pc, #116]	@ (8006080 <I2SEx_TxISR_I2SExt+0x94>)
 800600c:	e001      	b.n	8006012 <I2SEx_TxISR_I2SExt+0x26>
 800600e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006012:	460a      	mov	r2, r1
 8006014:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800601a:	b29b      	uxth	r3, r3
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d121      	bne.n	8006072 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a12      	ldr	r2, [pc, #72]	@ (800607c <I2SEx_TxISR_I2SExt+0x90>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d101      	bne.n	800603c <I2SEx_TxISR_I2SExt+0x50>
 8006038:	4b11      	ldr	r3, [pc, #68]	@ (8006080 <I2SEx_TxISR_I2SExt+0x94>)
 800603a:	e001      	b.n	8006040 <I2SEx_TxISR_I2SExt+0x54>
 800603c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	490d      	ldr	r1, [pc, #52]	@ (800607c <I2SEx_TxISR_I2SExt+0x90>)
 8006048:	428b      	cmp	r3, r1
 800604a:	d101      	bne.n	8006050 <I2SEx_TxISR_I2SExt+0x64>
 800604c:	4b0c      	ldr	r3, [pc, #48]	@ (8006080 <I2SEx_TxISR_I2SExt+0x94>)
 800604e:	e001      	b.n	8006054 <I2SEx_TxISR_I2SExt+0x68>
 8006050:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006054:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006058:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff ff81 	bl	8005f74 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	40003800 	.word	0x40003800
 8006080:	40003400 	.word	0x40003400

08006084 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68d8      	ldr	r0, [r3, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006096:	1c99      	adds	r1, r3, #2
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800609c:	b282      	uxth	r2, r0
 800609e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d113      	bne.n	80060e0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80060c6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff ff4a 	bl	8005f74 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060e0:	bf00      	nop
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a20      	ldr	r2, [pc, #128]	@ (8006178 <I2SEx_RxISR_I2SExt+0x90>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d101      	bne.n	80060fe <I2SEx_RxISR_I2SExt+0x16>
 80060fa:	4b20      	ldr	r3, [pc, #128]	@ (800617c <I2SEx_RxISR_I2SExt+0x94>)
 80060fc:	e001      	b.n	8006102 <I2SEx_RxISR_I2SExt+0x1a>
 80060fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006102:	68d8      	ldr	r0, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006108:	1c99      	adds	r1, r3, #2
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800610e:	b282      	uxth	r2, r0
 8006110:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d121      	bne.n	800616e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a12      	ldr	r2, [pc, #72]	@ (8006178 <I2SEx_RxISR_I2SExt+0x90>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d101      	bne.n	8006138 <I2SEx_RxISR_I2SExt+0x50>
 8006134:	4b11      	ldr	r3, [pc, #68]	@ (800617c <I2SEx_RxISR_I2SExt+0x94>)
 8006136:	e001      	b.n	800613c <I2SEx_RxISR_I2SExt+0x54>
 8006138:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	490d      	ldr	r1, [pc, #52]	@ (8006178 <I2SEx_RxISR_I2SExt+0x90>)
 8006144:	428b      	cmp	r3, r1
 8006146:	d101      	bne.n	800614c <I2SEx_RxISR_I2SExt+0x64>
 8006148:	4b0c      	ldr	r3, [pc, #48]	@ (800617c <I2SEx_RxISR_I2SExt+0x94>)
 800614a:	e001      	b.n	8006150 <I2SEx_RxISR_I2SExt+0x68>
 800614c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006150:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006154:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d106      	bne.n	800616e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff ff03 	bl	8005f74 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	40003800 	.word	0x40003800
 800617c:	40003400 	.word	0x40003400

08006180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e267      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d075      	beq.n	800628a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800619e:	4b88      	ldr	r3, [pc, #544]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 030c 	and.w	r3, r3, #12
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d00c      	beq.n	80061c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061aa:	4b85      	ldr	r3, [pc, #532]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d112      	bne.n	80061dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061b6:	4b82      	ldr	r3, [pc, #520]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061c2:	d10b      	bne.n	80061dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c4:	4b7e      	ldr	r3, [pc, #504]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d05b      	beq.n	8006288 <HAL_RCC_OscConfig+0x108>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d157      	bne.n	8006288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e242      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e4:	d106      	bne.n	80061f4 <HAL_RCC_OscConfig+0x74>
 80061e6:	4b76      	ldr	r3, [pc, #472]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a75      	ldr	r2, [pc, #468]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80061ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	e01d      	b.n	8006230 <HAL_RCC_OscConfig+0xb0>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061fc:	d10c      	bne.n	8006218 <HAL_RCC_OscConfig+0x98>
 80061fe:	4b70      	ldr	r3, [pc, #448]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a6f      	ldr	r2, [pc, #444]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	4b6d      	ldr	r3, [pc, #436]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a6c      	ldr	r2, [pc, #432]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	e00b      	b.n	8006230 <HAL_RCC_OscConfig+0xb0>
 8006218:	4b69      	ldr	r3, [pc, #420]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a68      	ldr	r2, [pc, #416]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 800621e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	4b66      	ldr	r3, [pc, #408]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a65      	ldr	r2, [pc, #404]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 800622a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800622e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d013      	beq.n	8006260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006238:	f7fb fd94 	bl	8001d64 <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006240:	f7fb fd90 	bl	8001d64 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b64      	cmp	r3, #100	@ 0x64
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e207      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006252:	4b5b      	ldr	r3, [pc, #364]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCC_OscConfig+0xc0>
 800625e:	e014      	b.n	800628a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006260:	f7fb fd80 	bl	8001d64 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006268:	f7fb fd7c 	bl	8001d64 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b64      	cmp	r3, #100	@ 0x64
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e1f3      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800627a:	4b51      	ldr	r3, [pc, #324]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f0      	bne.n	8006268 <HAL_RCC_OscConfig+0xe8>
 8006286:	e000      	b.n	800628a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d063      	beq.n	800635e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006296:	4b4a      	ldr	r3, [pc, #296]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00b      	beq.n	80062ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062a2:	4b47      	ldr	r3, [pc, #284]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d11c      	bne.n	80062e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ae:	4b44      	ldr	r3, [pc, #272]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d116      	bne.n	80062e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ba:	4b41      	ldr	r3, [pc, #260]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <HAL_RCC_OscConfig+0x152>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d001      	beq.n	80062d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e1c7      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d2:	4b3b      	ldr	r3, [pc, #236]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	4937      	ldr	r1, [pc, #220]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062e6:	e03a      	b.n	800635e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d020      	beq.n	8006332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062f0:	4b34      	ldr	r3, [pc, #208]	@ (80063c4 <HAL_RCC_OscConfig+0x244>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f6:	f7fb fd35 	bl	8001d64 <HAL_GetTick>
 80062fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062fc:	e008      	b.n	8006310 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062fe:	f7fb fd31 	bl	8001d64 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d901      	bls.n	8006310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e1a8      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006310:	4b2b      	ldr	r3, [pc, #172]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0f0      	beq.n	80062fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800631c:	4b28      	ldr	r3, [pc, #160]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	4925      	ldr	r1, [pc, #148]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 800632c:	4313      	orrs	r3, r2
 800632e:	600b      	str	r3, [r1, #0]
 8006330:	e015      	b.n	800635e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006332:	4b24      	ldr	r3, [pc, #144]	@ (80063c4 <HAL_RCC_OscConfig+0x244>)
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006338:	f7fb fd14 	bl	8001d64 <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006340:	f7fb fd10 	bl	8001d64 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e187      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006352:	4b1b      	ldr	r3, [pc, #108]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f0      	bne.n	8006340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d036      	beq.n	80063d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d016      	beq.n	80063a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006372:	4b15      	ldr	r3, [pc, #84]	@ (80063c8 <HAL_RCC_OscConfig+0x248>)
 8006374:	2201      	movs	r2, #1
 8006376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006378:	f7fb fcf4 	bl	8001d64 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006380:	f7fb fcf0 	bl	8001d64 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e167      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006392:	4b0b      	ldr	r3, [pc, #44]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0f0      	beq.n	8006380 <HAL_RCC_OscConfig+0x200>
 800639e:	e01b      	b.n	80063d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063a0:	4b09      	ldr	r3, [pc, #36]	@ (80063c8 <HAL_RCC_OscConfig+0x248>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a6:	f7fb fcdd 	bl	8001d64 <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063ac:	e00e      	b.n	80063cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ae:	f7fb fcd9 	bl	8001d64 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d907      	bls.n	80063cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e150      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
 80063c0:	40023800 	.word	0x40023800
 80063c4:	42470000 	.word	0x42470000
 80063c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063cc:	4b88      	ldr	r3, [pc, #544]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 80063ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1ea      	bne.n	80063ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 8097 	beq.w	8006514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ea:	4b81      	ldr	r3, [pc, #516]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10f      	bne.n	8006416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063f6:	2300      	movs	r3, #0
 80063f8:	60bb      	str	r3, [r7, #8]
 80063fa:	4b7d      	ldr	r3, [pc, #500]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 80063fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fe:	4a7c      	ldr	r2, [pc, #496]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006404:	6413      	str	r3, [r2, #64]	@ 0x40
 8006406:	4b7a      	ldr	r3, [pc, #488]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800640e:	60bb      	str	r3, [r7, #8]
 8006410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006412:	2301      	movs	r3, #1
 8006414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006416:	4b77      	ldr	r3, [pc, #476]	@ (80065f4 <HAL_RCC_OscConfig+0x474>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641e:	2b00      	cmp	r3, #0
 8006420:	d118      	bne.n	8006454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006422:	4b74      	ldr	r3, [pc, #464]	@ (80065f4 <HAL_RCC_OscConfig+0x474>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a73      	ldr	r2, [pc, #460]	@ (80065f4 <HAL_RCC_OscConfig+0x474>)
 8006428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800642c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800642e:	f7fb fc99 	bl	8001d64 <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006436:	f7fb fc95 	bl	8001d64 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e10c      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006448:	4b6a      	ldr	r3, [pc, #424]	@ (80065f4 <HAL_RCC_OscConfig+0x474>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d106      	bne.n	800646a <HAL_RCC_OscConfig+0x2ea>
 800645c:	4b64      	ldr	r3, [pc, #400]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 800645e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006460:	4a63      	ldr	r2, [pc, #396]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006462:	f043 0301 	orr.w	r3, r3, #1
 8006466:	6713      	str	r3, [r2, #112]	@ 0x70
 8006468:	e01c      	b.n	80064a4 <HAL_RCC_OscConfig+0x324>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b05      	cmp	r3, #5
 8006470:	d10c      	bne.n	800648c <HAL_RCC_OscConfig+0x30c>
 8006472:	4b5f      	ldr	r3, [pc, #380]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006476:	4a5e      	ldr	r2, [pc, #376]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006478:	f043 0304 	orr.w	r3, r3, #4
 800647c:	6713      	str	r3, [r2, #112]	@ 0x70
 800647e:	4b5c      	ldr	r3, [pc, #368]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006482:	4a5b      	ldr	r2, [pc, #364]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006484:	f043 0301 	orr.w	r3, r3, #1
 8006488:	6713      	str	r3, [r2, #112]	@ 0x70
 800648a:	e00b      	b.n	80064a4 <HAL_RCC_OscConfig+0x324>
 800648c:	4b58      	ldr	r3, [pc, #352]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 800648e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006490:	4a57      	ldr	r2, [pc, #348]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006492:	f023 0301 	bic.w	r3, r3, #1
 8006496:	6713      	str	r3, [r2, #112]	@ 0x70
 8006498:	4b55      	ldr	r3, [pc, #340]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 800649a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800649c:	4a54      	ldr	r2, [pc, #336]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 800649e:	f023 0304 	bic.w	r3, r3, #4
 80064a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d015      	beq.n	80064d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ac:	f7fb fc5a 	bl	8001d64 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064b2:	e00a      	b.n	80064ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b4:	f7fb fc56 	bl	8001d64 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e0cb      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ca:	4b49      	ldr	r3, [pc, #292]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 80064cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0ee      	beq.n	80064b4 <HAL_RCC_OscConfig+0x334>
 80064d6:	e014      	b.n	8006502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064d8:	f7fb fc44 	bl	8001d64 <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064de:	e00a      	b.n	80064f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064e0:	f7fb fc40 	bl	8001d64 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e0b5      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064f6:	4b3e      	ldr	r3, [pc, #248]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 80064f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1ee      	bne.n	80064e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006502:	7dfb      	ldrb	r3, [r7, #23]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d105      	bne.n	8006514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006508:	4b39      	ldr	r3, [pc, #228]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 800650a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650c:	4a38      	ldr	r2, [pc, #224]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 800650e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006512:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80a1 	beq.w	8006660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800651e:	4b34      	ldr	r3, [pc, #208]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 030c 	and.w	r3, r3, #12
 8006526:	2b08      	cmp	r3, #8
 8006528:	d05c      	beq.n	80065e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d141      	bne.n	80065b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006532:	4b31      	ldr	r3, [pc, #196]	@ (80065f8 <HAL_RCC_OscConfig+0x478>)
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006538:	f7fb fc14 	bl	8001d64 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006540:	f7fb fc10 	bl	8001d64 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e087      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006552:	4b27      	ldr	r3, [pc, #156]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1f0      	bne.n	8006540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69da      	ldr	r2, [r3, #28]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656c:	019b      	lsls	r3, r3, #6
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006574:	085b      	lsrs	r3, r3, #1
 8006576:	3b01      	subs	r3, #1
 8006578:	041b      	lsls	r3, r3, #16
 800657a:	431a      	orrs	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006580:	061b      	lsls	r3, r3, #24
 8006582:	491b      	ldr	r1, [pc, #108]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006584:	4313      	orrs	r3, r2
 8006586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006588:	4b1b      	ldr	r3, [pc, #108]	@ (80065f8 <HAL_RCC_OscConfig+0x478>)
 800658a:	2201      	movs	r2, #1
 800658c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658e:	f7fb fbe9 	bl	8001d64 <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006594:	e008      	b.n	80065a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006596:	f7fb fbe5 	bl	8001d64 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e05c      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a8:	4b11      	ldr	r3, [pc, #68]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0f0      	beq.n	8006596 <HAL_RCC_OscConfig+0x416>
 80065b4:	e054      	b.n	8006660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b6:	4b10      	ldr	r3, [pc, #64]	@ (80065f8 <HAL_RCC_OscConfig+0x478>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065bc:	f7fb fbd2 	bl	8001d64 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c4:	f7fb fbce 	bl	8001d64 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e045      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d6:	4b06      	ldr	r3, [pc, #24]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f0      	bne.n	80065c4 <HAL_RCC_OscConfig+0x444>
 80065e2:	e03d      	b.n	8006660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d107      	bne.n	80065fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e038      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
 80065f0:	40023800 	.word	0x40023800
 80065f4:	40007000 	.word	0x40007000
 80065f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065fc:	4b1b      	ldr	r3, [pc, #108]	@ (800666c <HAL_RCC_OscConfig+0x4ec>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d028      	beq.n	800665c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006614:	429a      	cmp	r2, r3
 8006616:	d121      	bne.n	800665c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006622:	429a      	cmp	r2, r3
 8006624:	d11a      	bne.n	800665c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800662c:	4013      	ands	r3, r2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006634:	4293      	cmp	r3, r2
 8006636:	d111      	bne.n	800665c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006642:	085b      	lsrs	r3, r3, #1
 8006644:	3b01      	subs	r3, #1
 8006646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006648:	429a      	cmp	r2, r3
 800664a:	d107      	bne.n	800665c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006658:	429a      	cmp	r2, r3
 800665a:	d001      	beq.n	8006660 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e000      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40023800 	.word	0x40023800

08006670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e0cc      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006684:	4b68      	ldr	r3, [pc, #416]	@ (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d90c      	bls.n	80066ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006692:	4b65      	ldr	r3, [pc, #404]	@ (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800669a:	4b63      	ldr	r3, [pc, #396]	@ (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d001      	beq.n	80066ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e0b8      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d020      	beq.n	80066fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066c4:	4b59      	ldr	r3, [pc, #356]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	4a58      	ldr	r2, [pc, #352]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80066ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066dc:	4b53      	ldr	r3, [pc, #332]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	4a52      	ldr	r2, [pc, #328]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80066e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066e8:	4b50      	ldr	r3, [pc, #320]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	494d      	ldr	r1, [pc, #308]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d044      	beq.n	8006790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d107      	bne.n	800671e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800670e:	4b47      	ldr	r3, [pc, #284]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d119      	bne.n	800674e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e07f      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b02      	cmp	r3, #2
 8006724:	d003      	beq.n	800672e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800672a:	2b03      	cmp	r3, #3
 800672c:	d107      	bne.n	800673e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800672e:	4b3f      	ldr	r3, [pc, #252]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d109      	bne.n	800674e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e06f      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800673e:	4b3b      	ldr	r3, [pc, #236]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e067      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800674e:	4b37      	ldr	r3, [pc, #220]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f023 0203 	bic.w	r2, r3, #3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	4934      	ldr	r1, [pc, #208]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 800675c:	4313      	orrs	r3, r2
 800675e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006760:	f7fb fb00 	bl	8001d64 <HAL_GetTick>
 8006764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006766:	e00a      	b.n	800677e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006768:	f7fb fafc 	bl	8001d64 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006776:	4293      	cmp	r3, r2
 8006778:	d901      	bls.n	800677e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e04f      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800677e:	4b2b      	ldr	r3, [pc, #172]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 020c 	and.w	r2, r3, #12
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	429a      	cmp	r2, r3
 800678e:	d1eb      	bne.n	8006768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006790:	4b25      	ldr	r3, [pc, #148]	@ (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d20c      	bcs.n	80067b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679e:	4b22      	ldr	r3, [pc, #136]	@ (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a6:	4b20      	ldr	r3, [pc, #128]	@ (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d001      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e032      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d008      	beq.n	80067d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067c4:	4b19      	ldr	r3, [pc, #100]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	4916      	ldr	r1, [pc, #88]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d009      	beq.n	80067f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067e2:	4b12      	ldr	r3, [pc, #72]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	490e      	ldr	r1, [pc, #56]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067f6:	f000 f821 	bl	800683c <HAL_RCC_GetSysClockFreq>
 80067fa:	4602      	mov	r2, r0
 80067fc:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	091b      	lsrs	r3, r3, #4
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	490a      	ldr	r1, [pc, #40]	@ (8006830 <HAL_RCC_ClockConfig+0x1c0>)
 8006808:	5ccb      	ldrb	r3, [r1, r3]
 800680a:	fa22 f303 	lsr.w	r3, r2, r3
 800680e:	4a09      	ldr	r2, [pc, #36]	@ (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 8006810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006812:	4b09      	ldr	r3, [pc, #36]	@ (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4618      	mov	r0, r3
 8006818:	f7fb fa60 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	40023c00 	.word	0x40023c00
 800682c:	40023800 	.word	0x40023800
 8006830:	0800aac0 	.word	0x0800aac0
 8006834:	20000000 	.word	0x20000000
 8006838:	20000004 	.word	0x20000004

0800683c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800683c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006840:	b094      	sub	sp, #80	@ 0x50
 8006842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006854:	4b79      	ldr	r3, [pc, #484]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f003 030c 	and.w	r3, r3, #12
 800685c:	2b08      	cmp	r3, #8
 800685e:	d00d      	beq.n	800687c <HAL_RCC_GetSysClockFreq+0x40>
 8006860:	2b08      	cmp	r3, #8
 8006862:	f200 80e1 	bhi.w	8006a28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <HAL_RCC_GetSysClockFreq+0x34>
 800686a:	2b04      	cmp	r3, #4
 800686c:	d003      	beq.n	8006876 <HAL_RCC_GetSysClockFreq+0x3a>
 800686e:	e0db      	b.n	8006a28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006870:	4b73      	ldr	r3, [pc, #460]	@ (8006a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8006872:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006874:	e0db      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006876:	4b73      	ldr	r3, [pc, #460]	@ (8006a44 <HAL_RCC_GetSysClockFreq+0x208>)
 8006878:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800687a:	e0d8      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800687c:	4b6f      	ldr	r3, [pc, #444]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006884:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006886:	4b6d      	ldr	r3, [pc, #436]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d063      	beq.n	800695a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006892:	4b6a      	ldr	r3, [pc, #424]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	099b      	lsrs	r3, r3, #6
 8006898:	2200      	movs	r2, #0
 800689a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800689c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800689e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80068a6:	2300      	movs	r3, #0
 80068a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80068ae:	4622      	mov	r2, r4
 80068b0:	462b      	mov	r3, r5
 80068b2:	f04f 0000 	mov.w	r0, #0
 80068b6:	f04f 0100 	mov.w	r1, #0
 80068ba:	0159      	lsls	r1, r3, #5
 80068bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068c0:	0150      	lsls	r0, r2, #5
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4621      	mov	r1, r4
 80068c8:	1a51      	subs	r1, r2, r1
 80068ca:	6139      	str	r1, [r7, #16]
 80068cc:	4629      	mov	r1, r5
 80068ce:	eb63 0301 	sbc.w	r3, r3, r1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	f04f 0200 	mov.w	r2, #0
 80068d8:	f04f 0300 	mov.w	r3, #0
 80068dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068e0:	4659      	mov	r1, fp
 80068e2:	018b      	lsls	r3, r1, #6
 80068e4:	4651      	mov	r1, sl
 80068e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068ea:	4651      	mov	r1, sl
 80068ec:	018a      	lsls	r2, r1, #6
 80068ee:	4651      	mov	r1, sl
 80068f0:	ebb2 0801 	subs.w	r8, r2, r1
 80068f4:	4659      	mov	r1, fp
 80068f6:	eb63 0901 	sbc.w	r9, r3, r1
 80068fa:	f04f 0200 	mov.w	r2, #0
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800690a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800690e:	4690      	mov	r8, r2
 8006910:	4699      	mov	r9, r3
 8006912:	4623      	mov	r3, r4
 8006914:	eb18 0303 	adds.w	r3, r8, r3
 8006918:	60bb      	str	r3, [r7, #8]
 800691a:	462b      	mov	r3, r5
 800691c:	eb49 0303 	adc.w	r3, r9, r3
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800692e:	4629      	mov	r1, r5
 8006930:	024b      	lsls	r3, r1, #9
 8006932:	4621      	mov	r1, r4
 8006934:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006938:	4621      	mov	r1, r4
 800693a:	024a      	lsls	r2, r1, #9
 800693c:	4610      	mov	r0, r2
 800693e:	4619      	mov	r1, r3
 8006940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006942:	2200      	movs	r2, #0
 8006944:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006946:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006948:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800694c:	f7fa f85a 	bl	8000a04 <__aeabi_uldivmod>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4613      	mov	r3, r2
 8006956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006958:	e058      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800695a:	4b38      	ldr	r3, [pc, #224]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	099b      	lsrs	r3, r3, #6
 8006960:	2200      	movs	r2, #0
 8006962:	4618      	mov	r0, r3
 8006964:	4611      	mov	r1, r2
 8006966:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800696a:	623b      	str	r3, [r7, #32]
 800696c:	2300      	movs	r3, #0
 800696e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006970:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006974:	4642      	mov	r2, r8
 8006976:	464b      	mov	r3, r9
 8006978:	f04f 0000 	mov.w	r0, #0
 800697c:	f04f 0100 	mov.w	r1, #0
 8006980:	0159      	lsls	r1, r3, #5
 8006982:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006986:	0150      	lsls	r0, r2, #5
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4641      	mov	r1, r8
 800698e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006992:	4649      	mov	r1, r9
 8006994:	eb63 0b01 	sbc.w	fp, r3, r1
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069ac:	ebb2 040a 	subs.w	r4, r2, sl
 80069b0:	eb63 050b 	sbc.w	r5, r3, fp
 80069b4:	f04f 0200 	mov.w	r2, #0
 80069b8:	f04f 0300 	mov.w	r3, #0
 80069bc:	00eb      	lsls	r3, r5, #3
 80069be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069c2:	00e2      	lsls	r2, r4, #3
 80069c4:	4614      	mov	r4, r2
 80069c6:	461d      	mov	r5, r3
 80069c8:	4643      	mov	r3, r8
 80069ca:	18e3      	adds	r3, r4, r3
 80069cc:	603b      	str	r3, [r7, #0]
 80069ce:	464b      	mov	r3, r9
 80069d0:	eb45 0303 	adc.w	r3, r5, r3
 80069d4:	607b      	str	r3, [r7, #4]
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	f04f 0300 	mov.w	r3, #0
 80069de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069e2:	4629      	mov	r1, r5
 80069e4:	028b      	lsls	r3, r1, #10
 80069e6:	4621      	mov	r1, r4
 80069e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069ec:	4621      	mov	r1, r4
 80069ee:	028a      	lsls	r2, r1, #10
 80069f0:	4610      	mov	r0, r2
 80069f2:	4619      	mov	r1, r3
 80069f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069f6:	2200      	movs	r2, #0
 80069f8:	61bb      	str	r3, [r7, #24]
 80069fa:	61fa      	str	r2, [r7, #28]
 80069fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a00:	f7fa f800 	bl	8000a04 <__aeabi_uldivmod>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4613      	mov	r3, r2
 8006a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	3301      	adds	r3, #1
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006a1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a26:	e002      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a28:	4b05      	ldr	r3, [pc, #20]	@ (8006a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3750      	adds	r7, #80	@ 0x50
 8006a34:	46bd      	mov	sp, r7
 8006a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	00f42400 	.word	0x00f42400
 8006a44:	007a1200 	.word	0x007a1200

08006a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a4c:	4b03      	ldr	r3, [pc, #12]	@ (8006a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20000000 	.word	0x20000000

08006a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a64:	f7ff fff0 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	4b05      	ldr	r3, [pc, #20]	@ (8006a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	0a9b      	lsrs	r3, r3, #10
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	4903      	ldr	r1, [pc, #12]	@ (8006a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a76:	5ccb      	ldrb	r3, [r1, r3]
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40023800 	.word	0x40023800
 8006a84:	0800aad0 	.word	0x0800aad0

08006a88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d105      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d035      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ab0:	4b62      	ldr	r3, [pc, #392]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ab6:	f7fb f955 	bl	8001d64 <HAL_GetTick>
 8006aba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006abc:	e008      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006abe:	f7fb f951 	bl	8001d64 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e0b0      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ad0:	4b5b      	ldr	r3, [pc, #364]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1f0      	bne.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	019a      	lsls	r2, r3, #6
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	071b      	lsls	r3, r3, #28
 8006ae8:	4955      	ldr	r1, [pc, #340]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006af0:	4b52      	ldr	r3, [pc, #328]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006af2:	2201      	movs	r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006af6:	f7fb f935 	bl	8001d64 <HAL_GetTick>
 8006afa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006afc:	e008      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006afe:	f7fb f931 	bl	8001d64 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e090      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b10:	4b4b      	ldr	r3, [pc, #300]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0f0      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 8083 	beq.w	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	4b44      	ldr	r3, [pc, #272]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b32:	4a43      	ldr	r2, [pc, #268]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b3a:	4b41      	ldr	r3, [pc, #260]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b46:	4b3f      	ldr	r3, [pc, #252]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a3e      	ldr	r2, [pc, #248]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b52:	f7fb f907 	bl	8001d64 <HAL_GetTick>
 8006b56:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006b58:	e008      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b5a:	f7fb f903 	bl	8001d64 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e062      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006b6c:	4b35      	ldr	r3, [pc, #212]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d0f0      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b78:	4b31      	ldr	r3, [pc, #196]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b80:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d02f      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d028      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b96:	4b2a      	ldr	r3, [pc, #168]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ba0:	4b29      	ldr	r3, [pc, #164]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ba6:	4b28      	ldr	r3, [pc, #160]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006bac:	4a24      	ldr	r2, [pc, #144]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006bb2:	4b23      	ldr	r3, [pc, #140]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d114      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006bbe:	f7fb f8d1 	bl	8001d64 <HAL_GetTick>
 8006bc2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc4:	e00a      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bc6:	f7fb f8cd 	bl	8001d64 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e02a      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bdc:	4b18      	ldr	r3, [pc, #96]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0ee      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bf4:	d10d      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006bf6:	4b12      	ldr	r3, [pc, #72]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c0a:	490d      	ldr	r1, [pc, #52]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	608b      	str	r3, [r1, #8]
 8006c10:	e005      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006c12:	4b0b      	ldr	r3, [pc, #44]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	4a0a      	ldr	r2, [pc, #40]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c18:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006c1c:	6093      	str	r3, [r2, #8]
 8006c1e:	4b08      	ldr	r3, [pc, #32]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c20:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c2a:	4905      	ldr	r1, [pc, #20]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	42470068 	.word	0x42470068
 8006c40:	40023800 	.word	0x40023800
 8006c44:	40007000 	.word	0x40007000
 8006c48:	42470e40 	.word	0x42470e40

08006c4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d13f      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006c6a:	4b24      	ldr	r3, [pc, #144]	@ (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d006      	beq.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c80:	d12f      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c82:	4b1f      	ldr	r3, [pc, #124]	@ (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006c84:	617b      	str	r3, [r7, #20]
          break;
 8006c86:	e02f      	b.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006c88:	4b1c      	ldr	r3, [pc, #112]	@ (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c94:	d108      	bne.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c96:	4b19      	ldr	r3, [pc, #100]	@ (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c9e:	4a19      	ldr	r2, [pc, #100]	@ (8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca4:	613b      	str	r3, [r7, #16]
 8006ca6:	e007      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ca8:	4b14      	ldr	r3, [pc, #80]	@ (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cb0:	4a15      	ldr	r2, [pc, #84]	@ (8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006cb8:	4b10      	ldr	r3, [pc, #64]	@ (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cbe:	099b      	lsrs	r3, r3, #6
 8006cc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	fb02 f303 	mul.w	r3, r2, r3
 8006cca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cd2:	0f1b      	lsrs	r3, r3, #28
 8006cd4:	f003 0307 	and.w	r3, r3, #7
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cde:	617b      	str	r3, [r7, #20]
          break;
 8006ce0:	e002      	b.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]
          break;
 8006ce6:	bf00      	nop
        }
      }
      break;
 8006ce8:	e000      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006cea:	bf00      	nop
    }
  }
  return frequency;
 8006cec:	697b      	ldr	r3, [r7, #20]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	00bb8000 	.word	0x00bb8000
 8006d04:	007a1200 	.word	0x007a1200
 8006d08:	00f42400 	.word	0x00f42400

08006d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e07b      	b.n	8006e16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d108      	bne.n	8006d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d2e:	d009      	beq.n	8006d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	61da      	str	r2, [r3, #28]
 8006d36:	e005      	b.n	8006d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d106      	bne.n	8006d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fa fea6 	bl	8001ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dc8:	ea42 0103 	orr.w	r1, r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	0c1b      	lsrs	r3, r3, #16
 8006de2:	f003 0104 	and.w	r1, r3, #4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dea:	f003 0210 	and.w	r2, r3, #16
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69da      	ldr	r2, [r3, #28]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e1e:	b084      	sub	sp, #16
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	f107 001c 	add.w	r0, r7, #28
 8006e2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e30:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d123      	bne.n	8006e80 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006e4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e60:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d105      	bne.n	8006e74 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f9dc 	bl	8007232 <USB_CoreReset>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73fb      	strb	r3, [r7, #15]
 8006e7e:	e01b      	b.n	8006eb8 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f9d0 	bl	8007232 <USB_CoreReset>
 8006e92:	4603      	mov	r3, r0
 8006e94:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e96:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	639a      	str	r2, [r3, #56]	@ 0x38
 8006eaa:	e005      	b.n	8006eb8 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006eb8:	7fbb      	ldrb	r3, [r7, #30]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d10b      	bne.n	8006ed6 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f043 0206 	orr.w	r2, r3, #6
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f043 0220 	orr.w	r2, r3, #32
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ee2:	b004      	add	sp, #16
 8006ee4:	4770      	bx	lr

08006ee6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f043 0201 	orr.w	r2, r3, #1
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f023 0201 	bic.w	r2, r3, #1
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	460b      	mov	r3, r1
 8006f34:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d115      	bne.n	8006f78 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f58:	200a      	movs	r0, #10
 8006f5a:	f7fa ff0f 	bl	8001d7c <HAL_Delay>
      ms += 10U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	330a      	adds	r3, #10
 8006f62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f956 	bl	8007216 <USB_GetMode>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d01e      	beq.n	8006fae <USB_SetCurrentMode+0x84>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f74:	d9f0      	bls.n	8006f58 <USB_SetCurrentMode+0x2e>
 8006f76:	e01a      	b.n	8006fae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d115      	bne.n	8006faa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f8a:	200a      	movs	r0, #10
 8006f8c:	f7fa fef6 	bl	8001d7c <HAL_Delay>
      ms += 10U;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	330a      	adds	r3, #10
 8006f94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f93d 	bl	8007216 <USB_GetMode>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d005      	beq.n	8006fae <USB_SetCurrentMode+0x84>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2bc7      	cmp	r3, #199	@ 0xc7
 8006fa6:	d9f0      	bls.n	8006f8a <USB_SetCurrentMode+0x60>
 8006fa8:	e001      	b.n	8006fae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e005      	b.n	8006fba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2bc8      	cmp	r3, #200	@ 0xc8
 8006fb2:	d101      	bne.n	8006fb8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b085      	sub	sp, #20
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fdc:	d901      	bls.n	8006fe2 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e01b      	b.n	800701a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	daf2      	bge.n	8006fd0 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	019b      	lsls	r3, r3, #6
 8006ff2:	f043 0220 	orr.w	r2, r3, #32
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007006:	d901      	bls.n	800700c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e006      	b.n	800701a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	f003 0320 	and.w	r3, r3, #32
 8007014:	2b20      	cmp	r3, #32
 8007016:	d0f0      	beq.n	8006ffa <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007026:	b480      	push	{r7}
 8007028:	b085      	sub	sp, #20
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3301      	adds	r3, #1
 8007036:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800703e:	d901      	bls.n	8007044 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e018      	b.n	8007076 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	daf2      	bge.n	8007032 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2210      	movs	r2, #16
 8007054:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3301      	adds	r3, #1
 800705a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007062:	d901      	bls.n	8007068 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e006      	b.n	8007076 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	f003 0310 	and.w	r3, r3, #16
 8007070:	2b10      	cmp	r3, #16
 8007072:	d0f0      	beq.n	8007056 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007082:	b480      	push	{r7}
 8007084:	b089      	sub	sp, #36	@ 0x24
 8007086:	af00      	add	r7, sp, #0
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	4611      	mov	r1, r2
 800708e:	461a      	mov	r2, r3
 8007090:	460b      	mov	r3, r1
 8007092:	71fb      	strb	r3, [r7, #7]
 8007094:	4613      	mov	r3, r2
 8007096:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80070a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d123      	bne.n	80070f0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80070a8:	88bb      	ldrh	r3, [r7, #4]
 80070aa:	3303      	adds	r3, #3
 80070ac:	089b      	lsrs	r3, r3, #2
 80070ae:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80070b0:	2300      	movs	r3, #0
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	e018      	b.n	80070e8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80070b6:	79fb      	ldrb	r3, [r7, #7]
 80070b8:	031a      	lsls	r2, r3, #12
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070c2:	461a      	mov	r2, r3
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	3301      	adds	r3, #1
 80070ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	3301      	adds	r3, #1
 80070d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	3301      	adds	r3, #1
 80070da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	3301      	adds	r3, #1
 80070e0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	3301      	adds	r3, #1
 80070e6:	61bb      	str	r3, [r7, #24]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d3e2      	bcc.n	80070b6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3724      	adds	r7, #36	@ 0x24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80070fe:	b480      	push	{r7}
 8007100:	b08b      	sub	sp, #44	@ 0x2c
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	4613      	mov	r3, r2
 800710a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007114:	88fb      	ldrh	r3, [r7, #6]
 8007116:	089b      	lsrs	r3, r3, #2
 8007118:	b29b      	uxth	r3, r3
 800711a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007124:	2300      	movs	r3, #0
 8007126:	623b      	str	r3, [r7, #32]
 8007128:	e014      	b.n	8007154 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007134:	601a      	str	r2, [r3, #0]
    pDest++;
 8007136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007138:	3301      	adds	r3, #1
 800713a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	3301      	adds	r3, #1
 8007140:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007144:	3301      	adds	r3, #1
 8007146:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714a:	3301      	adds	r3, #1
 800714c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	3301      	adds	r3, #1
 8007152:	623b      	str	r3, [r7, #32]
 8007154:	6a3a      	ldr	r2, [r7, #32]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	429a      	cmp	r2, r3
 800715a:	d3e6      	bcc.n	800712a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800715c:	8bfb      	ldrh	r3, [r7, #30]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d01e      	beq.n	80071a0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800716c:	461a      	mov	r2, r3
 800716e:	f107 0310 	add.w	r3, r7, #16
 8007172:	6812      	ldr	r2, [r2, #0]
 8007174:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	fa22 f303 	lsr.w	r3, r2, r3
 8007182:	b2da      	uxtb	r2, r3
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	701a      	strb	r2, [r3, #0]
      i++;
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	3301      	adds	r3, #1
 800718c:	623b      	str	r3, [r7, #32]
      pDest++;
 800718e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007190:	3301      	adds	r3, #1
 8007192:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007194:	8bfb      	ldrh	r3, [r7, #30]
 8007196:	3b01      	subs	r3, #1
 8007198:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800719a:	8bfb      	ldrh	r3, [r7, #30]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1ea      	bne.n	8007176 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80071a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	372c      	adds	r7, #44	@ 0x2c
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4013      	ands	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80071c6:	68fb      	ldr	r3, [r7, #12]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80071e4:	78fb      	ldrb	r3, [r7, #3]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	4013      	ands	r3, r2
 8007206:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007208:	68bb      	ldr	r3, [r7, #8]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	f003 0301 	and.w	r3, r3, #1
}
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007232:	b480      	push	{r7}
 8007234:	b085      	sub	sp, #20
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800724a:	d901      	bls.n	8007250 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e01b      	b.n	8007288 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	daf2      	bge.n	800723e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f043 0201 	orr.w	r2, r3, #1
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3301      	adds	r3, #1
 800726c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007274:	d901      	bls.n	800727a <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e006      	b.n	8007288 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b01      	cmp	r3, #1
 8007284:	d0f0      	beq.n	8007268 <USB_CoreReset+0x36>

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007294:	b084      	sub	sp, #16
 8007296:	b580      	push	{r7, lr}
 8007298:	b086      	sub	sp, #24
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80072a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072b4:	461a      	mov	r2, r3
 80072b6:	2300      	movs	r3, #0
 80072b8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d119      	bne.n	800731e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80072ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d10a      	bne.n	8007308 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007300:	f043 0304 	orr.w	r3, r3, #4
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	e014      	b.n	8007332 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007316:	f023 0304 	bic.w	r3, r3, #4
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	e009      	b.n	8007332 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800732c:	f023 0304 	bic.w	r3, r3, #4
 8007330:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007332:	2110      	movs	r1, #16
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff fe44 	bl	8006fc2 <USB_FlushTxFifo>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff fe6e 	bl	8007026 <USB_FlushRxFifo>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007354:	2300      	movs	r3, #0
 8007356:	613b      	str	r3, [r7, #16]
 8007358:	e015      	b.n	8007386 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007366:	461a      	mov	r2, r3
 8007368:	f04f 33ff 	mov.w	r3, #4294967295
 800736c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4413      	add	r3, r2
 8007376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800737a:	461a      	mov	r2, r3
 800737c:	2300      	movs	r3, #0
 800737e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	3301      	adds	r3, #1
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800738a:	461a      	mov	r2, r3
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	4293      	cmp	r3, r2
 8007390:	d3e3      	bcc.n	800735a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f04f 32ff 	mov.w	r2, #4294967295
 800739e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a18      	ldr	r2, [pc, #96]	@ (8007404 <USB_HostInit+0x170>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d10b      	bne.n	80073c0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073ae:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a15      	ldr	r2, [pc, #84]	@ (8007408 <USB_HostInit+0x174>)
 80073b4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a14      	ldr	r2, [pc, #80]	@ (800740c <USB_HostInit+0x178>)
 80073ba:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80073be:	e009      	b.n	80073d4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2280      	movs	r2, #128	@ 0x80
 80073c4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a11      	ldr	r2, [pc, #68]	@ (8007410 <USB_HostInit+0x17c>)
 80073ca:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a11      	ldr	r2, [pc, #68]	@ (8007414 <USB_HostInit+0x180>)
 80073d0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d105      	bne.n	80073e8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	f043 0210 	orr.w	r2, r3, #16
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699a      	ldr	r2, [r3, #24]
 80073ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007418 <USB_HostInit+0x184>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007400:	b004      	add	sp, #16
 8007402:	4770      	bx	lr
 8007404:	40040000 	.word	0x40040000
 8007408:	01000200 	.word	0x01000200
 800740c:	00e00300 	.word	0x00e00300
 8007410:	00600080 	.word	0x00600080
 8007414:	004000e0 	.word	0x004000e0
 8007418:	a3200008 	.word	0xa3200008

0800741c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800743a:	f023 0303 	bic.w	r3, r3, #3
 800743e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	78fb      	ldrb	r3, [r7, #3]
 800744a:	f003 0303 	and.w	r3, r3, #3
 800744e:	68f9      	ldr	r1, [r7, #12]
 8007450:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007454:	4313      	orrs	r3, r2
 8007456:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d107      	bne.n	800746e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007464:	461a      	mov	r2, r3
 8007466:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800746a:	6053      	str	r3, [r2, #4]
 800746c:	e00c      	b.n	8007488 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800746e:	78fb      	ldrb	r3, [r7, #3]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d107      	bne.n	8007484 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800747a:	461a      	mov	r2, r3
 800747c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007480:	6053      	str	r3, [r2, #4]
 8007482:	e001      	b.n	8007488 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e000      	b.n	800748a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80074b6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80074c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074c4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80074c6:	2064      	movs	r0, #100	@ 0x64
 80074c8:	f7fa fc58 	bl	8001d7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80074d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074d8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80074da:	200a      	movs	r0, #10
 80074dc:	f7fa fc4e 	bl	8001d7c <HAL_Delay>

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b085      	sub	sp, #20
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	460b      	mov	r3, r1
 80074f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80074fa:	2300      	movs	r3, #0
 80074fc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800750e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d109      	bne.n	800752e <USB_DriveVbus+0x44>
 800751a:	78fb      	ldrb	r3, [r7, #3]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d106      	bne.n	800752e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007528:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800752c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007538:	d109      	bne.n	800754e <USB_DriveVbus+0x64>
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d106      	bne.n	800754e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007548:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800754c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	0c5b      	lsrs	r3, r3, #17
 800757a:	f003 0303 	and.w	r3, r3, #3
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800758a:	b480      	push	{r7}
 800758c:	b085      	sub	sp, #20
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	b29b      	uxth	r3, r3
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	4608      	mov	r0, r1
 80075b6:	4611      	mov	r1, r2
 80075b8:	461a      	mov	r2, r3
 80075ba:	4603      	mov	r3, r0
 80075bc:	70fb      	strb	r3, [r7, #3]
 80075be:	460b      	mov	r3, r1
 80075c0:	70bb      	strb	r3, [r7, #2]
 80075c2:	4613      	mov	r3, r2
 80075c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80075ce:	78fb      	ldrb	r3, [r7, #3]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075da:	461a      	mov	r2, r3
 80075dc:	f04f 33ff 	mov.w	r3, #4294967295
 80075e0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80075e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d87c      	bhi.n	80076e4 <USB_HC_Init+0x138>
 80075ea:	a201      	add	r2, pc, #4	@ (adr r2, 80075f0 <USB_HC_Init+0x44>)
 80075ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f0:	08007601 	.word	0x08007601
 80075f4:	080076a7 	.word	0x080076a7
 80075f8:	08007601 	.word	0x08007601
 80075fc:	08007669 	.word	0x08007669
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	4413      	add	r3, r2
 8007608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800760c:	461a      	mov	r2, r3
 800760e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007612:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007614:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007618:	2b00      	cmp	r3, #0
 800761a:	da10      	bge.n	800763e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800761c:	78fb      	ldrb	r3, [r7, #3]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	4413      	add	r3, r2
 8007624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	78fa      	ldrb	r2, [r7, #3]
 800762c:	0151      	lsls	r1, r2, #5
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	440a      	add	r2, r1
 8007632:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800763a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800763c:	e055      	b.n	80076ea <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a6f      	ldr	r2, [pc, #444]	@ (8007800 <USB_HC_Init+0x254>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d151      	bne.n	80076ea <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007646:	78fb      	ldrb	r3, [r7, #3]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	4413      	add	r3, r2
 800764e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	78fa      	ldrb	r2, [r7, #3]
 8007656:	0151      	lsls	r1, r2, #5
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	440a      	add	r2, r1
 800765c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007660:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007664:	60d3      	str	r3, [r2, #12]
      break;
 8007666:	e040      	b.n	80076ea <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007668:	78fb      	ldrb	r3, [r7, #3]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	4413      	add	r3, r2
 8007670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007674:	461a      	mov	r2, r3
 8007676:	f240 639d 	movw	r3, #1693	@ 0x69d
 800767a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800767c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007680:	2b00      	cmp	r3, #0
 8007682:	da34      	bge.n	80076ee <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	4413      	add	r3, r2
 800768c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	78fa      	ldrb	r2, [r7, #3]
 8007694:	0151      	lsls	r1, r2, #5
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	440a      	add	r2, r1
 800769a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800769e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80076a4:	e023      	b.n	80076ee <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076b2:	461a      	mov	r2, r3
 80076b4:	f240 2325 	movw	r3, #549	@ 0x225
 80076b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80076ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	da17      	bge.n	80076f2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80076c2:	78fb      	ldrb	r3, [r7, #3]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	78fa      	ldrb	r2, [r7, #3]
 80076d2:	0151      	lsls	r1, r2, #5
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	440a      	add	r2, r1
 80076d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076dc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80076e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80076e2:	e006      	b.n	80076f2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	77fb      	strb	r3, [r7, #31]
      break;
 80076e8:	e004      	b.n	80076f4 <USB_HC_Init+0x148>
      break;
 80076ea:	bf00      	nop
 80076ec:	e002      	b.n	80076f4 <USB_HC_Init+0x148>
      break;
 80076ee:	bf00      	nop
 80076f0:	e000      	b.n	80076f4 <USB_HC_Init+0x148>
      break;
 80076f2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80076f4:	78fb      	ldrb	r3, [r7, #3]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007700:	461a      	mov	r2, r3
 8007702:	2300      	movs	r3, #0
 8007704:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007706:	78fb      	ldrb	r3, [r7, #3]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	4413      	add	r3, r2
 800770e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	78fa      	ldrb	r2, [r7, #3]
 8007716:	0151      	lsls	r1, r2, #5
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	440a      	add	r2, r1
 800771c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007720:	f043 0302 	orr.w	r3, r3, #2
 8007724:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	f003 030f 	and.w	r3, r3, #15
 8007734:	2101      	movs	r1, #1
 8007736:	fa01 f303 	lsl.w	r3, r1, r3
 800773a:	6939      	ldr	r1, [r7, #16]
 800773c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007740:	4313      	orrs	r3, r2
 8007742:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007750:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007754:	2b00      	cmp	r3, #0
 8007756:	da03      	bge.n	8007760 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007758:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800775c:	61bb      	str	r3, [r7, #24]
 800775e:	e001      	b.n	8007764 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7ff fef9 	bl	800755c <USB_GetHostSpeed>
 800776a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800776c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007770:	2b02      	cmp	r3, #2
 8007772:	d106      	bne.n	8007782 <USB_HC_Init+0x1d6>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d003      	beq.n	8007782 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800777a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	e001      	b.n	8007786 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007786:	787b      	ldrb	r3, [r7, #1]
 8007788:	059b      	lsls	r3, r3, #22
 800778a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800778e:	78bb      	ldrb	r3, [r7, #2]
 8007790:	02db      	lsls	r3, r3, #11
 8007792:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007796:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007798:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800779c:	049b      	lsls	r3, r3, #18
 800779e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80077a2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80077a4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80077a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80077aa:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	431a      	orrs	r2, r3
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80077b4:	78fa      	ldrb	r2, [r7, #3]
 80077b6:	0151      	lsls	r1, r2, #5
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	440a      	add	r2, r1
 80077bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80077c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80077c4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80077c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d003      	beq.n	80077d6 <USB_HC_Init+0x22a>
 80077ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d10f      	bne.n	80077f6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80077d6:	78fb      	ldrb	r3, [r7, #3]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	78fa      	ldrb	r2, [r7, #3]
 80077e6:	0151      	lsls	r1, r2, #5
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	440a      	add	r2, r1
 80077ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80077f4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80077f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3720      	adds	r7, #32
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	40040000 	.word	0x40040000

08007804 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08c      	sub	sp, #48	@ 0x30
 8007808:	af02      	add	r7, sp, #8
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	4613      	mov	r3, r2
 8007810:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	785b      	ldrb	r3, [r3, #1]
 800781a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800781c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007820:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4a5d      	ldr	r2, [pc, #372]	@ (800799c <USB_HC_StartXfer+0x198>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d12f      	bne.n	800788a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800782a:	79fb      	ldrb	r3, [r7, #7]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d11c      	bne.n	800786a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	7c9b      	ldrb	r3, [r3, #18]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <USB_HC_StartXfer+0x3c>
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	7c9b      	ldrb	r3, [r3, #18]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d124      	bne.n	800788a <USB_HC_StartXfer+0x86>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	799b      	ldrb	r3, [r3, #6]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d120      	bne.n	800788a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	4413      	add	r3, r2
 8007850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	0151      	lsls	r1, r2, #5
 800785a:	6a3a      	ldr	r2, [r7, #32]
 800785c:	440a      	add	r2, r1
 800785e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007866:	60d3      	str	r3, [r2, #12]
 8007868:	e00f      	b.n	800788a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	791b      	ldrb	r3, [r3, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10b      	bne.n	800788a <USB_HC_StartXfer+0x86>
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	795b      	ldrb	r3, [r3, #5]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d107      	bne.n	800788a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	785b      	ldrb	r3, [r3, #1]
 800787e:	4619      	mov	r1, r3
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 fb6b 	bl	8007f5c <USB_DoPing>
        return HAL_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	e232      	b.n	8007cf0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	799b      	ldrb	r3, [r3, #6]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d158      	bne.n	8007944 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007892:	2301      	movs	r3, #1
 8007894:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	78db      	ldrb	r3, [r3, #3]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d007      	beq.n	80078ae <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800789e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	8a92      	ldrh	r2, [r2, #20]
 80078a4:	fb03 f202 	mul.w	r2, r3, r2
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	61da      	str	r2, [r3, #28]
 80078ac:	e07c      	b.n	80079a8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	7c9b      	ldrb	r3, [r3, #18]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d130      	bne.n	8007918 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	2bbc      	cmp	r3, #188	@ 0xbc
 80078bc:	d918      	bls.n	80078f0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	8a9b      	ldrh	r3, [r3, #20]
 80078c2:	461a      	mov	r2, r3
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	69da      	ldr	r2, [r3, #28]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d003      	beq.n	80078e0 <USB_HC_StartXfer+0xdc>
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d103      	bne.n	80078e8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2202      	movs	r2, #2
 80078e4:	60da      	str	r2, [r3, #12]
 80078e6:	e05f      	b.n	80079a8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	2201      	movs	r2, #1
 80078ec:	60da      	str	r2, [r3, #12]
 80078ee:	e05b      	b.n	80079a8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	6a1a      	ldr	r2, [r3, #32]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d007      	beq.n	8007910 <USB_HC_StartXfer+0x10c>
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d003      	beq.n	8007910 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2204      	movs	r2, #4
 800790c:	60da      	str	r2, [r3, #12]
 800790e:	e04b      	b.n	80079a8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2203      	movs	r2, #3
 8007914:	60da      	str	r2, [r3, #12]
 8007916:	e047      	b.n	80079a8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d10d      	bne.n	800793a <USB_HC_StartXfer+0x136>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	8a92      	ldrh	r2, [r2, #20]
 8007926:	4293      	cmp	r3, r2
 8007928:	d907      	bls.n	800793a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800792a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	8a92      	ldrh	r2, [r2, #20]
 8007930:	fb03 f202 	mul.w	r2, r3, r2
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	61da      	str	r2, [r3, #28]
 8007938:	e036      	b.n	80079a8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	6a1a      	ldr	r2, [r3, #32]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	61da      	str	r2, [r3, #28]
 8007942:	e031      	b.n	80079a8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d018      	beq.n	800797e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	8a92      	ldrh	r2, [r2, #20]
 8007954:	4413      	add	r3, r2
 8007956:	3b01      	subs	r3, #1
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	8a92      	ldrh	r2, [r2, #20]
 800795c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007960:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007962:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007964:	8b7b      	ldrh	r3, [r7, #26]
 8007966:	429a      	cmp	r2, r3
 8007968:	d90b      	bls.n	8007982 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800796a:	8b7b      	ldrh	r3, [r7, #26]
 800796c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800796e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	8a92      	ldrh	r2, [r2, #20]
 8007974:	fb03 f202 	mul.w	r2, r3, r2
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	61da      	str	r2, [r3, #28]
 800797c:	e001      	b.n	8007982 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800797e:	2301      	movs	r3, #1
 8007980:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	78db      	ldrb	r3, [r3, #3]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800798a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	8a92      	ldrh	r2, [r2, #20]
 8007990:	fb03 f202 	mul.w	r2, r3, r2
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	61da      	str	r2, [r3, #28]
 8007998:	e006      	b.n	80079a8 <USB_HC_StartXfer+0x1a4>
 800799a:	bf00      	nop
 800799c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	6a1a      	ldr	r2, [r3, #32]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80079b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80079b2:	04d9      	lsls	r1, r3, #19
 80079b4:	4ba3      	ldr	r3, [pc, #652]	@ (8007c44 <USB_HC_StartXfer+0x440>)
 80079b6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079b8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	7d9b      	ldrb	r3, [r3, #22]
 80079be:	075b      	lsls	r3, r3, #29
 80079c0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079c4:	69f9      	ldr	r1, [r7, #28]
 80079c6:	0148      	lsls	r0, r1, #5
 80079c8:	6a39      	ldr	r1, [r7, #32]
 80079ca:	4401      	add	r1, r0
 80079cc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80079d0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079d2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d009      	beq.n	80079ee <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6999      	ldr	r1, [r3, #24]
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079ea:	460a      	mov	r2, r1
 80079ec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bf0c      	ite	eq
 80079fe:	2301      	moveq	r3, #1
 8007a00:	2300      	movne	r3, #0
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69fa      	ldr	r2, [r7, #28]
 8007a16:	0151      	lsls	r1, r2, #5
 8007a18:	6a3a      	ldr	r2, [r7, #32]
 8007a1a:	440a      	add	r2, r1
 8007a1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a20:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a24:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	7e7b      	ldrb	r3, [r7, #25]
 8007a36:	075b      	lsls	r3, r3, #29
 8007a38:	69f9      	ldr	r1, [r7, #28]
 8007a3a:	0148      	lsls	r0, r1, #5
 8007a3c:	6a39      	ldr	r1, [r7, #32]
 8007a3e:	4401      	add	r1, r0
 8007a40:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007a44:	4313      	orrs	r3, r2
 8007a46:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	799b      	ldrb	r3, [r3, #6]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	f040 80c3 	bne.w	8007bd8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	7c5b      	ldrb	r3, [r3, #17]
 8007a56:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	69fa      	ldr	r2, [r7, #28]
 8007a60:	0151      	lsls	r1, r2, #5
 8007a62:	6a3a      	ldr	r2, [r7, #32]
 8007a64:	440a      	add	r2, r1
 8007a66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007a6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007a6e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	69fa      	ldr	r2, [r7, #28]
 8007a80:	0151      	lsls	r1, r2, #5
 8007a82:	6a3a      	ldr	r2, [r7, #32]
 8007a84:	440a      	add	r2, r1
 8007a86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a8a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007a8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	79db      	ldrb	r3, [r3, #7]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d123      	bne.n	8007ae0 <USB_HC_StartXfer+0x2dc>
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	78db      	ldrb	r3, [r3, #3]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d11f      	bne.n	8007ae0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	0151      	lsls	r1, r2, #5
 8007ab2:	6a3a      	ldr	r2, [r7, #32]
 8007ab4:	440a      	add	r2, r1
 8007ab6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007aba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007abe:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	69fa      	ldr	r2, [r7, #28]
 8007ad0:	0151      	lsls	r1, r2, #5
 8007ad2:	6a3a      	ldr	r2, [r7, #32]
 8007ad4:	440a      	add	r2, r1
 8007ad6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ade:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	7c9b      	ldrb	r3, [r3, #18]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d003      	beq.n	8007af0 <USB_HC_StartXfer+0x2ec>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	7c9b      	ldrb	r3, [r3, #18]
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d117      	bne.n	8007b20 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d113      	bne.n	8007b20 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	78db      	ldrb	r3, [r3, #3]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d10f      	bne.n	8007b20 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	0151      	lsls	r1, r2, #5
 8007b12:	6a3a      	ldr	r2, [r7, #32]
 8007b14:	440a      	add	r2, r1
 8007b16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b1e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	7c9b      	ldrb	r3, [r3, #18]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d162      	bne.n	8007bee <USB_HC_StartXfer+0x3ea>
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	78db      	ldrb	r3, [r3, #3]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d15e      	bne.n	8007bee <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d858      	bhi.n	8007bec <USB_HC_StartXfer+0x3e8>
 8007b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b40 <USB_HC_StartXfer+0x33c>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b73 	.word	0x08007b73
 8007b48:	08007b95 	.word	0x08007b95
 8007b4c:	08007bb7 	.word	0x08007bb7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	0151      	lsls	r1, r2, #5
 8007b62:	6a3a      	ldr	r2, [r7, #32]
 8007b64:	440a      	add	r2, r1
 8007b66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b6e:	6053      	str	r3, [r2, #4]
          break;
 8007b70:	e03d      	b.n	8007bee <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	69fa      	ldr	r2, [r7, #28]
 8007b82:	0151      	lsls	r1, r2, #5
 8007b84:	6a3a      	ldr	r2, [r7, #32]
 8007b86:	440a      	add	r2, r1
 8007b88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b8c:	f043 030e 	orr.w	r3, r3, #14
 8007b90:	6053      	str	r3, [r2, #4]
          break;
 8007b92:	e02c      	b.n	8007bee <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	69fa      	ldr	r2, [r7, #28]
 8007ba4:	0151      	lsls	r1, r2, #5
 8007ba6:	6a3a      	ldr	r2, [r7, #32]
 8007ba8:	440a      	add	r2, r1
 8007baa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007bb2:	6053      	str	r3, [r2, #4]
          break;
 8007bb4:	e01b      	b.n	8007bee <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	69fa      	ldr	r2, [r7, #28]
 8007bc6:	0151      	lsls	r1, r2, #5
 8007bc8:	6a3a      	ldr	r2, [r7, #32]
 8007bca:	440a      	add	r2, r1
 8007bcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007bd4:	6053      	str	r3, [r2, #4]
          break;
 8007bd6:	e00a      	b.n	8007bee <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007be4:	461a      	mov	r2, r3
 8007be6:	2300      	movs	r3, #0
 8007be8:	6053      	str	r3, [r2, #4]
 8007bea:	e000      	b.n	8007bee <USB_HC_StartXfer+0x3ea>
          break;
 8007bec:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c04:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	78db      	ldrb	r3, [r3, #3]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d004      	beq.n	8007c18 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c14:	613b      	str	r3, [r7, #16]
 8007c16:	e003      	b.n	8007c20 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c1e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c26:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c34:	461a      	mov	r2, r3
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007c3a:	79fb      	ldrb	r3, [r7, #7]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	e055      	b.n	8007cf0 <USB_HC_StartXfer+0x4ec>
 8007c44:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	78db      	ldrb	r3, [r3, #3]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d14e      	bne.n	8007cee <USB_HC_StartXfer+0x4ea>
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d04a      	beq.n	8007cee <USB_HC_StartXfer+0x4ea>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	79db      	ldrb	r3, [r3, #7]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d146      	bne.n	8007cee <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	7c9b      	ldrb	r3, [r3, #18]
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d831      	bhi.n	8007ccc <USB_HC_StartXfer+0x4c8>
 8007c68:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <USB_HC_StartXfer+0x46c>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007c81 	.word	0x08007c81
 8007c74:	08007ca5 	.word	0x08007ca5
 8007c78:	08007c81 	.word	0x08007c81
 8007c7c:	08007ca5 	.word	0x08007ca5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	6a1b      	ldr	r3, [r3, #32]
 8007c84:	3303      	adds	r3, #3
 8007c86:	089b      	lsrs	r3, r3, #2
 8007c88:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007c8a:	8afa      	ldrh	r2, [r7, #22]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d91c      	bls.n	8007cd0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	f043 0220 	orr.w	r2, r3, #32
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007ca2:	e015      	b.n	8007cd0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	3303      	adds	r3, #3
 8007caa:	089b      	lsrs	r3, r3, #2
 8007cac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007cae:	8afa      	ldrh	r2, [r7, #22]
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d90a      	bls.n	8007cd4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	619a      	str	r2, [r3, #24]
        }
        break;
 8007cca:	e003      	b.n	8007cd4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007ccc:	bf00      	nop
 8007cce:	e002      	b.n	8007cd6 <USB_HC_StartXfer+0x4d2>
        break;
 8007cd0:	bf00      	nop
 8007cd2:	e000      	b.n	8007cd6 <USB_HC_StartXfer+0x4d2>
        break;
 8007cd4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	6999      	ldr	r1, [r3, #24]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	785a      	ldrb	r2, [r3, #1]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	9000      	str	r0, [sp, #0]
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7ff f9ca 	bl	8007082 <USB_WritePacket>
  }

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3728      	adds	r7, #40	@ 0x28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	b29b      	uxth	r3, r3
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b089      	sub	sp, #36	@ 0x24
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	0c9b      	lsrs	r3, r3, #18
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	0fdb      	lsrs	r3, r3, #31
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	0fdb      	lsrs	r3, r3, #31
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f003 0320 	and.w	r3, r3, #32
 8007d7c:	2b20      	cmp	r3, #32
 8007d7e:	d10d      	bne.n	8007d9c <USB_HC_Halt+0x82>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <USB_HC_Halt+0x82>
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d005      	beq.n	8007d98 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d002      	beq.n	8007d98 <USB_HC_Halt+0x7e>
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d101      	bne.n	8007d9c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	e0d8      	b.n	8007f4e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <USB_HC_Halt+0x8e>
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d173      	bne.n	8007e90 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	0151      	lsls	r1, r2, #5
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	440a      	add	r2, r1
 8007dbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dc2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007dc6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f003 0320 	and.w	r3, r3, #32
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d14a      	bne.n	8007e6a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d133      	bne.n	8007e48 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	0151      	lsls	r1, r2, #5
 8007df2:	69fa      	ldr	r2, [r7, #28]
 8007df4:	440a      	add	r2, r1
 8007df6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dfa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007dfe:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	0151      	lsls	r1, r2, #5
 8007e12:	69fa      	ldr	r2, [r7, #28]
 8007e14:	440a      	add	r2, r1
 8007e16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e1e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	3301      	adds	r3, #1
 8007e24:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e2c:	d82e      	bhi.n	8007e8c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e44:	d0ec      	beq.n	8007e20 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e46:	e081      	b.n	8007f4c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	0151      	lsls	r1, r2, #5
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	440a      	add	r2, r1
 8007e5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e66:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e68:	e070      	b.n	8007f4c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	0151      	lsls	r1, r2, #5
 8007e7c:	69fa      	ldr	r2, [r7, #28]
 8007e7e:	440a      	add	r2, r1
 8007e80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e88:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e8a:	e05f      	b.n	8007f4c <USB_HC_Halt+0x232>
            break;
 8007e8c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e8e:	e05d      	b.n	8007f4c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	0151      	lsls	r1, r2, #5
 8007ea2:	69fa      	ldr	r2, [r7, #28]
 8007ea4:	440a      	add	r2, r1
 8007ea6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eaa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007eae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d133      	bne.n	8007f28 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	0151      	lsls	r1, r2, #5
 8007ed2:	69fa      	ldr	r2, [r7, #28]
 8007ed4:	440a      	add	r2, r1
 8007ed6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ede:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007efa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007efe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	3301      	adds	r3, #1
 8007f04:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f0c:	d81d      	bhi.n	8007f4a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f24:	d0ec      	beq.n	8007f00 <USB_HC_Halt+0x1e6>
 8007f26:	e011      	b.n	8007f4c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	0151      	lsls	r1, r2, #5
 8007f3a:	69fa      	ldr	r2, [r7, #28]
 8007f3c:	440a      	add	r2, r1
 8007f3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	e000      	b.n	8007f4c <USB_HC_Halt+0x232>
          break;
 8007f4a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3724      	adds	r7, #36	@ 0x24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
	...

08007f5c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007f70:	2301      	movs	r3, #1
 8007f72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	04da      	lsls	r2, r3, #19
 8007f78:	4b15      	ldr	r3, [pc, #84]	@ (8007fd0 <USB_DoPing+0x74>)
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	0151      	lsls	r1, r2, #5
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	440a      	add	r2, r1
 8007f84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f8c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007fa4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	015a      	lsls	r2, r3, #5
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fba:	461a      	mov	r2, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	371c      	adds	r7, #28
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	1ff80000 	.word	0x1ff80000

08007fd4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7fe ff8d 	bl	8006f08 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007fee:	2110      	movs	r1, #16
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7fe ffe6 	bl	8006fc2 <USB_FlushTxFifo>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff f810 	bl	8007026 <USB_FlushRxFifo>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008010:	2300      	movs	r3, #0
 8008012:	61bb      	str	r3, [r7, #24]
 8008014:	e01f      	b.n	8008056 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	4413      	add	r3, r2
 800801e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800802c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008034:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800803c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	4413      	add	r3, r2
 8008046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800804a:	461a      	mov	r2, r3
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	3301      	adds	r3, #1
 8008054:	61bb      	str	r3, [r7, #24]
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b0f      	cmp	r3, #15
 800805a:	d9dc      	bls.n	8008016 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800805c:	2300      	movs	r3, #0
 800805e:	61bb      	str	r3, [r7, #24]
 8008060:	e034      	b.n	80080cc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	4413      	add	r3, r2
 800806a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008078:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008080:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008088:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	4413      	add	r3, r2
 8008092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008096:	461a      	mov	r2, r3
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3301      	adds	r3, #1
 80080a0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080a8:	d80c      	bhi.n	80080c4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080c0:	d0ec      	beq.n	800809c <USB_StopHost+0xc8>
 80080c2:	e000      	b.n	80080c6 <USB_StopHost+0xf2>
        break;
 80080c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	3301      	adds	r3, #1
 80080ca:	61bb      	str	r3, [r7, #24]
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	2b0f      	cmp	r3, #15
 80080d0:	d9c7      	bls.n	8008062 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080d8:	461a      	mov	r2, r3
 80080da:	f04f 33ff 	mov.w	r3, #4294967295
 80080de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f04f 32ff 	mov.w	r2, #4294967295
 80080e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7fe fefc 	bl	8006ee6 <USB_EnableGlobalInt>

  return ret;
 80080ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3720      	adds	r7, #32
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80080f8:	b590      	push	{r4, r7, lr}
 80080fa:	b089      	sub	sp, #36	@ 0x24
 80080fc:	af04      	add	r7, sp, #16
 80080fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008100:	2301      	movs	r3, #1
 8008102:	2202      	movs	r2, #2
 8008104:	2102      	movs	r1, #2
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fc85 	bl	8008a16 <USBH_FindInterface>
 800810c:	4603      	mov	r3, r0
 800810e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008110:	7bfb      	ldrb	r3, [r7, #15]
 8008112:	2bff      	cmp	r3, #255	@ 0xff
 8008114:	d002      	beq.n	800811c <USBH_CDC_InterfaceInit+0x24>
 8008116:	7bfb      	ldrb	r3, [r7, #15]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d901      	bls.n	8008120 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800811c:	2302      	movs	r3, #2
 800811e:	e13d      	b.n	800839c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fc5a 	bl	80089de <USBH_SelectInterface>
 800812a:	4603      	mov	r3, r0
 800812c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008134:	2302      	movs	r3, #2
 8008136:	e131      	b.n	800839c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800813e:	2050      	movs	r0, #80	@ 0x50
 8008140:	f002 fb64 	bl	800a80c <malloc>
 8008144:	4603      	mov	r3, r0
 8008146:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800814e:	69db      	ldr	r3, [r3, #28]
 8008150:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008158:	2302      	movs	r3, #2
 800815a:	e11f      	b.n	800839c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800815c:	2250      	movs	r2, #80	@ 0x50
 800815e:	2100      	movs	r1, #0
 8008160:	68b8      	ldr	r0, [r7, #8]
 8008162:	f002 fc11 	bl	800a988 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	211a      	movs	r1, #26
 800816c:	fb01 f303 	mul.w	r3, r1, r3
 8008170:	4413      	add	r3, r2
 8008172:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	b25b      	sxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	da15      	bge.n	80081aa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	211a      	movs	r1, #26
 8008184:	fb01 f303 	mul.w	r3, r1, r3
 8008188:	4413      	add	r3, r2
 800818a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800818e:	781a      	ldrb	r2, [r3, #0]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	211a      	movs	r1, #26
 800819a:	fb01 f303 	mul.w	r3, r1, r3
 800819e:	4413      	add	r3, r2
 80081a0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80081a4:	881a      	ldrh	r2, [r3, #0]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	785b      	ldrb	r3, [r3, #1]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 ffbe 	bl	800a132 <USBH_AllocPipe>
 80081b6:	4603      	mov	r3, r0
 80081b8:	461a      	mov	r2, r3
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	7819      	ldrb	r1, [r3, #0]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	7858      	ldrb	r0, [r3, #1]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	8952      	ldrh	r2, [r2, #10]
 80081d6:	9202      	str	r2, [sp, #8]
 80081d8:	2203      	movs	r2, #3
 80081da:	9201      	str	r2, [sp, #4]
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	4623      	mov	r3, r4
 80081e0:	4602      	mov	r2, r0
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f001 ff76 	bl	800a0d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2200      	movs	r2, #0
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f002 fa85 	bl	800a700 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80081f6:	2300      	movs	r3, #0
 80081f8:	2200      	movs	r2, #0
 80081fa:	210a      	movs	r1, #10
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fc0a 	bl	8008a16 <USBH_FindInterface>
 8008202:	4603      	mov	r3, r0
 8008204:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	2bff      	cmp	r3, #255	@ 0xff
 800820a:	d002      	beq.n	8008212 <USBH_CDC_InterfaceInit+0x11a>
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d901      	bls.n	8008216 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008212:	2302      	movs	r3, #2
 8008214:	e0c2      	b.n	800839c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	211a      	movs	r1, #26
 800821c:	fb01 f303 	mul.w	r3, r1, r3
 8008220:	4413      	add	r3, r2
 8008222:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	b25b      	sxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	da16      	bge.n	800825c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	211a      	movs	r1, #26
 8008234:	fb01 f303 	mul.w	r3, r1, r3
 8008238:	4413      	add	r3, r2
 800823a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800823e:	781a      	ldrb	r2, [r3, #0]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	211a      	movs	r1, #26
 800824a:	fb01 f303 	mul.w	r3, r1, r3
 800824e:	4413      	add	r3, r2
 8008250:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008254:	881a      	ldrh	r2, [r3, #0]
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	835a      	strh	r2, [r3, #26]
 800825a:	e015      	b.n	8008288 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	211a      	movs	r1, #26
 8008262:	fb01 f303 	mul.w	r3, r1, r3
 8008266:	4413      	add	r3, r2
 8008268:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800826c:	781a      	ldrb	r2, [r3, #0]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008272:	7bfb      	ldrb	r3, [r7, #15]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	211a      	movs	r1, #26
 8008278:	fb01 f303 	mul.w	r3, r1, r3
 800827c:	4413      	add	r3, r2
 800827e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008282:	881a      	ldrh	r2, [r3, #0]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	211a      	movs	r1, #26
 800828e:	fb01 f303 	mul.w	r3, r1, r3
 8008292:	4413      	add	r3, r2
 8008294:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	b25b      	sxtb	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	da16      	bge.n	80082ce <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	211a      	movs	r1, #26
 80082a6:	fb01 f303 	mul.w	r3, r1, r3
 80082aa:	4413      	add	r3, r2
 80082ac:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80082b0:	781a      	ldrb	r2, [r3, #0]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	211a      	movs	r1, #26
 80082bc:	fb01 f303 	mul.w	r3, r1, r3
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80082c6:	881a      	ldrh	r2, [r3, #0]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	835a      	strh	r2, [r3, #26]
 80082cc:	e015      	b.n	80082fa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	211a      	movs	r1, #26
 80082d4:	fb01 f303 	mul.w	r3, r1, r3
 80082d8:	4413      	add	r3, r2
 80082da:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80082de:	781a      	ldrb	r2, [r3, #0]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	211a      	movs	r1, #26
 80082ea:	fb01 f303 	mul.w	r3, r1, r3
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80082f4:	881a      	ldrh	r2, [r3, #0]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	7b9b      	ldrb	r3, [r3, #14]
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f001 ff16 	bl	800a132 <USBH_AllocPipe>
 8008306:	4603      	mov	r3, r0
 8008308:	461a      	mov	r2, r3
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	7bdb      	ldrb	r3, [r3, #15]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 ff0c 	bl	800a132 <USBH_AllocPipe>
 800831a:	4603      	mov	r3, r0
 800831c:	461a      	mov	r2, r3
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	7b59      	ldrb	r1, [r3, #13]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	7b98      	ldrb	r0, [r3, #14]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	8b12      	ldrh	r2, [r2, #24]
 800833a:	9202      	str	r2, [sp, #8]
 800833c:	2202      	movs	r2, #2
 800833e:	9201      	str	r2, [sp, #4]
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	4623      	mov	r3, r4
 8008344:	4602      	mov	r2, r0
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 fec4 	bl	800a0d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	7b19      	ldrb	r1, [r3, #12]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	7bd8      	ldrb	r0, [r3, #15]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	8b52      	ldrh	r2, [r2, #26]
 8008364:	9202      	str	r2, [sp, #8]
 8008366:	2202      	movs	r2, #2
 8008368:	9201      	str	r2, [sp, #4]
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	4623      	mov	r3, r4
 800836e:	4602      	mov	r2, r0
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 feaf 	bl	800a0d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	7b5b      	ldrb	r3, [r3, #13]
 8008382:	2200      	movs	r2, #0
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f002 f9ba 	bl	800a700 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	7b1b      	ldrb	r3, [r3, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f002 f9b3 	bl	800a700 <USBH_LL_SetToggle>

  return USBH_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd90      	pop	{r4, r7, pc}

080083a4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00e      	beq.n	80083dc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 fea4 	bl	800a112 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 fecf 	bl	800a174 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	7b1b      	ldrb	r3, [r3, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00e      	beq.n	8008402 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	7b1b      	ldrb	r3, [r3, #12]
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f001 fe91 	bl	800a112 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	7b1b      	ldrb	r3, [r3, #12]
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f001 febc 	bl	800a174 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	7b5b      	ldrb	r3, [r3, #13]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00e      	beq.n	8008428 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	7b5b      	ldrb	r3, [r3, #13]
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 fe7e 	bl	800a112 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	7b5b      	ldrb	r3, [r3, #13]
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f001 fea9 	bl	800a174 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00b      	beq.n	800844c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	4618      	mov	r0, r3
 800843e:	f002 f9ed 	bl	800a81c <free>
    phost->pActiveClass->pData = 0U;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008448:	2200      	movs	r2, #0
 800844a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b084      	sub	sp, #16
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	3340      	adds	r3, #64	@ 0x40
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f8b1 	bl	80085d6 <GetLineCoding>
 8008474:	4603      	mov	r3, r0
 8008476:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008478:	7afb      	ldrb	r3, [r7, #11]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d105      	bne.n	800848a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008484:	2102      	movs	r1, #2
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800848a:	7afb      	ldrb	r3, [r7, #11]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800849c:	2301      	movs	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084aa:	69db      	ldr	r3, [r3, #28]
 80084ac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d877      	bhi.n	80085a8 <USBH_CDC_Process+0x114>
 80084b8:	a201      	add	r2, pc, #4	@ (adr r2, 80084c0 <USBH_CDC_Process+0x2c>)
 80084ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084be:	bf00      	nop
 80084c0:	080084d5 	.word	0x080084d5
 80084c4:	080084db 	.word	0x080084db
 80084c8:	0800850b 	.word	0x0800850b
 80084cc:	0800857f 	.word	0x0800857f
 80084d0:	0800858d 	.word	0x0800858d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
      break;
 80084d8:	e06d      	b.n	80085b6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f897 	bl	8008614 <SetLineCoding>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d104      	bne.n	80084fa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2202      	movs	r2, #2
 80084f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80084f8:	e058      	b.n	80085ac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d055      	beq.n	80085ac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2204      	movs	r2, #4
 8008504:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008508:	e050      	b.n	80085ac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	3340      	adds	r3, #64	@ 0x40
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f860 	bl	80085d6 <GetLineCoding>
 8008516:	4603      	mov	r3, r0
 8008518:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d126      	bne.n	800856e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008532:	791b      	ldrb	r3, [r3, #4]
 8008534:	429a      	cmp	r2, r3
 8008536:	d13b      	bne.n	80085b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008542:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008544:	429a      	cmp	r2, r3
 8008546:	d133      	bne.n	80085b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008552:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008554:	429a      	cmp	r2, r3
 8008556:	d12b      	bne.n	80085b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008560:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008562:	429a      	cmp	r2, r3
 8008564:	d124      	bne.n	80085b0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f958 	bl	800881c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800856c:	e020      	b.n	80085b0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d01d      	beq.n	80085b0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2204      	movs	r2, #4
 8008578:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800857c:	e018      	b.n	80085b0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f867 	bl	8008652 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f8da 	bl	800873e <CDC_ProcessReception>
      break;
 800858a:	e014      	b.n	80085b6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800858c:	2100      	movs	r1, #0
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f001 f81a 	bl	80095c8 <USBH_ClrFeature>
 8008594:	4603      	mov	r3, r0
 8008596:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10a      	bne.n	80085b4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80085a6:	e005      	b.n	80085b4 <USBH_CDC_Process+0x120>

    default:
      break;
 80085a8:	bf00      	nop
 80085aa:	e004      	b.n	80085b6 <USBH_CDC_Process+0x122>
      break;
 80085ac:	bf00      	nop
 80085ae:	e002      	b.n	80085b6 <USBH_CDC_Process+0x122>
      break;
 80085b0:	bf00      	nop
 80085b2:	e000      	b.n	80085b6 <USBH_CDC_Process+0x122>
      break;
 80085b4:	bf00      	nop

  }

  return status;
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	22a1      	movs	r2, #161	@ 0xa1
 80085e4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2221      	movs	r2, #33	@ 0x21
 80085ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2207      	movs	r2, #7
 80085fc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2207      	movs	r2, #7
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f001 fb14 	bl	8009c32 <USBH_CtlReq>
 800860a:	4603      	mov	r3, r0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2221      	movs	r2, #33	@ 0x21
 8008622:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2220      	movs	r2, #32
 8008628:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2207      	movs	r2, #7
 800863a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2207      	movs	r2, #7
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f001 faf5 	bl	8009c32 <USBH_CtlReq>
 8008648:	4603      	mov	r3, r0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b086      	sub	sp, #24
 8008656:	af02      	add	r7, sp, #8
 8008658:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008664:	2300      	movs	r3, #0
 8008666:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800866e:	2b01      	cmp	r3, #1
 8008670:	d002      	beq.n	8008678 <CDC_ProcessTransmission+0x26>
 8008672:	2b02      	cmp	r3, #2
 8008674:	d023      	beq.n	80086be <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008676:	e05e      	b.n	8008736 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	8b12      	ldrh	r2, [r2, #24]
 8008680:	4293      	cmp	r3, r2
 8008682:	d90b      	bls.n	800869c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	69d9      	ldr	r1, [r3, #28]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	8b1a      	ldrh	r2, [r3, #24]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	7b5b      	ldrb	r3, [r3, #13]
 8008690:	2001      	movs	r0, #1
 8008692:	9000      	str	r0, [sp, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 fcda 	bl	800a04e <USBH_BulkSendData>
 800869a:	e00b      	b.n	80086b4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	7b5b      	ldrb	r3, [r3, #13]
 80086aa:	2001      	movs	r0, #1
 80086ac:	9000      	str	r0, [sp, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 fccd 	bl	800a04e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2202      	movs	r2, #2
 80086b8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80086bc:	e03b      	b.n	8008736 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	7b5b      	ldrb	r3, [r3, #13]
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 fff1 	bl	800a6ac <USBH_LL_GetURBState>
 80086ca:	4603      	mov	r3, r0
 80086cc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80086ce:	7afb      	ldrb	r3, [r7, #11]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d128      	bne.n	8008726 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	8b12      	ldrh	r2, [r2, #24]
 80086dc:	4293      	cmp	r3, r2
 80086de:	d90e      	bls.n	80086fe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	8b12      	ldrh	r2, [r2, #24]
 80086e8:	1a9a      	subs	r2, r3, r2
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	8b12      	ldrh	r2, [r2, #24]
 80086f6:	441a      	add	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	61da      	str	r2, [r3, #28]
 80086fc:	e002      	b.n	8008704 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008708:	2b00      	cmp	r3, #0
 800870a:	d004      	beq.n	8008716 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008714:	e00e      	b.n	8008734 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f868 	bl	80087f4 <USBH_CDC_TransmitCallback>
      break;
 8008724:	e006      	b.n	8008734 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	2b02      	cmp	r3, #2
 800872a:	d103      	bne.n	8008734 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008734:	bf00      	nop
  }
}
 8008736:	bf00      	nop
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b086      	sub	sp, #24
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008750:	2300      	movs	r3, #0
 8008752:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800875a:	2b03      	cmp	r3, #3
 800875c:	d002      	beq.n	8008764 <CDC_ProcessReception+0x26>
 800875e:	2b04      	cmp	r3, #4
 8008760:	d00e      	beq.n	8008780 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008762:	e043      	b.n	80087ec <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	6a19      	ldr	r1, [r3, #32]
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	8b5a      	ldrh	r2, [r3, #26]
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	7b1b      	ldrb	r3, [r3, #12]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f001 fc91 	bl	800a098 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2204      	movs	r2, #4
 800877a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800877e:	e035      	b.n	80087ec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	7b1b      	ldrb	r3, [r3, #12]
 8008784:	4619      	mov	r1, r3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f001 ff90 	bl	800a6ac <USBH_LL_GetURBState>
 800878c:	4603      	mov	r3, r0
 800878e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008790:	7cfb      	ldrb	r3, [r7, #19]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d129      	bne.n	80087ea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	7b1b      	ldrb	r3, [r3, #12]
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f001 fef3 	bl	800a588 <USBH_LL_GetLastXferSize>
 80087a2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d016      	beq.n	80087dc <CDC_ProcessReception+0x9e>
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	8b5b      	ldrh	r3, [r3, #26]
 80087b2:	461a      	mov	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d110      	bne.n	80087dc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	1ad2      	subs	r2, r2, r3
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	6a1a      	ldr	r2, [r3, #32]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	441a      	add	r2, r3
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2203      	movs	r2, #3
 80087d6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80087da:	e006      	b.n	80087ea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f80f 	bl	8008808 <USBH_CDC_ReceiveCallback>
      break;
 80087ea:	bf00      	nop
  }
}
 80087ec:	bf00      	nop
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	4613      	mov	r3, r2
 800883c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008844:	2302      	movs	r3, #2
 8008846:	e029      	b.n	800889c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	79fa      	ldrb	r2, [r7, #7]
 800884c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f000 f81f 	bl	80088a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d003      	beq.n	8008894 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f001 fdc3 	bl	800a420 <USBH_LL_Init>

  return USBH_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80088b0:	2300      	movs	r3, #0
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e009      	b.n	80088ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	33e0      	adds	r3, #224	@ 0xe0
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	2200      	movs	r2, #0
 80088c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3301      	adds	r3, #1
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2b0f      	cmp	r3, #15
 80088ce:	d9f2      	bls.n	80088b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80088d0:	2300      	movs	r3, #0
 80088d2:	60fb      	str	r3, [r7, #12]
 80088d4:	e009      	b.n	80088ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80088e0:	2200      	movs	r2, #0
 80088e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3301      	adds	r3, #1
 80088e8:	60fb      	str	r3, [r7, #12]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088f0:	d3f1      	bcc.n	80088d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2240      	movs	r2, #64	@ 0x40
 8008916:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	331c      	adds	r3, #28
 8008942:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008946:	2100      	movs	r1, #0
 8008948:	4618      	mov	r0, r3
 800894a:	f002 f81d 	bl	800a988 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008958:	2100      	movs	r1, #0
 800895a:	4618      	mov	r0, r3
 800895c:	f002 f814 	bl	800a988 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008966:	2212      	movs	r2, #18
 8008968:	2100      	movs	r1, #0
 800896a:	4618      	mov	r0, r3
 800896c:	f002 f80c 	bl	800a988 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008976:	223e      	movs	r2, #62	@ 0x3e
 8008978:	2100      	movs	r1, #0
 800897a:	4618      	mov	r0, r3
 800897c:	f002 f804 	bl	800a988 <memset>

  return USBH_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800898a:	b480      	push	{r7}
 800898c:	b085      	sub	sp, #20
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d016      	beq.n	80089cc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10e      	bne.n	80089c6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80089ae:	1c59      	adds	r1, r3, #1
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	33de      	adds	r3, #222	@ 0xde
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73fb      	strb	r3, [r7, #15]
 80089c4:	e004      	b.n	80089d0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80089c6:	2302      	movs	r3, #2
 80089c8:	73fb      	strb	r3, [r7, #15]
 80089ca:	e001      	b.n	80089d0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80089cc:	2302      	movs	r3, #2
 80089ce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80089de:	b480      	push	{r7}
 80089e0:	b085      	sub	sp, #20
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80089f4:	78fa      	ldrb	r2, [r7, #3]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d204      	bcs.n	8008a04 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	78fa      	ldrb	r2, [r7, #3]
 80089fe:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008a02:	e001      	b.n	8008a08 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008a04:	2302      	movs	r3, #2
 8008a06:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b087      	sub	sp, #28
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	4608      	mov	r0, r1
 8008a20:	4611      	mov	r1, r2
 8008a22:	461a      	mov	r2, r3
 8008a24:	4603      	mov	r3, r0
 8008a26:	70fb      	strb	r3, [r7, #3]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	70bb      	strb	r3, [r7, #2]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a34:	2300      	movs	r3, #0
 8008a36:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008a3e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008a40:	e025      	b.n	8008a8e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
 8008a44:	221a      	movs	r2, #26
 8008a46:	fb02 f303 	mul.w	r3, r2, r3
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	4413      	add	r3, r2
 8008a50:	3302      	adds	r3, #2
 8008a52:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	795b      	ldrb	r3, [r3, #5]
 8008a58:	78fa      	ldrb	r2, [r7, #3]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d002      	beq.n	8008a64 <USBH_FindInterface+0x4e>
 8008a5e:	78fb      	ldrb	r3, [r7, #3]
 8008a60:	2bff      	cmp	r3, #255	@ 0xff
 8008a62:	d111      	bne.n	8008a88 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008a68:	78ba      	ldrb	r2, [r7, #2]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d002      	beq.n	8008a74 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a6e:	78bb      	ldrb	r3, [r7, #2]
 8008a70:	2bff      	cmp	r3, #255	@ 0xff
 8008a72:	d109      	bne.n	8008a88 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a78:	787a      	ldrb	r2, [r7, #1]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d002      	beq.n	8008a84 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008a7e:	787b      	ldrb	r3, [r7, #1]
 8008a80:	2bff      	cmp	r3, #255	@ 0xff
 8008a82:	d101      	bne.n	8008a88 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008a84:	7dfb      	ldrb	r3, [r7, #23]
 8008a86:	e006      	b.n	8008a96 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d9d6      	bls.n	8008a42 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008a94:	23ff      	movs	r3, #255	@ 0xff
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	371c      	adds	r7, #28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f001 fcf4 	bl	800a498 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f001 fe0d 	bl	800a6d2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af04      	add	r7, sp, #16
 8008aca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008acc:	2302      	movs	r3, #2
 8008ace:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d102      	bne.n	8008ae6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2203      	movs	r2, #3
 8008ae4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b0b      	cmp	r3, #11
 8008aee:	f200 81bb 	bhi.w	8008e68 <USBH_Process+0x3a4>
 8008af2:	a201      	add	r2, pc, #4	@ (adr r2, 8008af8 <USBH_Process+0x34>)
 8008af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af8:	08008b29 	.word	0x08008b29
 8008afc:	08008b5b 	.word	0x08008b5b
 8008b00:	08008bc3 	.word	0x08008bc3
 8008b04:	08008e03 	.word	0x08008e03
 8008b08:	08008e69 	.word	0x08008e69
 8008b0c:	08008c63 	.word	0x08008c63
 8008b10:	08008da9 	.word	0x08008da9
 8008b14:	08008c99 	.word	0x08008c99
 8008b18:	08008cb9 	.word	0x08008cb9
 8008b1c:	08008cd7 	.word	0x08008cd7
 8008b20:	08008d1b 	.word	0x08008d1b
 8008b24:	08008deb 	.word	0x08008deb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 819b 	beq.w	8008e6c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008b3c:	20c8      	movs	r0, #200	@ 0xc8
 8008b3e:	f001 fe12 	bl	800a766 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f001 fd05 	bl	800a552 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008b58:	e188      	b.n	8008e6c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d107      	bne.n	8008b74 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b72:	e18a      	b.n	8008e8a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008b7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b7e:	d914      	bls.n	8008baa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008b86:	3301      	adds	r3, #1
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d903      	bls.n	8008ba2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	220d      	movs	r2, #13
 8008b9e:	701a      	strb	r2, [r3, #0]
      break;
 8008ba0:	e173      	b.n	8008e8a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	701a      	strb	r2, [r3, #0]
      break;
 8008ba8:	e16f      	b.n	8008e8a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008bb0:	f103 020a 	add.w	r2, r3, #10
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008bba:	200a      	movs	r0, #10
 8008bbc:	f001 fdd3 	bl	800a766 <USBH_Delay>
      break;
 8008bc0:	e163      	b.n	8008e8a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d005      	beq.n	8008bd8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bd2:	2104      	movs	r1, #4
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008bd8:	2064      	movs	r0, #100	@ 0x64
 8008bda:	f001 fdc4 	bl	800a766 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f001 fc90 	bl	800a504 <USBH_LL_GetSpeed>
 8008be4:	4603      	mov	r3, r0
 8008be6:	461a      	mov	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2205      	movs	r2, #5
 8008bf2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 fa9b 	bl	800a132 <USBH_AllocPipe>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008c04:	2180      	movs	r1, #128	@ 0x80
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f001 fa93 	bl	800a132 <USBH_AllocPipe>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	7919      	ldrb	r1, [r3, #4]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008c28:	9202      	str	r2, [sp, #8]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	9201      	str	r2, [sp, #4]
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	4603      	mov	r3, r0
 8008c32:	2280      	movs	r2, #128	@ 0x80
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f001 fa4d 	bl	800a0d4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	7959      	ldrb	r1, [r3, #5]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008c4e:	9202      	str	r2, [sp, #8]
 8008c50:	2200      	movs	r2, #0
 8008c52:	9201      	str	r2, [sp, #4]
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	4603      	mov	r3, r0
 8008c58:	2200      	movs	r2, #0
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f001 fa3a 	bl	800a0d4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c60:	e113      	b.n	8008e8a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f916 	bl	8008e94 <USBH_HandleEnum>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008c6c:	7bbb      	ldrb	r3, [r7, #14]
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f040 80fd 	bne.w	8008e70 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d103      	bne.n	8008c90 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2208      	movs	r2, #8
 8008c8c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008c8e:	e0ef      	b.n	8008e70 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2207      	movs	r2, #7
 8008c94:	701a      	strb	r2, [r3, #0]
      break;
 8008c96:	e0eb      	b.n	8008e70 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 80e8 	beq.w	8008e74 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008caa:	2101      	movs	r1, #1
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2208      	movs	r2, #8
 8008cb4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008cb6:	e0dd      	b.n	8008e74 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fc3a 	bl	800953a <USBH_SetCfg>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f040 80d5 	bne.w	8008e78 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2209      	movs	r2, #9
 8008cd2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008cd4:	e0d0      	b.n	8008e78 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008cdc:	f003 0320 	and.w	r3, r3, #32
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d016      	beq.n	8008d12 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fc4a 	bl	8009580 <USBH_SetFeature>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d103      	bne.n	8008d00 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	220a      	movs	r2, #10
 8008cfc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008cfe:	e0bd      	b.n	8008e7c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	f040 80b9 	bne.w	8008e7c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	220a      	movs	r2, #10
 8008d0e:	701a      	strb	r2, [r3, #0]
      break;
 8008d10:	e0b4      	b.n	8008e7c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	220a      	movs	r2, #10
 8008d16:	701a      	strb	r2, [r3, #0]
      break;
 8008d18:	e0b0      	b.n	8008e7c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 80ad 	beq.w	8008e80 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]
 8008d32:	e016      	b.n	8008d62 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008d34:	7bfa      	ldrb	r2, [r7, #15]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	32de      	adds	r2, #222	@ 0xde
 8008d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3e:	791a      	ldrb	r2, [r3, #4]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d108      	bne.n	8008d5c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008d4a:	7bfa      	ldrb	r2, [r7, #15]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	32de      	adds	r2, #222	@ 0xde
 8008d50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008d5a:	e005      	b.n	8008d68 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	73fb      	strb	r3, [r7, #15]
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d0e5      	beq.n	8008d34 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d016      	beq.n	8008da0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	4798      	blx	r3
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d109      	bne.n	8008d98 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2206      	movs	r2, #6
 8008d88:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d90:	2103      	movs	r1, #3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d96:	e073      	b.n	8008e80 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	220d      	movs	r2, #13
 8008d9c:	701a      	strb	r2, [r3, #0]
      break;
 8008d9e:	e06f      	b.n	8008e80 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	220d      	movs	r2, #13
 8008da4:	701a      	strb	r2, [r3, #0]
      break;
 8008da6:	e06b      	b.n	8008e80 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d017      	beq.n	8008de2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	4798      	blx	r3
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008dc2:	7bbb      	ldrb	r3, [r7, #14]
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d103      	bne.n	8008dd2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	220b      	movs	r2, #11
 8008dce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008dd0:	e058      	b.n	8008e84 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d154      	bne.n	8008e84 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	220d      	movs	r2, #13
 8008dde:	701a      	strb	r2, [r3, #0]
      break;
 8008de0:	e050      	b.n	8008e84 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	220d      	movs	r2, #13
 8008de6:	701a      	strb	r2, [r3, #0]
      break;
 8008de8:	e04c      	b.n	8008e84 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d049      	beq.n	8008e88 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	4798      	blx	r3
      }
      break;
 8008e00:	e042      	b.n	8008e88 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7ff fd4a 	bl	80088a4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d009      	beq.n	8008e2e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d005      	beq.n	8008e44 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e3e:	2105      	movs	r1, #5
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d107      	bne.n	8008e60 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff fe22 	bl	8008aa2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e5e:	e014      	b.n	8008e8a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 fb19 	bl	800a498 <USBH_LL_Start>
      break;
 8008e66:	e010      	b.n	8008e8a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008e68:	bf00      	nop
 8008e6a:	e00e      	b.n	8008e8a <USBH_Process+0x3c6>
      break;
 8008e6c:	bf00      	nop
 8008e6e:	e00c      	b.n	8008e8a <USBH_Process+0x3c6>
      break;
 8008e70:	bf00      	nop
 8008e72:	e00a      	b.n	8008e8a <USBH_Process+0x3c6>
    break;
 8008e74:	bf00      	nop
 8008e76:	e008      	b.n	8008e8a <USBH_Process+0x3c6>
      break;
 8008e78:	bf00      	nop
 8008e7a:	e006      	b.n	8008e8a <USBH_Process+0x3c6>
      break;
 8008e7c:	bf00      	nop
 8008e7e:	e004      	b.n	8008e8a <USBH_Process+0x3c6>
      break;
 8008e80:	bf00      	nop
 8008e82:	e002      	b.n	8008e8a <USBH_Process+0x3c6>
      break;
 8008e84:	bf00      	nop
 8008e86:	e000      	b.n	8008e8a <USBH_Process+0x3c6>
      break;
 8008e88:	bf00      	nop
  }
  return USBH_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af04      	add	r7, sp, #16
 8008e9a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	785b      	ldrb	r3, [r3, #1]
 8008ea8:	2b07      	cmp	r3, #7
 8008eaa:	f200 81bd 	bhi.w	8009228 <USBH_HandleEnum+0x394>
 8008eae:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb4 <USBH_HandleEnum+0x20>)
 8008eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb4:	08008ed5 	.word	0x08008ed5
 8008eb8:	08008f8f 	.word	0x08008f8f
 8008ebc:	08008ff9 	.word	0x08008ff9
 8008ec0:	08009083 	.word	0x08009083
 8008ec4:	080090ed 	.word	0x080090ed
 8008ec8:	0800915d 	.word	0x0800915d
 8008ecc:	080091a3 	.word	0x080091a3
 8008ed0:	080091e9 	.word	0x080091e9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008ed4:	2108      	movs	r1, #8
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fa4c 	bl	8009374 <USBH_Get_DevDesc>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ee0:	7bbb      	ldrb	r3, [r7, #14]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d12e      	bne.n	8008f44 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	7919      	ldrb	r1, [r3, #4]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008f0a:	9202      	str	r2, [sp, #8]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	9201      	str	r2, [sp, #4]
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	4603      	mov	r3, r0
 8008f14:	2280      	movs	r2, #128	@ 0x80
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f001 f8dc 	bl	800a0d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	7959      	ldrb	r1, [r3, #5]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f30:	9202      	str	r2, [sp, #8]
 8008f32:	2200      	movs	r2, #0
 8008f34:	9201      	str	r2, [sp, #4]
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f001 f8c9 	bl	800a0d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008f42:	e173      	b.n	800922c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	f040 8170 	bne.w	800922c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f52:	3301      	adds	r3, #1
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d903      	bls.n	8008f6e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	220d      	movs	r2, #13
 8008f6a:	701a      	strb	r2, [r3, #0]
      break;
 8008f6c:	e15e      	b.n	800922c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	795b      	ldrb	r3, [r3, #5]
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 f8fd 	bl	800a174 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	791b      	ldrb	r3, [r3, #4]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f001 f8f7 	bl	800a174 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	701a      	strb	r2, [r3, #0]
      break;
 8008f8c:	e14e      	b.n	800922c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008f8e:	2112      	movs	r1, #18
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f9ef 	bl	8009374 <USBH_Get_DevDesc>
 8008f96:	4603      	mov	r3, r0
 8008f98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d103      	bne.n	8008fa8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008fa6:	e143      	b.n	8009230 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	f040 8140 	bne.w	8009230 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d903      	bls.n	8008fd2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	220d      	movs	r2, #13
 8008fce:	701a      	strb	r2, [r3, #0]
      break;
 8008fd0:	e12e      	b.n	8009230 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	795b      	ldrb	r3, [r3, #5]
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 f8cb 	bl	800a174 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	791b      	ldrb	r3, [r3, #4]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 f8c5 	bl	800a174 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	701a      	strb	r2, [r3, #0]
      break;
 8008ff6:	e11b      	b.n	8009230 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fa79 	bl	80094f2 <USBH_SetAddress>
 8009000:	4603      	mov	r3, r0
 8009002:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009004:	7bbb      	ldrb	r3, [r7, #14]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d130      	bne.n	800906c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800900a:	2002      	movs	r0, #2
 800900c:	f001 fbab 	bl	800a766 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2203      	movs	r2, #3
 800901c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	7919      	ldrb	r1, [r3, #4]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009032:	9202      	str	r2, [sp, #8]
 8009034:	2200      	movs	r2, #0
 8009036:	9201      	str	r2, [sp, #4]
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	4603      	mov	r3, r0
 800903c:	2280      	movs	r2, #128	@ 0x80
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f001 f848 	bl	800a0d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	7959      	ldrb	r1, [r3, #5]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009058:	9202      	str	r2, [sp, #8]
 800905a:	2200      	movs	r2, #0
 800905c:	9201      	str	r2, [sp, #4]
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	4603      	mov	r3, r0
 8009062:	2200      	movs	r2, #0
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f001 f835 	bl	800a0d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800906a:	e0e3      	b.n	8009234 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	2b03      	cmp	r3, #3
 8009070:	f040 80e0 	bne.w	8009234 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	220d      	movs	r2, #13
 8009078:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	705a      	strb	r2, [r3, #1]
      break;
 8009080:	e0d8      	b.n	8009234 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009082:	2109      	movs	r1, #9
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f9a1 	bl	80093cc <USBH_Get_CfgDesc>
 800908a:	4603      	mov	r3, r0
 800908c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800908e:	7bbb      	ldrb	r3, [r7, #14]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d103      	bne.n	800909c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2204      	movs	r2, #4
 8009098:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800909a:	e0cd      	b.n	8009238 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	2b03      	cmp	r3, #3
 80090a0:	f040 80ca 	bne.w	8009238 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80090aa:	3301      	adds	r3, #1
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d903      	bls.n	80090c6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	220d      	movs	r2, #13
 80090c2:	701a      	strb	r2, [r3, #0]
      break;
 80090c4:	e0b8      	b.n	8009238 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	795b      	ldrb	r3, [r3, #5]
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f001 f851 	bl	800a174 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	791b      	ldrb	r3, [r3, #4]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 f84b 	bl	800a174 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	701a      	strb	r2, [r3, #0]
      break;
 80090ea:	e0a5      	b.n	8009238 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f969 	bl	80093cc <USBH_Get_CfgDesc>
 80090fa:	4603      	mov	r3, r0
 80090fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090fe:	7bbb      	ldrb	r3, [r7, #14]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d103      	bne.n	800910c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2205      	movs	r2, #5
 8009108:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800910a:	e097      	b.n	800923c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800910c:	7bbb      	ldrb	r3, [r7, #14]
 800910e:	2b03      	cmp	r3, #3
 8009110:	f040 8094 	bne.w	800923c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800911a:	3301      	adds	r3, #1
 800911c:	b2da      	uxtb	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800912a:	2b03      	cmp	r3, #3
 800912c:	d903      	bls.n	8009136 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	220d      	movs	r2, #13
 8009132:	701a      	strb	r2, [r3, #0]
      break;
 8009134:	e082      	b.n	800923c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	795b      	ldrb	r3, [r3, #5]
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f001 f819 	bl	800a174 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	791b      	ldrb	r3, [r3, #4]
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f001 f813 	bl	800a174 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	701a      	strb	r2, [r3, #0]
      break;
 800915a:	e06f      	b.n	800923c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009162:	2b00      	cmp	r3, #0
 8009164:	d019      	beq.n	800919a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009172:	23ff      	movs	r3, #255	@ 0xff
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f953 	bl	8009420 <USBH_Get_StringDesc>
 800917a:	4603      	mov	r3, r0
 800917c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d103      	bne.n	800918c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2206      	movs	r2, #6
 8009188:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800918a:	e059      	b.n	8009240 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	2b03      	cmp	r3, #3
 8009190:	d156      	bne.n	8009240 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2206      	movs	r2, #6
 8009196:	705a      	strb	r2, [r3, #1]
      break;
 8009198:	e052      	b.n	8009240 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2206      	movs	r2, #6
 800919e:	705a      	strb	r2, [r3, #1]
      break;
 80091a0:	e04e      	b.n	8009240 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d019      	beq.n	80091e0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80091b8:	23ff      	movs	r3, #255	@ 0xff
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f930 	bl	8009420 <USBH_Get_StringDesc>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80091c4:	7bbb      	ldrb	r3, [r7, #14]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d103      	bne.n	80091d2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2207      	movs	r2, #7
 80091ce:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80091d0:	e038      	b.n	8009244 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	2b03      	cmp	r3, #3
 80091d6:	d135      	bne.n	8009244 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2207      	movs	r2, #7
 80091dc:	705a      	strb	r2, [r3, #1]
      break;
 80091de:	e031      	b.n	8009244 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2207      	movs	r2, #7
 80091e4:	705a      	strb	r2, [r3, #1]
      break;
 80091e6:	e02d      	b.n	8009244 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d017      	beq.n	8009222 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80091fe:	23ff      	movs	r3, #255	@ 0xff
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f90d 	bl	8009420 <USBH_Get_StringDesc>
 8009206:	4603      	mov	r3, r0
 8009208:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800920a:	7bbb      	ldrb	r3, [r7, #14]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d102      	bne.n	8009216 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009214:	e018      	b.n	8009248 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009216:	7bbb      	ldrb	r3, [r7, #14]
 8009218:	2b03      	cmp	r3, #3
 800921a:	d115      	bne.n	8009248 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	73fb      	strb	r3, [r7, #15]
      break;
 8009220:	e012      	b.n	8009248 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	73fb      	strb	r3, [r7, #15]
      break;
 8009226:	e00f      	b.n	8009248 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009228:	bf00      	nop
 800922a:	e00e      	b.n	800924a <USBH_HandleEnum+0x3b6>
      break;
 800922c:	bf00      	nop
 800922e:	e00c      	b.n	800924a <USBH_HandleEnum+0x3b6>
      break;
 8009230:	bf00      	nop
 8009232:	e00a      	b.n	800924a <USBH_HandleEnum+0x3b6>
      break;
 8009234:	bf00      	nop
 8009236:	e008      	b.n	800924a <USBH_HandleEnum+0x3b6>
      break;
 8009238:	bf00      	nop
 800923a:	e006      	b.n	800924a <USBH_HandleEnum+0x3b6>
      break;
 800923c:	bf00      	nop
 800923e:	e004      	b.n	800924a <USBH_HandleEnum+0x3b6>
      break;
 8009240:	bf00      	nop
 8009242:	e002      	b.n	800924a <USBH_HandleEnum+0x3b6>
      break;
 8009244:	bf00      	nop
 8009246:	e000      	b.n	800924a <USBH_HandleEnum+0x3b6>
      break;
 8009248:	bf00      	nop
  }
  return Status;
 800924a:	7bfb      	ldrb	r3, [r7, #15]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	683a      	ldr	r2, [r7, #0]
 8009262:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009266:	bf00      	nop
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b082      	sub	sp, #8
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f804 	bl	8009296 <USBH_HandleSof>
}
 800928e:	bf00      	nop
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b082      	sub	sp, #8
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b0b      	cmp	r3, #11
 80092a6:	d10a      	bne.n	80092be <USBH_HandleSof+0x28>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d005      	beq.n	80092be <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	4798      	blx	r3
  }
}
 80092be:	bf00      	nop
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b083      	sub	sp, #12
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80092d6:	bf00      	nop
}
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80092f2:	bf00      	nop
}
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f001 f8be 	bl	800a4ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	791b      	ldrb	r3, [r3, #4]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 ff0b 	bl	800a174 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	795b      	ldrb	r3, [r3, #5]
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 ff05 	bl	800a174 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af02      	add	r7, sp, #8
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009380:	887b      	ldrh	r3, [r7, #2]
 8009382:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009386:	d901      	bls.n	800938c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009388:	2303      	movs	r3, #3
 800938a:	e01b      	b.n	80093c4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009392:	887b      	ldrh	r3, [r7, #2]
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	4613      	mov	r3, r2
 8009398:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800939c:	2100      	movs	r1, #0
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f872 	bl	8009488 <USBH_GetDescriptor>
 80093a4:	4603      	mov	r3, r0
 80093a6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d109      	bne.n	80093c2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80093b4:	887a      	ldrh	r2, [r7, #2]
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f929 	bl	8009610 <USBH_ParseDevDesc>
 80093be:	4603      	mov	r3, r0
 80093c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af02      	add	r7, sp, #8
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	331c      	adds	r3, #28
 80093dc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80093de:	887b      	ldrh	r3, [r7, #2]
 80093e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093e4:	d901      	bls.n	80093ea <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e016      	b.n	8009418 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80093ea:	887b      	ldrh	r3, [r7, #2]
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093f4:	2100      	movs	r1, #0
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f846 	bl	8009488 <USBH_GetDescriptor>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009400:	7bfb      	ldrb	r3, [r7, #15]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d107      	bne.n	8009416 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009406:	887b      	ldrh	r3, [r7, #2]
 8009408:	461a      	mov	r2, r3
 800940a:	68b9      	ldr	r1, [r7, #8]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f9af 	bl	8009770 <USBH_ParseCfgDesc>
 8009412:	4603      	mov	r3, r0
 8009414:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009416:	7bfb      	ldrb	r3, [r7, #15]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af02      	add	r7, sp, #8
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	607a      	str	r2, [r7, #4]
 800942a:	461a      	mov	r2, r3
 800942c:	460b      	mov	r3, r1
 800942e:	72fb      	strb	r3, [r7, #11]
 8009430:	4613      	mov	r3, r2
 8009432:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009434:	893b      	ldrh	r3, [r7, #8]
 8009436:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800943a:	d802      	bhi.n	8009442 <USBH_Get_StringDesc+0x22>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009442:	2303      	movs	r3, #3
 8009444:	e01c      	b.n	8009480 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009446:	7afb      	ldrb	r3, [r7, #11]
 8009448:	b29b      	uxth	r3, r3
 800944a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800944e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009456:	893b      	ldrh	r3, [r7, #8]
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	460b      	mov	r3, r1
 800945c:	2100      	movs	r1, #0
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 f812 	bl	8009488 <USBH_GetDescriptor>
 8009464:	4603      	mov	r3, r0
 8009466:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d107      	bne.n	800947e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009474:	893a      	ldrh	r2, [r7, #8]
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	4618      	mov	r0, r3
 800947a:	f000 fb8d 	bl	8009b98 <USBH_ParseStringDesc>
  }

  return status;
 800947e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	607b      	str	r3, [r7, #4]
 8009492:	460b      	mov	r3, r1
 8009494:	72fb      	strb	r3, [r7, #11]
 8009496:	4613      	mov	r3, r2
 8009498:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	789b      	ldrb	r3, [r3, #2]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d11c      	bne.n	80094dc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80094a2:	7afb      	ldrb	r3, [r7, #11]
 80094a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2206      	movs	r2, #6
 80094b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	893a      	ldrh	r2, [r7, #8]
 80094b8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80094ba:	893b      	ldrh	r3, [r7, #8]
 80094bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80094c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094c4:	d104      	bne.n	80094d0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f240 4209 	movw	r2, #1033	@ 0x409
 80094cc:	829a      	strh	r2, [r3, #20]
 80094ce:	e002      	b.n	80094d6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	8b3a      	ldrh	r2, [r7, #24]
 80094da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80094dc:	8b3b      	ldrh	r3, [r7, #24]
 80094de:	461a      	mov	r2, r3
 80094e0:	6879      	ldr	r1, [r7, #4]
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f000 fba5 	bl	8009c32 <USBH_CtlReq>
 80094e8:	4603      	mov	r3, r0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	460b      	mov	r3, r1
 80094fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	789b      	ldrb	r3, [r3, #2]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d10f      	bne.n	8009526 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2205      	movs	r2, #5
 8009510:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009512:	78fb      	ldrb	r3, [r7, #3]
 8009514:	b29a      	uxth	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009526:	2200      	movs	r2, #0
 8009528:	2100      	movs	r1, #0
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fb81 	bl	8009c32 <USBH_CtlReq>
 8009530:	4603      	mov	r3, r0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	460b      	mov	r3, r1
 8009544:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	789b      	ldrb	r3, [r3, #2]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d10e      	bne.n	800956c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2209      	movs	r2, #9
 8009558:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	887a      	ldrh	r2, [r7, #2]
 800955e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800956c:	2200      	movs	r2, #0
 800956e:	2100      	movs	r1, #0
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fb5e 	bl	8009c32 <USBH_CtlReq>
 8009576:	4603      	mov	r3, r0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	789b      	ldrb	r3, [r3, #2]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d10f      	bne.n	80095b4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2203      	movs	r2, #3
 800959e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80095b4:	2200      	movs	r2, #0
 80095b6:	2100      	movs	r1, #0
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fb3a 	bl	8009c32 <USBH_CtlReq>
 80095be:	4603      	mov	r3, r0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	789b      	ldrb	r3, [r3, #2]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d10f      	bne.n	80095fc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2201      	movs	r2, #1
 80095e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80095ee:	78fb      	ldrb	r3, [r7, #3]
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80095fc:	2200      	movs	r2, #0
 80095fe:	2100      	movs	r1, #0
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fb16 	bl	8009c32 <USBH_CtlReq>
 8009606:	4603      	mov	r3, r0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009610:	b480      	push	{r7}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	4613      	mov	r3, r2
 800961c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009624:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009630:	2302      	movs	r3, #2
 8009632:	e094      	b.n	800975e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	781a      	ldrb	r2, [r3, #0]
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	785a      	ldrb	r2, [r3, #1]
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	3302      	adds	r3, #2
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	3303      	adds	r3, #3
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	021b      	lsls	r3, r3, #8
 8009654:	b29b      	uxth	r3, r3
 8009656:	4313      	orrs	r3, r2
 8009658:	b29a      	uxth	r2, r3
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	791a      	ldrb	r2, [r3, #4]
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	795a      	ldrb	r2, [r3, #5]
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	799a      	ldrb	r2, [r3, #6]
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	79da      	ldrb	r2, [r3, #7]
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009684:	2b00      	cmp	r3, #0
 8009686:	d004      	beq.n	8009692 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800968e:	2b01      	cmp	r3, #1
 8009690:	d11b      	bne.n	80096ca <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	79db      	ldrb	r3, [r3, #7]
 8009696:	2b20      	cmp	r3, #32
 8009698:	dc0f      	bgt.n	80096ba <USBH_ParseDevDesc+0xaa>
 800969a:	2b08      	cmp	r3, #8
 800969c:	db0f      	blt.n	80096be <USBH_ParseDevDesc+0xae>
 800969e:	3b08      	subs	r3, #8
 80096a0:	4a32      	ldr	r2, [pc, #200]	@ (800976c <USBH_ParseDevDesc+0x15c>)
 80096a2:	fa22 f303 	lsr.w	r3, r2, r3
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	bf14      	ite	ne
 80096ae:	2301      	movne	r3, #1
 80096b0:	2300      	moveq	r3, #0
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d106      	bne.n	80096c6 <USBH_ParseDevDesc+0xb6>
 80096b8:	e001      	b.n	80096be <USBH_ParseDevDesc+0xae>
 80096ba:	2b40      	cmp	r3, #64	@ 0x40
 80096bc:	d003      	beq.n	80096c6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	2208      	movs	r2, #8
 80096c2:	71da      	strb	r2, [r3, #7]
        break;
 80096c4:	e000      	b.n	80096c8 <USBH_ParseDevDesc+0xb8>
        break;
 80096c6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80096c8:	e00e      	b.n	80096e8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d107      	bne.n	80096e4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	79db      	ldrb	r3, [r3, #7]
 80096d8:	2b08      	cmp	r3, #8
 80096da:	d005      	beq.n	80096e8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	2208      	movs	r2, #8
 80096e0:	71da      	strb	r2, [r3, #7]
 80096e2:	e001      	b.n	80096e8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80096e4:	2303      	movs	r3, #3
 80096e6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80096e8:	88fb      	ldrh	r3, [r7, #6]
 80096ea:	2b08      	cmp	r3, #8
 80096ec:	d936      	bls.n	800975c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	3308      	adds	r3, #8
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	461a      	mov	r2, r3
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	3309      	adds	r3, #9
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	b29b      	uxth	r3, r3
 8009700:	4313      	orrs	r3, r2
 8009702:	b29a      	uxth	r2, r3
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	330a      	adds	r3, #10
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	330b      	adds	r3, #11
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	021b      	lsls	r3, r3, #8
 8009718:	b29b      	uxth	r3, r3
 800971a:	4313      	orrs	r3, r2
 800971c:	b29a      	uxth	r2, r3
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	330c      	adds	r3, #12
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	461a      	mov	r2, r3
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	330d      	adds	r3, #13
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	021b      	lsls	r3, r3, #8
 8009732:	b29b      	uxth	r3, r3
 8009734:	4313      	orrs	r3, r2
 8009736:	b29a      	uxth	r2, r3
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	7b9a      	ldrb	r2, [r3, #14]
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	7bda      	ldrb	r2, [r3, #15]
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	7c1a      	ldrb	r2, [r3, #16]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	7c5a      	ldrb	r2, [r3, #17]
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800975c:	7dfb      	ldrb	r3, [r7, #23]
}
 800975e:	4618      	mov	r0, r3
 8009760:	371c      	adds	r7, #28
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	01000101 	.word	0x01000101

08009770 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b08c      	sub	sp, #48	@ 0x30
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	4613      	mov	r3, r2
 800977c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009784:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800978c:	2300      	movs	r3, #0
 800978e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009792:	2300      	movs	r3, #0
 8009794:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800979e:	2302      	movs	r3, #2
 80097a0:	e0da      	b.n	8009958 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80097a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	2b09      	cmp	r3, #9
 80097ac:	d002      	beq.n	80097b4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80097ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b0:	2209      	movs	r2, #9
 80097b2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	781a      	ldrb	r2, [r3, #0]
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	785a      	ldrb	r2, [r3, #1]
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	3302      	adds	r3, #2
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	3303      	adds	r3, #3
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	021b      	lsls	r3, r3, #8
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	4313      	orrs	r3, r2
 80097d8:	b29b      	uxth	r3, r3
 80097da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097de:	bf28      	it	cs
 80097e0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	791a      	ldrb	r2, [r3, #4]
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	795a      	ldrb	r2, [r3, #5]
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	799a      	ldrb	r2, [r3, #6]
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	79da      	ldrb	r2, [r3, #7]
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	7a1a      	ldrb	r2, [r3, #8]
 800980e:	6a3b      	ldr	r3, [r7, #32]
 8009810:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009812:	88fb      	ldrh	r3, [r7, #6]
 8009814:	2b09      	cmp	r3, #9
 8009816:	f240 809d 	bls.w	8009954 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800981a:	2309      	movs	r3, #9
 800981c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800981e:	2300      	movs	r3, #0
 8009820:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009822:	e081      	b.n	8009928 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009824:	f107 0316 	add.w	r3, r7, #22
 8009828:	4619      	mov	r1, r3
 800982a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800982c:	f000 f9e7 	bl	8009bfe <USBH_GetNextDesc>
 8009830:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009834:	785b      	ldrb	r3, [r3, #1]
 8009836:	2b04      	cmp	r3, #4
 8009838:	d176      	bne.n	8009928 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800983a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	2b09      	cmp	r3, #9
 8009840:	d002      	beq.n	8009848 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009844:	2209      	movs	r2, #9
 8009846:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800984c:	221a      	movs	r2, #26
 800984e:	fb02 f303 	mul.w	r3, r2, r3
 8009852:	3308      	adds	r3, #8
 8009854:	6a3a      	ldr	r2, [r7, #32]
 8009856:	4413      	add	r3, r2
 8009858:	3302      	adds	r3, #2
 800985a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800985c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800985e:	69f8      	ldr	r0, [r7, #28]
 8009860:	f000 f87e 	bl	8009960 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800986a:	2300      	movs	r3, #0
 800986c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800986e:	e043      	b.n	80098f8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009870:	f107 0316 	add.w	r3, r7, #22
 8009874:	4619      	mov	r1, r3
 8009876:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009878:	f000 f9c1 	bl	8009bfe <USBH_GetNextDesc>
 800987c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800987e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009880:	785b      	ldrb	r3, [r3, #1]
 8009882:	2b05      	cmp	r3, #5
 8009884:	d138      	bne.n	80098f8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	795b      	ldrb	r3, [r3, #5]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d113      	bne.n	80098b6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009892:	2b02      	cmp	r3, #2
 8009894:	d003      	beq.n	800989e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	799b      	ldrb	r3, [r3, #6]
 800989a:	2b03      	cmp	r3, #3
 800989c:	d10b      	bne.n	80098b6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	79db      	ldrb	r3, [r3, #7]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10b      	bne.n	80098be <USBH_ParseCfgDesc+0x14e>
 80098a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b09      	cmp	r3, #9
 80098ac:	d007      	beq.n	80098be <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80098ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b0:	2209      	movs	r2, #9
 80098b2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80098b4:	e003      	b.n	80098be <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80098b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b8:	2207      	movs	r2, #7
 80098ba:	701a      	strb	r2, [r3, #0]
 80098bc:	e000      	b.n	80098c0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80098be:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80098c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098c4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80098c8:	3201      	adds	r2, #1
 80098ca:	00d2      	lsls	r2, r2, #3
 80098cc:	211a      	movs	r1, #26
 80098ce:	fb01 f303 	mul.w	r3, r1, r3
 80098d2:	4413      	add	r3, r2
 80098d4:	3308      	adds	r3, #8
 80098d6:	6a3a      	ldr	r2, [r7, #32]
 80098d8:	4413      	add	r3, r2
 80098da:	3304      	adds	r3, #4
 80098dc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80098de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098e0:	69b9      	ldr	r1, [r7, #24]
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 f870 	bl	80099c8 <USBH_ParseEPDesc>
 80098e8:	4603      	mov	r3, r0
 80098ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80098ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80098f2:	3301      	adds	r3, #1
 80098f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	791b      	ldrb	r3, [r3, #4]
 80098fc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009900:	429a      	cmp	r2, r3
 8009902:	d204      	bcs.n	800990e <USBH_ParseCfgDesc+0x19e>
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	885a      	ldrh	r2, [r3, #2]
 8009908:	8afb      	ldrh	r3, [r7, #22]
 800990a:	429a      	cmp	r2, r3
 800990c:	d8b0      	bhi.n	8009870 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	791b      	ldrb	r3, [r3, #4]
 8009912:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009916:	429a      	cmp	r2, r3
 8009918:	d201      	bcs.n	800991e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800991a:	2303      	movs	r3, #3
 800991c:	e01c      	b.n	8009958 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800991e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009922:	3301      	adds	r3, #1
 8009924:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800992c:	2b01      	cmp	r3, #1
 800992e:	d805      	bhi.n	800993c <USBH_ParseCfgDesc+0x1cc>
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	885a      	ldrh	r2, [r3, #2]
 8009934:	8afb      	ldrh	r3, [r7, #22]
 8009936:	429a      	cmp	r2, r3
 8009938:	f63f af74 	bhi.w	8009824 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800993c:	6a3b      	ldr	r3, [r7, #32]
 800993e:	791b      	ldrb	r3, [r3, #4]
 8009940:	2b02      	cmp	r3, #2
 8009942:	bf28      	it	cs
 8009944:	2302      	movcs	r3, #2
 8009946:	b2db      	uxtb	r3, r3
 8009948:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800994c:	429a      	cmp	r2, r3
 800994e:	d201      	bcs.n	8009954 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009950:	2303      	movs	r3, #3
 8009952:	e001      	b.n	8009958 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009954:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009958:	4618      	mov	r0, r3
 800995a:	3730      	adds	r7, #48	@ 0x30
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	781a      	ldrb	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	785a      	ldrb	r2, [r3, #1]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	789a      	ldrb	r2, [r3, #2]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	78da      	ldrb	r2, [r3, #3]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	3304      	adds	r3, #4
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b02      	cmp	r3, #2
 8009992:	bf28      	it	cs
 8009994:	2302      	movcs	r3, #2
 8009996:	b2da      	uxtb	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	795a      	ldrb	r2, [r3, #5]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	799a      	ldrb	r2, [r3, #6]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	79da      	ldrb	r2, [r3, #7]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	7a1a      	ldrb	r2, [r3, #8]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	721a      	strb	r2, [r3, #8]
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	781a      	ldrb	r2, [r3, #0]
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	785a      	ldrb	r2, [r3, #1]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	789a      	ldrb	r2, [r3, #2]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	78da      	ldrb	r2, [r3, #3]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3304      	adds	r3, #4
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	3305      	adds	r3, #5
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	021b      	lsls	r3, r3, #8
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	799a      	ldrb	r2, [r3, #6]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	889b      	ldrh	r3, [r3, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d009      	beq.n	8009a36 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a2a:	d804      	bhi.n	8009a36 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a34:	d901      	bls.n	8009a3a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009a36:	2303      	movs	r3, #3
 8009a38:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d136      	bne.n	8009ab2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	78db      	ldrb	r3, [r3, #3]
 8009a48:	f003 0303 	and.w	r3, r3, #3
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d108      	bne.n	8009a62 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	889b      	ldrh	r3, [r3, #4]
 8009a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a58:	f240 8097 	bls.w	8009b8a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	75fb      	strb	r3, [r7, #23]
 8009a60:	e093      	b.n	8009b8a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	78db      	ldrb	r3, [r3, #3]
 8009a66:	f003 0303 	and.w	r3, r3, #3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d107      	bne.n	8009a7e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	889b      	ldrh	r3, [r3, #4]
 8009a72:	2b40      	cmp	r3, #64	@ 0x40
 8009a74:	f240 8089 	bls.w	8009b8a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	75fb      	strb	r3, [r7, #23]
 8009a7c:	e085      	b.n	8009b8a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	78db      	ldrb	r3, [r3, #3]
 8009a82:	f003 0303 	and.w	r3, r3, #3
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d005      	beq.n	8009a96 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	78db      	ldrb	r3, [r3, #3]
 8009a8e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d10a      	bne.n	8009aac <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	799b      	ldrb	r3, [r3, #6]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <USBH_ParseEPDesc+0xde>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	799b      	ldrb	r3, [r3, #6]
 8009aa2:	2b10      	cmp	r3, #16
 8009aa4:	d970      	bls.n	8009b88 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009aaa:	e06d      	b.n	8009b88 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009aac:	2303      	movs	r3, #3
 8009aae:	75fb      	strb	r3, [r7, #23]
 8009ab0:	e06b      	b.n	8009b8a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d13c      	bne.n	8009b36 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	78db      	ldrb	r3, [r3, #3]
 8009ac0:	f003 0303 	and.w	r3, r3, #3
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d005      	beq.n	8009ad4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	78db      	ldrb	r3, [r3, #3]
 8009acc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d106      	bne.n	8009ae2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	889b      	ldrh	r3, [r3, #4]
 8009ad8:	2b40      	cmp	r3, #64	@ 0x40
 8009ada:	d956      	bls.n	8009b8a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009adc:	2303      	movs	r3, #3
 8009ade:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009ae0:	e053      	b.n	8009b8a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	78db      	ldrb	r3, [r3, #3]
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d10e      	bne.n	8009b0c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	799b      	ldrb	r3, [r3, #6]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d007      	beq.n	8009b06 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009afa:	2b10      	cmp	r3, #16
 8009afc:	d803      	bhi.n	8009b06 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009b02:	2b40      	cmp	r3, #64	@ 0x40
 8009b04:	d941      	bls.n	8009b8a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b06:	2303      	movs	r3, #3
 8009b08:	75fb      	strb	r3, [r7, #23]
 8009b0a:	e03e      	b.n	8009b8a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	78db      	ldrb	r3, [r3, #3]
 8009b10:	f003 0303 	and.w	r3, r3, #3
 8009b14:	2b03      	cmp	r3, #3
 8009b16:	d10b      	bne.n	8009b30 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	799b      	ldrb	r3, [r3, #6]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d004      	beq.n	8009b2a <USBH_ParseEPDesc+0x162>
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	889b      	ldrh	r3, [r3, #4]
 8009b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b28:	d32f      	bcc.n	8009b8a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	75fb      	strb	r3, [r7, #23]
 8009b2e:	e02c      	b.n	8009b8a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009b30:	2303      	movs	r3, #3
 8009b32:	75fb      	strb	r3, [r7, #23]
 8009b34:	e029      	b.n	8009b8a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d120      	bne.n	8009b82 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	78db      	ldrb	r3, [r3, #3]
 8009b44:	f003 0303 	and.w	r3, r3, #3
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d106      	bne.n	8009b5a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	889b      	ldrh	r3, [r3, #4]
 8009b50:	2b08      	cmp	r3, #8
 8009b52:	d01a      	beq.n	8009b8a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b54:	2303      	movs	r3, #3
 8009b56:	75fb      	strb	r3, [r7, #23]
 8009b58:	e017      	b.n	8009b8a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	78db      	ldrb	r3, [r3, #3]
 8009b5e:	f003 0303 	and.w	r3, r3, #3
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	d10a      	bne.n	8009b7c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	799b      	ldrb	r3, [r3, #6]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <USBH_ParseEPDesc+0x1ae>
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	889b      	ldrh	r3, [r3, #4]
 8009b72:	2b08      	cmp	r3, #8
 8009b74:	d909      	bls.n	8009b8a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b76:	2303      	movs	r3, #3
 8009b78:	75fb      	strb	r3, [r7, #23]
 8009b7a:	e006      	b.n	8009b8a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	75fb      	strb	r3, [r7, #23]
 8009b80:	e003      	b.n	8009b8a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009b82:	2303      	movs	r3, #3
 8009b84:	75fb      	strb	r3, [r7, #23]
 8009b86:	e000      	b.n	8009b8a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b88:	bf00      	nop
  }

  return status;
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	371c      	adds	r7, #28
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	2b03      	cmp	r3, #3
 8009bae:	d120      	bne.n	8009bf2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	1e9a      	subs	r2, r3, #2
 8009bb6:	88fb      	ldrh	r3, [r7, #6]
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	bf28      	it	cs
 8009bbc:	4613      	movcs	r3, r2
 8009bbe:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	3302      	adds	r3, #2
 8009bc4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	82fb      	strh	r3, [r7, #22]
 8009bca:	e00b      	b.n	8009be4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009bcc:	8afb      	ldrh	r3, [r7, #22]
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	781a      	ldrb	r2, [r3, #0]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009bde:	8afb      	ldrh	r3, [r7, #22]
 8009be0:	3302      	adds	r3, #2
 8009be2:	82fb      	strh	r3, [r7, #22]
 8009be4:	8afa      	ldrh	r2, [r7, #22]
 8009be6:	8abb      	ldrh	r3, [r7, #20]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d3ef      	bcc.n	8009bcc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	701a      	strb	r2, [r3, #0]
  }
}
 8009bf2:	bf00      	nop
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b085      	sub	sp, #20
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	881b      	ldrh	r3, [r3, #0]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	7812      	ldrb	r2, [r2, #0]
 8009c10:	4413      	add	r3, r2
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4413      	add	r3, r2
 8009c22:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c24:	68fb      	ldr	r3, [r7, #12]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b086      	sub	sp, #24
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009c40:	2301      	movs	r3, #1
 8009c42:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	789b      	ldrb	r3, [r3, #2]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d002      	beq.n	8009c52 <USBH_CtlReq+0x20>
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d00f      	beq.n	8009c70 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009c50:	e027      	b.n	8009ca2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	88fa      	ldrh	r2, [r7, #6]
 8009c5c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2201      	movs	r2, #1
 8009c62:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2202      	movs	r2, #2
 8009c68:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c6e:	e018      	b.n	8009ca2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 f81b 	bl	8009cac <USBH_HandleControl>
 8009c76:	4603      	mov	r3, r0
 8009c78:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009c7a:	7dfb      	ldrb	r3, [r7, #23]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <USBH_CtlReq+0x54>
 8009c80:	7dfb      	ldrb	r3, [r7, #23]
 8009c82:	2b03      	cmp	r3, #3
 8009c84:	d106      	bne.n	8009c94 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	761a      	strb	r2, [r3, #24]
      break;
 8009c92:	e005      	b.n	8009ca0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009c94:	7dfb      	ldrb	r3, [r7, #23]
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d102      	bne.n	8009ca0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	709a      	strb	r2, [r3, #2]
      break;
 8009ca0:	bf00      	nop
  }
  return status;
 8009ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af02      	add	r7, sp, #8
 8009cb2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	7e1b      	ldrb	r3, [r3, #24]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	2b0a      	cmp	r3, #10
 8009cc4:	f200 8156 	bhi.w	8009f74 <USBH_HandleControl+0x2c8>
 8009cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd0 <USBH_HandleControl+0x24>)
 8009cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cce:	bf00      	nop
 8009cd0:	08009cfd 	.word	0x08009cfd
 8009cd4:	08009d17 	.word	0x08009d17
 8009cd8:	08009d81 	.word	0x08009d81
 8009cdc:	08009da7 	.word	0x08009da7
 8009ce0:	08009ddf 	.word	0x08009ddf
 8009ce4:	08009e09 	.word	0x08009e09
 8009ce8:	08009e5b 	.word	0x08009e5b
 8009cec:	08009e7d 	.word	0x08009e7d
 8009cf0:	08009eb9 	.word	0x08009eb9
 8009cf4:	08009edf 	.word	0x08009edf
 8009cf8:	08009f1d 	.word	0x08009f1d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f103 0110 	add.w	r1, r3, #16
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	795b      	ldrb	r3, [r3, #5]
 8009d06:	461a      	mov	r2, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f943 	bl	8009f94 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2202      	movs	r2, #2
 8009d12:	761a      	strb	r2, [r3, #24]
      break;
 8009d14:	e139      	b.n	8009f8a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	795b      	ldrb	r3, [r3, #5]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fcc5 	bl	800a6ac <USBH_LL_GetURBState>
 8009d22:	4603      	mov	r3, r0
 8009d24:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d26:	7bbb      	ldrb	r3, [r7, #14]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d11e      	bne.n	8009d6a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	7c1b      	ldrb	r3, [r3, #16]
 8009d30:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009d34:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	8adb      	ldrh	r3, [r3, #22]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00a      	beq.n	8009d54 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009d3e:	7b7b      	ldrb	r3, [r7, #13]
 8009d40:	2b80      	cmp	r3, #128	@ 0x80
 8009d42:	d103      	bne.n	8009d4c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2203      	movs	r2, #3
 8009d48:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009d4a:	e115      	b.n	8009f78 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2205      	movs	r2, #5
 8009d50:	761a      	strb	r2, [r3, #24]
      break;
 8009d52:	e111      	b.n	8009f78 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009d54:	7b7b      	ldrb	r3, [r7, #13]
 8009d56:	2b80      	cmp	r3, #128	@ 0x80
 8009d58:	d103      	bne.n	8009d62 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2209      	movs	r2, #9
 8009d5e:	761a      	strb	r2, [r3, #24]
      break;
 8009d60:	e10a      	b.n	8009f78 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2207      	movs	r2, #7
 8009d66:	761a      	strb	r2, [r3, #24]
      break;
 8009d68:	e106      	b.n	8009f78 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
 8009d6c:	2b04      	cmp	r3, #4
 8009d6e:	d003      	beq.n	8009d78 <USBH_HandleControl+0xcc>
 8009d70:	7bbb      	ldrb	r3, [r7, #14]
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	f040 8100 	bne.w	8009f78 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	220b      	movs	r2, #11
 8009d7c:	761a      	strb	r2, [r3, #24]
      break;
 8009d7e:	e0fb      	b.n	8009f78 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6899      	ldr	r1, [r3, #8]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	899a      	ldrh	r2, [r3, #12]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	791b      	ldrb	r3, [r3, #4]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f93a 	bl	800a012 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2204      	movs	r2, #4
 8009da2:	761a      	strb	r2, [r3, #24]
      break;
 8009da4:	e0f1      	b.n	8009f8a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	791b      	ldrb	r3, [r3, #4]
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fc7d 	bl	800a6ac <USBH_LL_GetURBState>
 8009db2:	4603      	mov	r3, r0
 8009db4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009db6:	7bbb      	ldrb	r3, [r7, #14]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d102      	bne.n	8009dc2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2209      	movs	r2, #9
 8009dc0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009dc2:	7bbb      	ldrb	r3, [r7, #14]
 8009dc4:	2b05      	cmp	r3, #5
 8009dc6:	d102      	bne.n	8009dce <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009dcc:	e0d6      	b.n	8009f7c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	2b04      	cmp	r3, #4
 8009dd2:	f040 80d3 	bne.w	8009f7c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	220b      	movs	r2, #11
 8009dda:	761a      	strb	r2, [r3, #24]
      break;
 8009ddc:	e0ce      	b.n	8009f7c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6899      	ldr	r1, [r3, #8]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	899a      	ldrh	r2, [r3, #12]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	795b      	ldrb	r3, [r3, #5]
 8009dea:	2001      	movs	r0, #1
 8009dec:	9000      	str	r0, [sp, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f8ea 	bl	8009fc8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2206      	movs	r2, #6
 8009e04:	761a      	strb	r2, [r3, #24]
      break;
 8009e06:	e0c0      	b.n	8009f8a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	795b      	ldrb	r3, [r3, #5]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fc4c 	bl	800a6ac <USBH_LL_GetURBState>
 8009e14:	4603      	mov	r3, r0
 8009e16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d103      	bne.n	8009e26 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2207      	movs	r2, #7
 8009e22:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e24:	e0ac      	b.n	8009f80 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009e26:	7bbb      	ldrb	r3, [r7, #14]
 8009e28:	2b05      	cmp	r3, #5
 8009e2a:	d105      	bne.n	8009e38 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	220c      	movs	r2, #12
 8009e30:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009e32:	2303      	movs	r3, #3
 8009e34:	73fb      	strb	r3, [r7, #15]
      break;
 8009e36:	e0a3      	b.n	8009f80 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e38:	7bbb      	ldrb	r3, [r7, #14]
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d103      	bne.n	8009e46 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2205      	movs	r2, #5
 8009e42:	761a      	strb	r2, [r3, #24]
      break;
 8009e44:	e09c      	b.n	8009f80 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	f040 8099 	bne.w	8009f80 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	220b      	movs	r2, #11
 8009e52:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009e54:	2302      	movs	r3, #2
 8009e56:	73fb      	strb	r3, [r7, #15]
      break;
 8009e58:	e092      	b.n	8009f80 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	791b      	ldrb	r3, [r3, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	2100      	movs	r1, #0
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f8d5 	bl	800a012 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2208      	movs	r2, #8
 8009e78:	761a      	strb	r2, [r3, #24]

      break;
 8009e7a:	e086      	b.n	8009f8a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	791b      	ldrb	r3, [r3, #4]
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fc12 	bl	800a6ac <USBH_LL_GetURBState>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d105      	bne.n	8009e9e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	220d      	movs	r2, #13
 8009e96:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e9c:	e072      	b.n	8009f84 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	2b04      	cmp	r3, #4
 8009ea2:	d103      	bne.n	8009eac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	220b      	movs	r2, #11
 8009ea8:	761a      	strb	r2, [r3, #24]
      break;
 8009eaa:	e06b      	b.n	8009f84 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	2b05      	cmp	r3, #5
 8009eb0:	d168      	bne.n	8009f84 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8009eb6:	e065      	b.n	8009f84 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	795b      	ldrb	r3, [r3, #5]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	9200      	str	r2, [sp, #0]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f87f 	bl	8009fc8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	220a      	movs	r2, #10
 8009eda:	761a      	strb	r2, [r3, #24]
      break;
 8009edc:	e055      	b.n	8009f8a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	795b      	ldrb	r3, [r3, #5]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fbe1 	bl	800a6ac <USBH_LL_GetURBState>
 8009eea:	4603      	mov	r3, r0
 8009eec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d105      	bne.n	8009f00 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	220d      	movs	r2, #13
 8009efc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009efe:	e043      	b.n	8009f88 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d103      	bne.n	8009f0e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2209      	movs	r2, #9
 8009f0a:	761a      	strb	r2, [r3, #24]
      break;
 8009f0c:	e03c      	b.n	8009f88 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009f0e:	7bbb      	ldrb	r3, [r7, #14]
 8009f10:	2b04      	cmp	r3, #4
 8009f12:	d139      	bne.n	8009f88 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	220b      	movs	r2, #11
 8009f18:	761a      	strb	r2, [r3, #24]
      break;
 8009f1a:	e035      	b.n	8009f88 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	7e5b      	ldrb	r3, [r3, #25]
 8009f20:	3301      	adds	r3, #1
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	765a      	strb	r2, [r3, #25]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	7e5b      	ldrb	r3, [r3, #25]
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d806      	bhi.n	8009f3e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009f3c:	e025      	b.n	8009f8a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f44:	2106      	movs	r1, #6
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	795b      	ldrb	r3, [r3, #5]
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f90c 	bl	800a174 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	791b      	ldrb	r3, [r3, #4]
 8009f60:	4619      	mov	r1, r3
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f906 	bl	800a174 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009f6e:	2302      	movs	r3, #2
 8009f70:	73fb      	strb	r3, [r7, #15]
      break;
 8009f72:	e00a      	b.n	8009f8a <USBH_HandleControl+0x2de>

    default:
      break;
 8009f74:	bf00      	nop
 8009f76:	e008      	b.n	8009f8a <USBH_HandleControl+0x2de>
      break;
 8009f78:	bf00      	nop
 8009f7a:	e006      	b.n	8009f8a <USBH_HandleControl+0x2de>
      break;
 8009f7c:	bf00      	nop
 8009f7e:	e004      	b.n	8009f8a <USBH_HandleControl+0x2de>
      break;
 8009f80:	bf00      	nop
 8009f82:	e002      	b.n	8009f8a <USBH_HandleControl+0x2de>
      break;
 8009f84:	bf00      	nop
 8009f86:	e000      	b.n	8009f8a <USBH_HandleControl+0x2de>
      break;
 8009f88:	bf00      	nop
  }

  return status;
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af04      	add	r7, sp, #16
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009fa2:	79f9      	ldrb	r1, [r7, #7]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	9303      	str	r3, [sp, #12]
 8009fa8:	2308      	movs	r3, #8
 8009faa:	9302      	str	r3, [sp, #8]
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 fb46 	bl	800a64a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af04      	add	r7, sp, #16
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	80fb      	strh	r3, [r7, #6]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009fec:	7979      	ldrb	r1, [r7, #5]
 8009fee:	7e3b      	ldrb	r3, [r7, #24]
 8009ff0:	9303      	str	r3, [sp, #12]
 8009ff2:	88fb      	ldrh	r3, [r7, #6]
 8009ff4:	9302      	str	r3, [sp, #8]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	9301      	str	r3, [sp, #4]
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	2300      	movs	r3, #0
 800a000:	2200      	movs	r2, #0
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f000 fb21 	bl	800a64a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b088      	sub	sp, #32
 800a016:	af04      	add	r7, sp, #16
 800a018:	60f8      	str	r0, [r7, #12]
 800a01a:	60b9      	str	r1, [r7, #8]
 800a01c:	4611      	mov	r1, r2
 800a01e:	461a      	mov	r2, r3
 800a020:	460b      	mov	r3, r1
 800a022:	80fb      	strh	r3, [r7, #6]
 800a024:	4613      	mov	r3, r2
 800a026:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a028:	7979      	ldrb	r1, [r7, #5]
 800a02a:	2300      	movs	r3, #0
 800a02c:	9303      	str	r3, [sp, #12]
 800a02e:	88fb      	ldrh	r3, [r7, #6]
 800a030:	9302      	str	r3, [sp, #8]
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	9301      	str	r3, [sp, #4]
 800a036:	2301      	movs	r3, #1
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	2300      	movs	r3, #0
 800a03c:	2201      	movs	r2, #1
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 fb03 	bl	800a64a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a044:	2300      	movs	r3, #0

}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b088      	sub	sp, #32
 800a052:	af04      	add	r7, sp, #16
 800a054:	60f8      	str	r0, [r7, #12]
 800a056:	60b9      	str	r1, [r7, #8]
 800a058:	4611      	mov	r1, r2
 800a05a:	461a      	mov	r2, r3
 800a05c:	460b      	mov	r3, r1
 800a05e:	80fb      	strh	r3, [r7, #6]
 800a060:	4613      	mov	r3, r2
 800a062:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a06e:	2300      	movs	r3, #0
 800a070:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a072:	7979      	ldrb	r1, [r7, #5]
 800a074:	7e3b      	ldrb	r3, [r7, #24]
 800a076:	9303      	str	r3, [sp, #12]
 800a078:	88fb      	ldrh	r3, [r7, #6]
 800a07a:	9302      	str	r3, [sp, #8]
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	9301      	str	r3, [sp, #4]
 800a080:	2301      	movs	r3, #1
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	2302      	movs	r3, #2
 800a086:	2200      	movs	r2, #0
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 fade 	bl	800a64a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b088      	sub	sp, #32
 800a09c:	af04      	add	r7, sp, #16
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	80fb      	strh	r3, [r7, #6]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a0ae:	7979      	ldrb	r1, [r7, #5]
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	9303      	str	r3, [sp, #12]
 800a0b4:	88fb      	ldrh	r3, [r7, #6]
 800a0b6:	9302      	str	r3, [sp, #8]
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	9301      	str	r3, [sp, #4]
 800a0bc:	2301      	movs	r3, #1
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 fac0 	bl	800a64a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af04      	add	r7, sp, #16
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	4608      	mov	r0, r1
 800a0de:	4611      	mov	r1, r2
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	70fb      	strb	r3, [r7, #3]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	70bb      	strb	r3, [r7, #2]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a0ee:	7878      	ldrb	r0, [r7, #1]
 800a0f0:	78ba      	ldrb	r2, [r7, #2]
 800a0f2:	78f9      	ldrb	r1, [r7, #3]
 800a0f4:	8b3b      	ldrh	r3, [r7, #24]
 800a0f6:	9302      	str	r3, [sp, #8]
 800a0f8:	7d3b      	ldrb	r3, [r7, #20]
 800a0fa:	9301      	str	r3, [sp, #4]
 800a0fc:	7c3b      	ldrb	r3, [r7, #16]
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	4603      	mov	r3, r0
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 fa53 	bl	800a5ae <USBH_LL_OpenPipe>

  return USBH_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b082      	sub	sp, #8
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	460b      	mov	r3, r1
 800a11c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a11e:	78fb      	ldrb	r3, [r7, #3]
 800a120:	4619      	mov	r1, r3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fa72 	bl	800a60c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	460b      	mov	r3, r1
 800a13c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f836 	bl	800a1b0 <USBH_GetFreePipe>
 800a144:	4603      	mov	r3, r0
 800a146:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a148:	89fb      	ldrh	r3, [r7, #14]
 800a14a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a14e:	4293      	cmp	r3, r2
 800a150:	d00a      	beq.n	800a168 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a152:	78fa      	ldrb	r2, [r7, #3]
 800a154:	89fb      	ldrh	r3, [r7, #14]
 800a156:	f003 030f 	and.w	r3, r3, #15
 800a15a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a15e:	6879      	ldr	r1, [r7, #4]
 800a160:	33e0      	adds	r3, #224	@ 0xe0
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	440b      	add	r3, r1
 800a166:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a168:	89fb      	ldrh	r3, [r7, #14]
 800a16a:	b2db      	uxtb	r3, r3
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	460b      	mov	r3, r1
 800a17e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	2b0f      	cmp	r3, #15
 800a184:	d80d      	bhi.n	800a1a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a186:	78fb      	ldrb	r3, [r7, #3]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	33e0      	adds	r3, #224	@ 0xe0
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	685a      	ldr	r2, [r3, #4]
 800a192:	78fb      	ldrb	r3, [r7, #3]
 800a194:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a198:	6879      	ldr	r1, [r7, #4]
 800a19a:	33e0      	adds	r3, #224	@ 0xe0
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	440b      	add	r3, r1
 800a1a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a1bc:	2300      	movs	r3, #0
 800a1be:	73fb      	strb	r3, [r7, #15]
 800a1c0:	e00f      	b.n	800a1e2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	33e0      	adds	r3, #224	@ 0xe0
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d102      	bne.n	800a1dc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a1d6:	7bfb      	ldrb	r3, [r7, #15]
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	e007      	b.n	800a1ec <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	73fb      	strb	r3, [r7, #15]
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
 800a1e4:	2b0f      	cmp	r3, #15
 800a1e6:	d9ec      	bls.n	800a1c2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a1e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	490e      	ldr	r1, [pc, #56]	@ (800a238 <MX_USB_HOST_Init+0x40>)
 800a200:	480e      	ldr	r0, [pc, #56]	@ (800a23c <MX_USB_HOST_Init+0x44>)
 800a202:	f7fe fb15 	bl	8008830 <USBH_Init>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a20c:	f7f6 ffba 	bl	8001184 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a210:	490b      	ldr	r1, [pc, #44]	@ (800a240 <MX_USB_HOST_Init+0x48>)
 800a212:	480a      	ldr	r0, [pc, #40]	@ (800a23c <MX_USB_HOST_Init+0x44>)
 800a214:	f7fe fbb9 	bl	800898a <USBH_RegisterClass>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a21e:	f7f6 ffb1 	bl	8001184 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a222:	4806      	ldr	r0, [pc, #24]	@ (800a23c <MX_USB_HOST_Init+0x44>)
 800a224:	f7fe fc3d 	bl	8008aa2 <USBH_Start>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a22e:	f7f6 ffa9 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a232:	bf00      	nop
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	0800a259 	.word	0x0800a259
 800a23c:	200001c4 	.word	0x200001c4
 800a240:	2000000c 	.word	0x2000000c

0800a244 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a248:	4802      	ldr	r0, [pc, #8]	@ (800a254 <MX_USB_HOST_Process+0x10>)
 800a24a:	f7fe fc3b 	bl	8008ac4 <USBH_Process>
}
 800a24e:	bf00      	nop
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	200001c4 	.word	0x200001c4

0800a258 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a264:	78fb      	ldrb	r3, [r7, #3]
 800a266:	3b01      	subs	r3, #1
 800a268:	2b04      	cmp	r3, #4
 800a26a:	d819      	bhi.n	800a2a0 <USBH_UserProcess+0x48>
 800a26c:	a201      	add	r2, pc, #4	@ (adr r2, 800a274 <USBH_UserProcess+0x1c>)
 800a26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a272:	bf00      	nop
 800a274:	0800a2a1 	.word	0x0800a2a1
 800a278:	0800a291 	.word	0x0800a291
 800a27c:	0800a2a1 	.word	0x0800a2a1
 800a280:	0800a299 	.word	0x0800a299
 800a284:	0800a289 	.word	0x0800a289
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a288:	4b09      	ldr	r3, [pc, #36]	@ (800a2b0 <USBH_UserProcess+0x58>)
 800a28a:	2203      	movs	r2, #3
 800a28c:	701a      	strb	r2, [r3, #0]
  break;
 800a28e:	e008      	b.n	800a2a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a290:	4b07      	ldr	r3, [pc, #28]	@ (800a2b0 <USBH_UserProcess+0x58>)
 800a292:	2202      	movs	r2, #2
 800a294:	701a      	strb	r2, [r3, #0]
  break;
 800a296:	e004      	b.n	800a2a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a298:	4b05      	ldr	r3, [pc, #20]	@ (800a2b0 <USBH_UserProcess+0x58>)
 800a29a:	2201      	movs	r2, #1
 800a29c:	701a      	strb	r2, [r3, #0]
  break;
 800a29e:	e000      	b.n	800a2a2 <USBH_UserProcess+0x4a>

  default:
  break;
 800a2a0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a2a2:	bf00      	nop
 800a2a4:	370c      	adds	r7, #12
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	2000059c 	.word	0x2000059c

0800a2b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08a      	sub	sp, #40	@ 0x28
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2bc:	f107 0314 	add.w	r3, r7, #20
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	605a      	str	r2, [r3, #4]
 800a2c6:	609a      	str	r2, [r3, #8]
 800a2c8:	60da      	str	r2, [r3, #12]
 800a2ca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2d4:	d147      	bne.n	800a366 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	613b      	str	r3, [r7, #16]
 800a2da:	4b25      	ldr	r3, [pc, #148]	@ (800a370 <HAL_HCD_MspInit+0xbc>)
 800a2dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2de:	4a24      	ldr	r2, [pc, #144]	@ (800a370 <HAL_HCD_MspInit+0xbc>)
 800a2e0:	f043 0301 	orr.w	r3, r3, #1
 800a2e4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a2e6:	4b22      	ldr	r3, [pc, #136]	@ (800a370 <HAL_HCD_MspInit+0xbc>)
 800a2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ea:	f003 0301 	and.w	r3, r3, #1
 800a2ee:	613b      	str	r3, [r7, #16]
 800a2f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a2f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a300:	f107 0314 	add.w	r3, r7, #20
 800a304:	4619      	mov	r1, r3
 800a306:	481b      	ldr	r0, [pc, #108]	@ (800a374 <HAL_HCD_MspInit+0xc0>)
 800a308:	f7f7 fe6e 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a30c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a312:	2302      	movs	r3, #2
 800a314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a316:	2300      	movs	r3, #0
 800a318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a31a:	2300      	movs	r3, #0
 800a31c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a31e:	230a      	movs	r3, #10
 800a320:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a322:	f107 0314 	add.w	r3, r7, #20
 800a326:	4619      	mov	r1, r3
 800a328:	4812      	ldr	r0, [pc, #72]	@ (800a374 <HAL_HCD_MspInit+0xc0>)
 800a32a:	f7f7 fe5d 	bl	8001fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a32e:	4b10      	ldr	r3, [pc, #64]	@ (800a370 <HAL_HCD_MspInit+0xbc>)
 800a330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a332:	4a0f      	ldr	r2, [pc, #60]	@ (800a370 <HAL_HCD_MspInit+0xbc>)
 800a334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a338:	6353      	str	r3, [r2, #52]	@ 0x34
 800a33a:	2300      	movs	r3, #0
 800a33c:	60fb      	str	r3, [r7, #12]
 800a33e:	4b0c      	ldr	r3, [pc, #48]	@ (800a370 <HAL_HCD_MspInit+0xbc>)
 800a340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a342:	4a0b      	ldr	r2, [pc, #44]	@ (800a370 <HAL_HCD_MspInit+0xbc>)
 800a344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a348:	6453      	str	r3, [r2, #68]	@ 0x44
 800a34a:	4b09      	ldr	r3, [pc, #36]	@ (800a370 <HAL_HCD_MspInit+0xbc>)
 800a34c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a34e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a352:	60fb      	str	r3, [r7, #12]
 800a354:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a356:	2200      	movs	r2, #0
 800a358:	2100      	movs	r1, #0
 800a35a:	2043      	movs	r0, #67	@ 0x43
 800a35c:	f7f7 fe0d 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a360:	2043      	movs	r0, #67	@ 0x43
 800a362:	f7f7 fe26 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a366:	bf00      	nop
 800a368:	3728      	adds	r7, #40	@ 0x28
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	40023800 	.word	0x40023800
 800a374:	40020000 	.word	0x40020000

0800a378 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe ff73 	bl	8009272 <USBH_LL_IncTimer>
}
 800a38c:	bf00      	nop
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fe ffab 	bl	80092fe <USBH_LL_Connect>
}
 800a3a8:	bf00      	nop
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fe ffb4 	bl	800932c <USBH_LL_Disconnect>
}
 800a3c4:	bf00      	nop
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	70fb      	strb	r3, [r7, #3]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a3dc:	bf00      	nop
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fe ff65 	bl	80092c6 <USBH_LL_PortEnabled>
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a412:	4618      	mov	r0, r3
 800a414:	f7fe ff65 	bl	80092e2 <USBH_LL_PortDisabled>
}
 800a418:	bf00      	nop
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d12a      	bne.n	800a488 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a432:	4a18      	ldr	r2, [pc, #96]	@ (800a494 <USBH_LL_Init+0x74>)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a15      	ldr	r2, [pc, #84]	@ (800a494 <USBH_LL_Init+0x74>)
 800a43e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a442:	4b14      	ldr	r3, [pc, #80]	@ (800a494 <USBH_LL_Init+0x74>)
 800a444:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a448:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a44a:	4b12      	ldr	r3, [pc, #72]	@ (800a494 <USBH_LL_Init+0x74>)
 800a44c:	2208      	movs	r2, #8
 800a44e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a450:	4b10      	ldr	r3, [pc, #64]	@ (800a494 <USBH_LL_Init+0x74>)
 800a452:	2201      	movs	r2, #1
 800a454:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a456:	4b0f      	ldr	r3, [pc, #60]	@ (800a494 <USBH_LL_Init+0x74>)
 800a458:	2200      	movs	r2, #0
 800a45a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a45c:	4b0d      	ldr	r3, [pc, #52]	@ (800a494 <USBH_LL_Init+0x74>)
 800a45e:	2202      	movs	r2, #2
 800a460:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a462:	4b0c      	ldr	r3, [pc, #48]	@ (800a494 <USBH_LL_Init+0x74>)
 800a464:	2200      	movs	r2, #0
 800a466:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a468:	480a      	ldr	r0, [pc, #40]	@ (800a494 <USBH_LL_Init+0x74>)
 800a46a:	f7f7 ff72 	bl	8002352 <HAL_HCD_Init>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a474:	f7f6 fe86 	bl	8001184 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a478:	4806      	ldr	r0, [pc, #24]	@ (800a494 <USBH_LL_Init+0x74>)
 800a47a:	f7f8 fbd3 	bl	8002c24 <HAL_HCD_GetCurrentFrame>
 800a47e:	4603      	mov	r3, r0
 800a480:	4619      	mov	r1, r3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7fe fee6 	bl	8009254 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	200005a0 	.word	0x200005a0

0800a498 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7f8 fb40 	bl	8002b34 <HAL_HCD_Start>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 f95e 	bl	800a77c <USBH_Get_USB_Status>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7f8 fb48 	bl	8002b7a <HAL_HCD_Stop>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f000 f943 	bl	800a77c <USBH_Get_USB_Status>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a50c:	2301      	movs	r3, #1
 800a50e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a516:	4618      	mov	r0, r3
 800a518:	f7f8 fb92 	bl	8002c40 <HAL_HCD_GetCurrentSpeed>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d00c      	beq.n	800a53c <USBH_LL_GetSpeed+0x38>
 800a522:	2b02      	cmp	r3, #2
 800a524:	d80d      	bhi.n	800a542 <USBH_LL_GetSpeed+0x3e>
 800a526:	2b00      	cmp	r3, #0
 800a528:	d002      	beq.n	800a530 <USBH_LL_GetSpeed+0x2c>
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d003      	beq.n	800a536 <USBH_LL_GetSpeed+0x32>
 800a52e:	e008      	b.n	800a542 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a530:	2300      	movs	r3, #0
 800a532:	73fb      	strb	r3, [r7, #15]
    break;
 800a534:	e008      	b.n	800a548 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a536:	2301      	movs	r3, #1
 800a538:	73fb      	strb	r3, [r7, #15]
    break;
 800a53a:	e005      	b.n	800a548 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a53c:	2302      	movs	r3, #2
 800a53e:	73fb      	strb	r3, [r7, #15]
    break;
 800a540:	e002      	b.n	800a548 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a542:	2301      	movs	r3, #1
 800a544:	73fb      	strb	r3, [r7, #15]
    break;
 800a546:	bf00      	nop
  }
  return  speed;
 800a548:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b084      	sub	sp, #16
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a568:	4618      	mov	r0, r3
 800a56a:	f7f8 fb23 	bl	8002bb4 <HAL_HCD_ResetPort>
 800a56e:	4603      	mov	r3, r0
 800a570:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a572:	7bfb      	ldrb	r3, [r7, #15]
 800a574:	4618      	mov	r0, r3
 800a576:	f000 f901 	bl	800a77c <USBH_Get_USB_Status>
 800a57a:	4603      	mov	r3, r0
 800a57c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a57e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	460b      	mov	r3, r1
 800a592:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a59a:	78fa      	ldrb	r2, [r7, #3]
 800a59c:	4611      	mov	r1, r2
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7f8 fb2b 	bl	8002bfa <HAL_HCD_HC_GetXferCount>
 800a5a4:	4603      	mov	r3, r0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a5ae:	b590      	push	{r4, r7, lr}
 800a5b0:	b089      	sub	sp, #36	@ 0x24
 800a5b2:	af04      	add	r7, sp, #16
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	4608      	mov	r0, r1
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	4603      	mov	r3, r0
 800a5be:	70fb      	strb	r3, [r7, #3]
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	70bb      	strb	r3, [r7, #2]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a5d6:	787c      	ldrb	r4, [r7, #1]
 800a5d8:	78ba      	ldrb	r2, [r7, #2]
 800a5da:	78f9      	ldrb	r1, [r7, #3]
 800a5dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a5de:	9302      	str	r3, [sp, #8]
 800a5e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a5e4:	9301      	str	r3, [sp, #4]
 800a5e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	4623      	mov	r3, r4
 800a5ee:	f7f7 ff17 	bl	8002420 <HAL_HCD_HC_Init>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5f6:	7bfb      	ldrb	r3, [r7, #15]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 f8bf 	bl	800a77c <USBH_Get_USB_Status>
 800a5fe:	4603      	mov	r3, r0
 800a600:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a602:	7bbb      	ldrb	r3, [r7, #14]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd90      	pop	{r4, r7, pc}

0800a60c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a626:	78fa      	ldrb	r2, [r7, #3]
 800a628:	4611      	mov	r1, r2
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7f7 ffb0 	bl	8002590 <HAL_HCD_HC_Halt>
 800a630:	4603      	mov	r3, r0
 800a632:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a634:	7bfb      	ldrb	r3, [r7, #15]
 800a636:	4618      	mov	r0, r3
 800a638:	f000 f8a0 	bl	800a77c <USBH_Get_USB_Status>
 800a63c:	4603      	mov	r3, r0
 800a63e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a640:	7bbb      	ldrb	r3, [r7, #14]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a64a:	b590      	push	{r4, r7, lr}
 800a64c:	b089      	sub	sp, #36	@ 0x24
 800a64e:	af04      	add	r7, sp, #16
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	4608      	mov	r0, r1
 800a654:	4611      	mov	r1, r2
 800a656:	461a      	mov	r2, r3
 800a658:	4603      	mov	r3, r0
 800a65a:	70fb      	strb	r3, [r7, #3]
 800a65c:	460b      	mov	r3, r1
 800a65e:	70bb      	strb	r3, [r7, #2]
 800a660:	4613      	mov	r3, r2
 800a662:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a672:	787c      	ldrb	r4, [r7, #1]
 800a674:	78ba      	ldrb	r2, [r7, #2]
 800a676:	78f9      	ldrb	r1, [r7, #3]
 800a678:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a67c:	9303      	str	r3, [sp, #12]
 800a67e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a680:	9302      	str	r3, [sp, #8]
 800a682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	4623      	mov	r3, r4
 800a68e:	f7f7 ffa3 	bl	80025d8 <HAL_HCD_HC_SubmitRequest>
 800a692:	4603      	mov	r3, r0
 800a694:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a696:	7bfb      	ldrb	r3, [r7, #15]
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 f86f 	bl	800a77c <USBH_Get_USB_Status>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd90      	pop	{r4, r7, pc}

0800a6ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a6be:	78fa      	ldrb	r2, [r7, #3]
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7f8 fa84 	bl	8002bd0 <HAL_HCD_HC_GetURBState>
 800a6c8:	4603      	mov	r3, r0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	460b      	mov	r3, r1
 800a6dc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d103      	bne.n	800a6f0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 f872 	bl	800a7d4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a6f0:	20c8      	movs	r0, #200	@ 0xc8
 800a6f2:	f7f7 fb43 	bl	8001d7c <HAL_Delay>
  return USBH_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	460b      	mov	r3, r1
 800a70a:	70fb      	strb	r3, [r7, #3]
 800a70c:	4613      	mov	r3, r2
 800a70e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a716:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a718:	78fa      	ldrb	r2, [r7, #3]
 800a71a:	68f9      	ldr	r1, [r7, #12]
 800a71c:	4613      	mov	r3, r2
 800a71e:	011b      	lsls	r3, r3, #4
 800a720:	1a9b      	subs	r3, r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	440b      	add	r3, r1
 800a726:	3317      	adds	r3, #23
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00a      	beq.n	800a744 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a72e:	78fa      	ldrb	r2, [r7, #3]
 800a730:	68f9      	ldr	r1, [r7, #12]
 800a732:	4613      	mov	r3, r2
 800a734:	011b      	lsls	r3, r3, #4
 800a736:	1a9b      	subs	r3, r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	440b      	add	r3, r1
 800a73c:	333c      	adds	r3, #60	@ 0x3c
 800a73e:	78ba      	ldrb	r2, [r7, #2]
 800a740:	701a      	strb	r2, [r3, #0]
 800a742:	e009      	b.n	800a758 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a744:	78fa      	ldrb	r2, [r7, #3]
 800a746:	68f9      	ldr	r1, [r7, #12]
 800a748:	4613      	mov	r3, r2
 800a74a:	011b      	lsls	r3, r3, #4
 800a74c:	1a9b      	subs	r3, r3, r2
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	440b      	add	r3, r1
 800a752:	333d      	adds	r3, #61	@ 0x3d
 800a754:	78ba      	ldrb	r2, [r7, #2]
 800a756:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b082      	sub	sp, #8
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7f7 fb04 	bl	8001d7c <HAL_Delay>
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	4603      	mov	r3, r0
 800a784:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a78a:	79fb      	ldrb	r3, [r7, #7]
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d817      	bhi.n	800a7c0 <USBH_Get_USB_Status+0x44>
 800a790:	a201      	add	r2, pc, #4	@ (adr r2, 800a798 <USBH_Get_USB_Status+0x1c>)
 800a792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a796:	bf00      	nop
 800a798:	0800a7a9 	.word	0x0800a7a9
 800a79c:	0800a7af 	.word	0x0800a7af
 800a7a0:	0800a7b5 	.word	0x0800a7b5
 800a7a4:	0800a7bb 	.word	0x0800a7bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ac:	e00b      	b.n	800a7c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a7ae:	2302      	movs	r3, #2
 800a7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b2:	e008      	b.n	800a7c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b8:	e005      	b.n	800a7c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a7be:	e002      	b.n	800a7c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c4:	bf00      	nop
  }
  return usb_status;
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a7de:	79fb      	ldrb	r3, [r7, #7]
 800a7e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d102      	bne.n	800a7ee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	73fb      	strb	r3, [r7, #15]
 800a7ec:	e001      	b.n	800a7f2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	4803      	ldr	r0, [pc, #12]	@ (800a808 <MX_DriverVbusFS+0x34>)
 800a7fa:	f7f7 fd91 	bl	8002320 <HAL_GPIO_WritePin>
}
 800a7fe:	bf00      	nop
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	40020800 	.word	0x40020800

0800a80c <malloc>:
 800a80c:	4b02      	ldr	r3, [pc, #8]	@ (800a818 <malloc+0xc>)
 800a80e:	4601      	mov	r1, r0
 800a810:	6818      	ldr	r0, [r3, #0]
 800a812:	f000 b82d 	b.w	800a870 <_malloc_r>
 800a816:	bf00      	nop
 800a818:	2000002c 	.word	0x2000002c

0800a81c <free>:
 800a81c:	4b02      	ldr	r3, [pc, #8]	@ (800a828 <free+0xc>)
 800a81e:	4601      	mov	r1, r0
 800a820:	6818      	ldr	r0, [r3, #0]
 800a822:	f000 b8f5 	b.w	800aa10 <_free_r>
 800a826:	bf00      	nop
 800a828:	2000002c 	.word	0x2000002c

0800a82c <sbrk_aligned>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	4e0f      	ldr	r6, [pc, #60]	@ (800a86c <sbrk_aligned+0x40>)
 800a830:	460c      	mov	r4, r1
 800a832:	6831      	ldr	r1, [r6, #0]
 800a834:	4605      	mov	r5, r0
 800a836:	b911      	cbnz	r1, 800a83e <sbrk_aligned+0x12>
 800a838:	f000 f8ae 	bl	800a998 <_sbrk_r>
 800a83c:	6030      	str	r0, [r6, #0]
 800a83e:	4621      	mov	r1, r4
 800a840:	4628      	mov	r0, r5
 800a842:	f000 f8a9 	bl	800a998 <_sbrk_r>
 800a846:	1c43      	adds	r3, r0, #1
 800a848:	d103      	bne.n	800a852 <sbrk_aligned+0x26>
 800a84a:	f04f 34ff 	mov.w	r4, #4294967295
 800a84e:	4620      	mov	r0, r4
 800a850:	bd70      	pop	{r4, r5, r6, pc}
 800a852:	1cc4      	adds	r4, r0, #3
 800a854:	f024 0403 	bic.w	r4, r4, #3
 800a858:	42a0      	cmp	r0, r4
 800a85a:	d0f8      	beq.n	800a84e <sbrk_aligned+0x22>
 800a85c:	1a21      	subs	r1, r4, r0
 800a85e:	4628      	mov	r0, r5
 800a860:	f000 f89a 	bl	800a998 <_sbrk_r>
 800a864:	3001      	adds	r0, #1
 800a866:	d1f2      	bne.n	800a84e <sbrk_aligned+0x22>
 800a868:	e7ef      	b.n	800a84a <sbrk_aligned+0x1e>
 800a86a:	bf00      	nop
 800a86c:	20000980 	.word	0x20000980

0800a870 <_malloc_r>:
 800a870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a874:	1ccd      	adds	r5, r1, #3
 800a876:	f025 0503 	bic.w	r5, r5, #3
 800a87a:	3508      	adds	r5, #8
 800a87c:	2d0c      	cmp	r5, #12
 800a87e:	bf38      	it	cc
 800a880:	250c      	movcc	r5, #12
 800a882:	2d00      	cmp	r5, #0
 800a884:	4606      	mov	r6, r0
 800a886:	db01      	blt.n	800a88c <_malloc_r+0x1c>
 800a888:	42a9      	cmp	r1, r5
 800a88a:	d904      	bls.n	800a896 <_malloc_r+0x26>
 800a88c:	230c      	movs	r3, #12
 800a88e:	6033      	str	r3, [r6, #0]
 800a890:	2000      	movs	r0, #0
 800a892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a896:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a96c <_malloc_r+0xfc>
 800a89a:	f000 f869 	bl	800a970 <__malloc_lock>
 800a89e:	f8d8 3000 	ldr.w	r3, [r8]
 800a8a2:	461c      	mov	r4, r3
 800a8a4:	bb44      	cbnz	r4, 800a8f8 <_malloc_r+0x88>
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	f7ff ffbf 	bl	800a82c <sbrk_aligned>
 800a8ae:	1c43      	adds	r3, r0, #1
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	d158      	bne.n	800a966 <_malloc_r+0xf6>
 800a8b4:	f8d8 4000 	ldr.w	r4, [r8]
 800a8b8:	4627      	mov	r7, r4
 800a8ba:	2f00      	cmp	r7, #0
 800a8bc:	d143      	bne.n	800a946 <_malloc_r+0xd6>
 800a8be:	2c00      	cmp	r4, #0
 800a8c0:	d04b      	beq.n	800a95a <_malloc_r+0xea>
 800a8c2:	6823      	ldr	r3, [r4, #0]
 800a8c4:	4639      	mov	r1, r7
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	eb04 0903 	add.w	r9, r4, r3
 800a8cc:	f000 f864 	bl	800a998 <_sbrk_r>
 800a8d0:	4581      	cmp	r9, r0
 800a8d2:	d142      	bne.n	800a95a <_malloc_r+0xea>
 800a8d4:	6821      	ldr	r1, [r4, #0]
 800a8d6:	1a6d      	subs	r5, r5, r1
 800a8d8:	4629      	mov	r1, r5
 800a8da:	4630      	mov	r0, r6
 800a8dc:	f7ff ffa6 	bl	800a82c <sbrk_aligned>
 800a8e0:	3001      	adds	r0, #1
 800a8e2:	d03a      	beq.n	800a95a <_malloc_r+0xea>
 800a8e4:	6823      	ldr	r3, [r4, #0]
 800a8e6:	442b      	add	r3, r5
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	bb62      	cbnz	r2, 800a94c <_malloc_r+0xdc>
 800a8f2:	f8c8 7000 	str.w	r7, [r8]
 800a8f6:	e00f      	b.n	800a918 <_malloc_r+0xa8>
 800a8f8:	6822      	ldr	r2, [r4, #0]
 800a8fa:	1b52      	subs	r2, r2, r5
 800a8fc:	d420      	bmi.n	800a940 <_malloc_r+0xd0>
 800a8fe:	2a0b      	cmp	r2, #11
 800a900:	d917      	bls.n	800a932 <_malloc_r+0xc2>
 800a902:	1961      	adds	r1, r4, r5
 800a904:	42a3      	cmp	r3, r4
 800a906:	6025      	str	r5, [r4, #0]
 800a908:	bf18      	it	ne
 800a90a:	6059      	strne	r1, [r3, #4]
 800a90c:	6863      	ldr	r3, [r4, #4]
 800a90e:	bf08      	it	eq
 800a910:	f8c8 1000 	streq.w	r1, [r8]
 800a914:	5162      	str	r2, [r4, r5]
 800a916:	604b      	str	r3, [r1, #4]
 800a918:	4630      	mov	r0, r6
 800a91a:	f000 f82f 	bl	800a97c <__malloc_unlock>
 800a91e:	f104 000b 	add.w	r0, r4, #11
 800a922:	1d23      	adds	r3, r4, #4
 800a924:	f020 0007 	bic.w	r0, r0, #7
 800a928:	1ac2      	subs	r2, r0, r3
 800a92a:	bf1c      	itt	ne
 800a92c:	1a1b      	subne	r3, r3, r0
 800a92e:	50a3      	strne	r3, [r4, r2]
 800a930:	e7af      	b.n	800a892 <_malloc_r+0x22>
 800a932:	6862      	ldr	r2, [r4, #4]
 800a934:	42a3      	cmp	r3, r4
 800a936:	bf0c      	ite	eq
 800a938:	f8c8 2000 	streq.w	r2, [r8]
 800a93c:	605a      	strne	r2, [r3, #4]
 800a93e:	e7eb      	b.n	800a918 <_malloc_r+0xa8>
 800a940:	4623      	mov	r3, r4
 800a942:	6864      	ldr	r4, [r4, #4]
 800a944:	e7ae      	b.n	800a8a4 <_malloc_r+0x34>
 800a946:	463c      	mov	r4, r7
 800a948:	687f      	ldr	r7, [r7, #4]
 800a94a:	e7b6      	b.n	800a8ba <_malloc_r+0x4a>
 800a94c:	461a      	mov	r2, r3
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	42a3      	cmp	r3, r4
 800a952:	d1fb      	bne.n	800a94c <_malloc_r+0xdc>
 800a954:	2300      	movs	r3, #0
 800a956:	6053      	str	r3, [r2, #4]
 800a958:	e7de      	b.n	800a918 <_malloc_r+0xa8>
 800a95a:	230c      	movs	r3, #12
 800a95c:	6033      	str	r3, [r6, #0]
 800a95e:	4630      	mov	r0, r6
 800a960:	f000 f80c 	bl	800a97c <__malloc_unlock>
 800a964:	e794      	b.n	800a890 <_malloc_r+0x20>
 800a966:	6005      	str	r5, [r0, #0]
 800a968:	e7d6      	b.n	800a918 <_malloc_r+0xa8>
 800a96a:	bf00      	nop
 800a96c:	20000984 	.word	0x20000984

0800a970 <__malloc_lock>:
 800a970:	4801      	ldr	r0, [pc, #4]	@ (800a978 <__malloc_lock+0x8>)
 800a972:	f000 b84b 	b.w	800aa0c <__retarget_lock_acquire_recursive>
 800a976:	bf00      	nop
 800a978:	20000ac4 	.word	0x20000ac4

0800a97c <__malloc_unlock>:
 800a97c:	4801      	ldr	r0, [pc, #4]	@ (800a984 <__malloc_unlock+0x8>)
 800a97e:	f000 b846 	b.w	800aa0e <__retarget_lock_release_recursive>
 800a982:	bf00      	nop
 800a984:	20000ac4 	.word	0x20000ac4

0800a988 <memset>:
 800a988:	4402      	add	r2, r0
 800a98a:	4603      	mov	r3, r0
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d100      	bne.n	800a992 <memset+0xa>
 800a990:	4770      	bx	lr
 800a992:	f803 1b01 	strb.w	r1, [r3], #1
 800a996:	e7f9      	b.n	800a98c <memset+0x4>

0800a998 <_sbrk_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	4d06      	ldr	r5, [pc, #24]	@ (800a9b4 <_sbrk_r+0x1c>)
 800a99c:	2300      	movs	r3, #0
 800a99e:	4604      	mov	r4, r0
 800a9a0:	4608      	mov	r0, r1
 800a9a2:	602b      	str	r3, [r5, #0]
 800a9a4:	f7f7 f906 	bl	8001bb4 <_sbrk>
 800a9a8:	1c43      	adds	r3, r0, #1
 800a9aa:	d102      	bne.n	800a9b2 <_sbrk_r+0x1a>
 800a9ac:	682b      	ldr	r3, [r5, #0]
 800a9ae:	b103      	cbz	r3, 800a9b2 <_sbrk_r+0x1a>
 800a9b0:	6023      	str	r3, [r4, #0]
 800a9b2:	bd38      	pop	{r3, r4, r5, pc}
 800a9b4:	20000ac0 	.word	0x20000ac0

0800a9b8 <__errno>:
 800a9b8:	4b01      	ldr	r3, [pc, #4]	@ (800a9c0 <__errno+0x8>)
 800a9ba:	6818      	ldr	r0, [r3, #0]
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	2000002c 	.word	0x2000002c

0800a9c4 <__libc_init_array>:
 800a9c4:	b570      	push	{r4, r5, r6, lr}
 800a9c6:	4d0d      	ldr	r5, [pc, #52]	@ (800a9fc <__libc_init_array+0x38>)
 800a9c8:	4c0d      	ldr	r4, [pc, #52]	@ (800aa00 <__libc_init_array+0x3c>)
 800a9ca:	1b64      	subs	r4, r4, r5
 800a9cc:	10a4      	asrs	r4, r4, #2
 800a9ce:	2600      	movs	r6, #0
 800a9d0:	42a6      	cmp	r6, r4
 800a9d2:	d109      	bne.n	800a9e8 <__libc_init_array+0x24>
 800a9d4:	4d0b      	ldr	r5, [pc, #44]	@ (800aa04 <__libc_init_array+0x40>)
 800a9d6:	4c0c      	ldr	r4, [pc, #48]	@ (800aa08 <__libc_init_array+0x44>)
 800a9d8:	f000 f864 	bl	800aaa4 <_init>
 800a9dc:	1b64      	subs	r4, r4, r5
 800a9de:	10a4      	asrs	r4, r4, #2
 800a9e0:	2600      	movs	r6, #0
 800a9e2:	42a6      	cmp	r6, r4
 800a9e4:	d105      	bne.n	800a9f2 <__libc_init_array+0x2e>
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}
 800a9e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ec:	4798      	blx	r3
 800a9ee:	3601      	adds	r6, #1
 800a9f0:	e7ee      	b.n	800a9d0 <__libc_init_array+0xc>
 800a9f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9f6:	4798      	blx	r3
 800a9f8:	3601      	adds	r6, #1
 800a9fa:	e7f2      	b.n	800a9e2 <__libc_init_array+0x1e>
 800a9fc:	0800aae0 	.word	0x0800aae0
 800aa00:	0800aae0 	.word	0x0800aae0
 800aa04:	0800aae0 	.word	0x0800aae0
 800aa08:	0800aae4 	.word	0x0800aae4

0800aa0c <__retarget_lock_acquire_recursive>:
 800aa0c:	4770      	bx	lr

0800aa0e <__retarget_lock_release_recursive>:
 800aa0e:	4770      	bx	lr

0800aa10 <_free_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4605      	mov	r5, r0
 800aa14:	2900      	cmp	r1, #0
 800aa16:	d041      	beq.n	800aa9c <_free_r+0x8c>
 800aa18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa1c:	1f0c      	subs	r4, r1, #4
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	bfb8      	it	lt
 800aa22:	18e4      	addlt	r4, r4, r3
 800aa24:	f7ff ffa4 	bl	800a970 <__malloc_lock>
 800aa28:	4a1d      	ldr	r2, [pc, #116]	@ (800aaa0 <_free_r+0x90>)
 800aa2a:	6813      	ldr	r3, [r2, #0]
 800aa2c:	b933      	cbnz	r3, 800aa3c <_free_r+0x2c>
 800aa2e:	6063      	str	r3, [r4, #4]
 800aa30:	6014      	str	r4, [r2, #0]
 800aa32:	4628      	mov	r0, r5
 800aa34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa38:	f7ff bfa0 	b.w	800a97c <__malloc_unlock>
 800aa3c:	42a3      	cmp	r3, r4
 800aa3e:	d908      	bls.n	800aa52 <_free_r+0x42>
 800aa40:	6820      	ldr	r0, [r4, #0]
 800aa42:	1821      	adds	r1, r4, r0
 800aa44:	428b      	cmp	r3, r1
 800aa46:	bf01      	itttt	eq
 800aa48:	6819      	ldreq	r1, [r3, #0]
 800aa4a:	685b      	ldreq	r3, [r3, #4]
 800aa4c:	1809      	addeq	r1, r1, r0
 800aa4e:	6021      	streq	r1, [r4, #0]
 800aa50:	e7ed      	b.n	800aa2e <_free_r+0x1e>
 800aa52:	461a      	mov	r2, r3
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	b10b      	cbz	r3, 800aa5c <_free_r+0x4c>
 800aa58:	42a3      	cmp	r3, r4
 800aa5a:	d9fa      	bls.n	800aa52 <_free_r+0x42>
 800aa5c:	6811      	ldr	r1, [r2, #0]
 800aa5e:	1850      	adds	r0, r2, r1
 800aa60:	42a0      	cmp	r0, r4
 800aa62:	d10b      	bne.n	800aa7c <_free_r+0x6c>
 800aa64:	6820      	ldr	r0, [r4, #0]
 800aa66:	4401      	add	r1, r0
 800aa68:	1850      	adds	r0, r2, r1
 800aa6a:	4283      	cmp	r3, r0
 800aa6c:	6011      	str	r1, [r2, #0]
 800aa6e:	d1e0      	bne.n	800aa32 <_free_r+0x22>
 800aa70:	6818      	ldr	r0, [r3, #0]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	6053      	str	r3, [r2, #4]
 800aa76:	4408      	add	r0, r1
 800aa78:	6010      	str	r0, [r2, #0]
 800aa7a:	e7da      	b.n	800aa32 <_free_r+0x22>
 800aa7c:	d902      	bls.n	800aa84 <_free_r+0x74>
 800aa7e:	230c      	movs	r3, #12
 800aa80:	602b      	str	r3, [r5, #0]
 800aa82:	e7d6      	b.n	800aa32 <_free_r+0x22>
 800aa84:	6820      	ldr	r0, [r4, #0]
 800aa86:	1821      	adds	r1, r4, r0
 800aa88:	428b      	cmp	r3, r1
 800aa8a:	bf04      	itt	eq
 800aa8c:	6819      	ldreq	r1, [r3, #0]
 800aa8e:	685b      	ldreq	r3, [r3, #4]
 800aa90:	6063      	str	r3, [r4, #4]
 800aa92:	bf04      	itt	eq
 800aa94:	1809      	addeq	r1, r1, r0
 800aa96:	6021      	streq	r1, [r4, #0]
 800aa98:	6054      	str	r4, [r2, #4]
 800aa9a:	e7ca      	b.n	800aa32 <_free_r+0x22>
 800aa9c:	bd38      	pop	{r3, r4, r5, pc}
 800aa9e:	bf00      	nop
 800aaa0:	20000984 	.word	0x20000984

0800aaa4 <_init>:
 800aaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa6:	bf00      	nop
 800aaa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaaa:	bc08      	pop	{r3}
 800aaac:	469e      	mov	lr, r3
 800aaae:	4770      	bx	lr

0800aab0 <_fini>:
 800aab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab2:	bf00      	nop
 800aab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab6:	bc08      	pop	{r3}
 800aab8:	469e      	mov	lr, r3
 800aaba:	4770      	bx	lr
